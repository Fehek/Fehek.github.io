<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>web前端学习笔记17——Vue3</title>
    <link href="/posts/4d268486.html"/>
    <url>/posts/4d268486.html</url>
    
    <content type="html"><![CDATA[<h1 id="基本了解"><a href="#基本了解" class="headerlink" title="基本了解"></a>基本了解</h1><h2 id="认识Vue3"><a href="#认识Vue3" class="headerlink" title="认识Vue3"></a>认识Vue3</h2><ol><li>相关信息<ul><li>Vue3支持vue2的大多数特性</li><li>更好的支持Typescript</li></ul></li><li>性能提升<ul><li>打包大小减少，初次渲染和更新渲染变快，内存减少54%</li><li><strong>使用Proxy代替defineProperty实现数据响应式</strong></li><li><strong>重写虚拟DOM的实现和Tree-Shaking</strong></li></ul></li><li>新增特性<ul><li><strong>Composition (组合) API</strong></li><li>setup<ul><li>ref 和 reactive</li><li>computed 和 watch</li><li>新的生命周期函数</li><li>provide与inject</li><li>…</li></ul></li><li>新组件<ul><li>Fragment - 文档碎片</li><li>Teleport - 瞬移组件的位置</li><li>Suspense - 异步加载组件的loading界面</li></ul></li><li>其它API更新<ul><li>全局API的修改</li><li>将原来的全局API转移到应用对象</li><li>模板语法变化</li></ul></li></ul></li></ol><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><ol><li>使用vue-cli<figure class="highlight bash"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">## 安装或者升级</span><br>npm install -g @vue/cli<br><span class="hljs-comment">## 保证 vue cli 版本在 4.5.0 以上</span><br>vue --version<br><span class="hljs-comment">## 创建项目</span><br>vue create my-project<br></code></pre></div></td></tr></tbody></table></figure>接下来的步骤：<br>Please pick a preset - 选择 Manually select features<br>Check the features needed for your project - 选择上 TypeScript ，按空格是选择，回车是下一步<br>Choose a version of Vue.js that you want to start the project with - 选择 3.x (Preview)<br>之后全部回车</li><li>使用vite<ul><li>Vite 是一个 web 开发构建工具，由于其原生 ES 模块导入方式，可以实现闪电般的冷服务器启动。</li><li>它做到了<strong>本地快速开发启动</strong>, 在生产环境下基于 Rollup 打包。<ul><li>快速的冷启动，不需要等待打包操作；</li><li>即时的热模块更新，替换性能和模块数量的解耦让更新飞起；</li><li>真正的按需编译，不再等待整个应用编译完成，这是一个巨大的改变。</li></ul></li><li>使用 npm<figure class="highlight bash"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">npm init @vitejs/app &lt;project-name&gt;<br><span class="hljs-built_in">cd</span> &lt;project-name&gt;<br>npm install<br>npm run dev<br></code></pre></div></td></tr></tbody></table></figure></li></ul></li></ol><h1 id="Composition-API"><a href="#Composition-API" class="headerlink" title="Composition API"></a>Composition API</h1><h2 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h2><p>新的option, 所有的组合API函数都在此使用, 只在初始化时执行一次<br>函数如果返回对象, 对象中的属性或方法, 模板中可以直接使用</p><h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><ul><li>作用: 定义一个数据的响应式</li><li>语法: const xxx = ref(initValue):<ul><li>创建一个包含响应式数据的引用(reference)对象</li><li>js中操作数据: xxx.value</li><li>模板中操作数据: 不需要.value</li></ul></li><li>一般用来定义一个基本类型的响应式数据<figure class="highlight plain"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;h2&gt;{{ count }}&lt;/h2&gt;<br>  &lt;hr /&gt;<br>  &lt;button @click="update"&gt;更新&lt;/button&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import { ref } from 'vue'<br>export default {<br>  /* 在Vue3中依然可以使用data和methods配置, 但建议使用其新语法实现<br>  data () {<br>    return {<br>      count: 0<br>    }<br>  },<br>  methods: {<br>    update () {<br>      this.count++<br>    }<br>  } */<br><br>  // 使用vue3的composition API<br>  setup() {<br>    // 定义响应式数据ref对象<br>    const count = ref(1)<br>    console.log(count)<br><br>    // 更新响应式数据的函数<br>    function update() {<br>      // alert('update')<br>      count.value = count.value + 1<br>    }<br><br>    return {<br>      count,<br>      update<br>    }<br>  }<br>}<br>&lt;/script&gt;<br></code></pre></div></td></tr></tbody></table></figure></li></ul><h2 id="reactive"><a href="#reactive" class="headerlink" title="reactive"></a>reactive</h2><ul><li>作用: 定义多个数据的响应式</li><li>const proxy = reactive(obj): 接收一个普通对象然后返回该普通对象的响应式代理器对象</li><li>响应式转换是“深层的”：会影响对象内部所有嵌套的属性</li><li>内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据都是响应式的 <figure class="highlight plain"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;h2&gt;name:{{ state.name }}&lt;/h2&gt;<br>  &lt;h2&gt;age:{{ state.age }}&lt;/h2&gt;<br>  &lt;h2&gt;study:{{ state.study }}&lt;/h2&gt;<br>  &lt;hr /&gt;<br>  &lt;button @click="update"&gt;更新&lt;/button&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import { reactive } from 'vue'<br>export default {<br>  setup () {<br>    const state = reactive({<br>      name: 'Tom',<br>      age: 18,<br>      study: {<br>        level: '+',<br>        time: 1<br>      }<br>    })<br>    console.log(state, state.study)<br><br>    const update = () =&gt; {<br>      state.name += '--'<br>      state.age += 1<br>      state.study.level += '++'<br>      state.study.time += 2<br>    }<br>    return { state, update }<br>  }<br>}<br>&lt;/script&gt;<br></code></pre></div></td></tr></tbody></table></figure></li></ul><h2 id="Vue2与Vue3的响应式"><a href="#Vue2与Vue3的响应式" class="headerlink" title="Vue2与Vue3的响应式"></a>Vue2与Vue3的响应式</h2><h3 id="Vue2的响应式"><a href="#Vue2的响应式" class="headerlink" title="Vue2的响应式"></a>Vue2的响应式</h3><ul><li>核心:<ul><li>对象: 通过defineProperty对对象的已有属性值的读取和修改进行劫持(监视/拦截)</li><li>数组: 通过重写数组更新数组一系列更新元素的方法来实现元素修改的劫持<figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">Object</span>.defineProperty(data, <span class="hljs-string">'count'</span>, {<br>    get () {}, <br>    set () {}<br>})<br></code></pre></div></td></tr></tbody></table></figure></li></ul></li><li>问题<ul><li>对象直接新添加的属性或删除已有属性, 界面不会自动更新</li><li>直接通过下标替换元素或更新length, 界面不会自动更新 arr[1] = {}</li></ul></li></ul><h3 id="Vue3的响应式"><a href="#Vue3的响应式" class="headerlink" title="Vue3的响应式"></a>Vue3的响应式</h3><ul><li>核心:<ul><li>通过 Proxy(代理): 拦截对data任意属性的任意操作, 包括属性值的读写, 属性的添加, 属性的删除等…</li><li>通过 Reflect(反射): 动态对被代理对象的相应属性进行特定的操作</li><li>文档:<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect</a></li></ul></li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><br><span class="javascript">    <span class="hljs-comment">// 目标对象</span></span><br><span class="javascript">    <span class="hljs-keyword">const</span> user = {</span><br><span class="javascript">      name: <span class="hljs-string">'小明'</span>,</span><br>      age: 28,<br>      wife: {<br><span class="javascript">        name: <span class="hljs-string">'小红'</span>,</span><br>        age: 25<br>      }<br>    }<br><span class="javascript">    <span class="hljs-comment">// 把目标对象变成代理对象</span></span><br><span class="javascript">    <span class="hljs-comment">// 参数1：user=&gt;target目标对象</span></span><br><span class="javascript">    <span class="hljs-comment">// 参数2：handler=&gt;处理器对象，用来监视数据及数据的操作</span></span><br><span class="javascript">    <span class="hljs-keyword">const</span> proxyUser = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(user, {</span><br><span class="javascript">      <span class="hljs-comment">// 获取目标对象的某个属性</span></span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params">target, prop</span>)</span> {</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'get方法调用了'</span>)</span><br><span class="javascript">        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Reflect</span>.get(target, prop)</span><br>      },<br><span class="javascript">      <span class="hljs-comment">// 修改目标对象的属性值/为目标对象添加新的属性</span></span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">target, prop, val</span>)</span> {</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'set方法调用了'</span>)</span><br><span class="javascript">        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Reflect</span>.set(target, prop, val)</span><br>      },<br><span class="javascript">      <span class="hljs-comment">// 删除目标对象上的某个属性</span></span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">deleteProperty</span>(<span class="hljs-params">target, prop</span>)</span> {</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'delete方法调用了'</span>)</span><br><span class="javascript">        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Reflect</span>.set(target, prop)</span><br>      }<br>    })<br><br><span class="javascript">    <span class="hljs-comment">// 通过代理对象获取目标对象中的某个属性值</span></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(proxyUser.name)</span><br><span class="javascript">    <span class="hljs-comment">// 通过代理对象更新目标对象上的某个属性值</span></span><br><span class="javascript">    proxyUser.name = <span class="hljs-string">'小王'</span></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(user)</span><br><span class="javascript">    <span class="hljs-comment">// 通过代理对象向目标对象中添加一个新的属性</span></span><br><span class="javascript">    proxyUser.gender = <span class="hljs-string">'男'</span></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(user)</span><br><span class="javascript">    <span class="hljs-comment">// 删除目标对象上的某个属性</span></span><br><span class="javascript">    <span class="hljs-keyword">delete</span> proxyUser.name</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(user)</span><br><span class="javascript">    <span class="hljs-comment">// 更新目标对象中的某个属性对象中的属性值</span></span><br><span class="javascript">    proxyUser.wife.name = <span class="hljs-string">'小花'</span></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(user)</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><h3 id="setup-1"><a href="#setup-1" class="headerlink" title="setup"></a>setup</h3><ul><li>执行的时机<ul><li>在beforeCreate之前执行(一次), 此时组件对象还没有创建</li><li>this是undefined, 不能通过this来访问data/computed/methods/props</li><li>其实所有的composition API相关回调函数中也都不可以</li></ul></li><li>返回值<ul><li>一般都返回一个对象: 为模板提供数据, 也就是模板中可以直接使用此对象中的所有属性/方法</li><li>返回对象中的属性会与data函数返回对象的属性合并成为组件对象的属性，返回对象中的方法会与methods中的方法合并成功组件对象的方法。如果有重名, setup优先。</li><li>一般不要混合使用: methods中可以访问setup提供的属性和方法, 但在setup方法中不能访问data和methods</li><li>setup不能是一个async函数: 因为返回值不再是return的对象, 而是promise, 模板看不到return对象中的属性数据</li></ul></li><li>参数 <code>setup(props, context) / setup(props, {attrs, slots, emit})</code><ul><li>props: 包含props配置声明且传入了的所有属性的对象</li><li>context: 是一个对象，里面有attrs对象，slots对象，emit方法</li><li>attrs: 包含没有在props配置中声明的属性的对象, 相当于 this.$attrs</li><li>slots: 包含所有传入的插槽内容的对象, 相当于 this.$slots</li><li>emit: 用来分发自定义事件的函数, 相当于 this.$emit</li></ul></li></ul><h3 id="ref与reactive"><a href="#ref与reactive" class="headerlink" title="ref与reactive"></a>ref与reactive</h3><ul><li>是Vue3的 composition API中2个最重要的响应式API</li><li>ref用来处理基本类型数据, reactive用来处理对象(递归深度响应式)</li><li>如果用ref对象/数组, 内部会自动将对象/数组转换为reactive的代理对象</li><li>ref内部: 通过给value属性添加getter/setter来实现对数据的劫持</li><li>reactive内部: 通过使用Proxy来实现对对象内部所有数据的劫持, 并通过Reflect操作对象内部数据</li><li>ref的数据操作: 在js中要.value, 在模板中不需要(内部解析模板时会自动添加.value)<figure class="highlight plain"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;h3&gt;m1:{{m1}}&lt;/h3&gt;<br>  &lt;h3&gt;m2:{{m2}}&lt;/h3&gt;<br>  &lt;h3&gt;m3:{{m3}}&lt;/h3&gt;<br>  &lt;hr /&gt;<br>  &lt;button @click="update"&gt;update&lt;/button&gt;<br>&lt;/template&gt;<br><br>&lt;script lang="ts"&gt;<br>import { defineComponent, ref, reactive } from 'vue'<br>export default defineComponent({<br>  name: 'App',<br>  setup() {<br>    const m1 = ref('abc')<br>    const m2 = reactive({<br>      name: 'Tom',<br>      wife: { name: 'Jenny' }<br>    })<br>    const m3 = ref({<br>      name: 'Tom',<br>      wife: { name: 'Jenny' }<br>    })<br>    const update = () =&gt; {<br>      // ref中如果放入的是一个对象，那么是经过了reactive的处理，形成了一个Proxy类型的对象<br>      console.log(m3)<br>      m1.value += '='<br>      m2.wife.name += '='<br>      m3.value.name += '='<br>      m3.value.wife.name += '='<br>      console.log(m3.value.wife)<br>    }<br>    return { m1, m2, m3, update }<br>  }<br>})<br>&lt;/script&gt;<br></code></pre></div></td></tr></tbody></table></figure></li></ul><h2 id="计算属性与监视"><a href="#计算属性与监视" class="headerlink" title="计算属性与监视"></a>计算属性与监视</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;fieldset&gt;<br>    &lt;legend&gt;姓名操作&lt;/legend&gt;<br>    姓氏：&lt;input type="text" placeholder="请输入姓氏" v-model="user.firstName" /&gt;&lt;br /&gt;<br>    名字：&lt;input type="text" placeholder="请输入名字" v-model="user.lastName" /&gt;&lt;br /&gt;<br>  &lt;/fieldset&gt;<br>  &lt;fieldset&gt;<br>    &lt;legend&gt;计算属性和监视的演示&lt;/legend&gt;<br>    姓名：&lt;input type="text" placeholder="显示姓名" v-model="fullName1" /&gt;&lt;br /&gt;<br>    姓名：&lt;input type="text" placeholder="显示姓名" v-model="fullName2" /&gt;&lt;br /&gt;<br>    姓名：&lt;input type="text" placeholder="显示姓名" v-model="fullName3" /&gt;&lt;br /&gt;<br>  &lt;/fieldset&gt;<br>&lt;/template&gt;<br><br>&lt;script lang="ts"&gt;<br>import { computed, defineComponent, reactive, ref, watch, watchEffect } from 'vue'<br>export default defineComponent({<br>  name: 'App',<br>  // 定义一个响应式对象<br>  setup() {<br>    const user = reactive({<br>      firstName: '李',<br>      lastName: '小明'<br>    })<br>    // 计算属性的函数中如果只传入一个回调函数，表示的是get<br>    // 返回的是一个Ref类型的对象<br>    const fullName1 = computed(() =&gt; {<br>      return user.firstName + '_' + user.lastName<br>    })<br><br>    const fullName2 = computed({<br>      get() {<br>        return user.firstName + '_' + user.lastName<br>      },<br>      set(val: string) {<br>        const names = val.split('_')<br>        user.firstName = names[0]<br>        user.lastName = names[1]<br>      }<br>    })<br><br>    const fullName3 = ref('')<br>    watch(user,({ firstName, lastName }) =&gt; {<br>        fullName3.value = firstName + '_' + lastName<br>      }, { immediate: true, deep: true }<br>      // immediate 默认会执行一次watch; deep 深度监视<br>    )<br><br>    // 监视，不需要配置immediate，本身默认就会执行一次<br>    // watchEffect(() =&gt; {<br>    //   fullName3.value = user.firstName + '_' + user.lastName<br>    // })<br><br>    // 当使用watch监视非相应式数据时，需要使用回调函数的形式<br>    watch([() =&gt; user.firstName, () =&gt; user.lastName, fullName3], () =&gt; {<br>      console.log('===')<br>    })<br><br>    return { user, fullName1, fullName2, fullName3 }<br>  }<br>})<br>&lt;/script&gt;<br></code></pre></div></td></tr></tbody></table></figure><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p><img src="https://v3.cn.vuejs.org/images/lifecycle.svg" alt="vue3生命周期"><br><img src="https://cn.vuejs.org/images/lifecycle.png" alt="vue2生命周期"></p><ul><li>与 2.x 版本生命周期相对应的组合式 API<ul><li><del>beforeCreate</del> -&gt; 使用 setup()</li><li><del>created</del> -&gt; 使用 setup()</li><li>beforeMount -&gt; onBeforeMount</li><li>mounted -&gt; onMounted</li><li>beforeUpdate -&gt; onBeforeUpdate</li><li>updated -&gt; onUpdated</li><li>beforeDestroy -&gt; onBeforeUnmount</li><li>destroyed -&gt; onUnmounted</li><li>errorCaptured -&gt; onErrorCaptured</li></ul></li></ul><h2 id="自定义hook函数"><a href="#自定义hook函数" class="headerlink" title="自定义hook函数"></a>自定义hook函数</h2><ul><li>使用Vue3的组合API封装的可复用的功能函数</li><li>自定义hook的作用类似于vue2中的mixin技术</li><li>自定义Hook的优势: 很清楚复用功能代码的来源, 更清楚易懂</li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 目录 --&gt;</span><br>|-- src<br>  |-- App.vue<br>  |-- hooks<br>    |-- useMousePosition.ts<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight ts"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-comment">// 需求：用户在页面中点击页面，把点击的位置的横坐标收集起来并展示出来</span><br><span class="hljs-comment">// useMousePosition.ts</span><br><span class="hljs-keyword">import</span> { onBeforeUnmount, onMounted, ref } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>  <span class="hljs-keyword">const</span> x = ref(-<span class="hljs-number">1</span>)<br>  <span class="hljs-keyword">const</span> y = ref(-<span class="hljs-number">1</span>)<br>  <span class="hljs-comment">// 点击事件的回调函数</span><br>  <span class="hljs-keyword">const</span> clickHandler = <span class="hljs-function">(<span class="hljs-params">event: MouseEvent</span>) =&gt;</span> {<br>    x.value = event.pageX<br>    y.value = event.pageY<br>  }<br>  <span class="hljs-comment">// 页面已经加载完毕了，再进行点击操作</span><br>  <span class="hljs-comment">// 页面加载完毕的生命周期组合API</span><br>  onMounted(<span class="hljs-function">() =&gt;</span> {<br>    <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">'click'</span>, clickHandler)<br>  })<br>  onBeforeUnmount(<span class="hljs-function">() =&gt;</span> {<br>    <span class="hljs-built_in">window</span>.removeEventListener(<span class="hljs-string">'click'</span>, clickHandler)<br>  })<br>  <span class="hljs-keyword">return</span> { x, y }<br>}<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">// App.vue<br>&lt;template&gt;<br>  &lt;h2&gt;自定义hook函数操作&lt;/h2&gt;<br>  &lt;h2&gt;x:{{x}}, y:{{y}}&lt;/h2&gt;<br>&lt;/template&gt;<br><br>&lt;script lang="ts"&gt;<br>import { defineComponent } from 'vue'<br>import useMousePosition from './hooks/useMousePosition'<br>export default defineComponent({<br>  name: 'App',<br>  setup() {<br>    const { x, y } = useMousePosition()<br>    return { x, y }<br>  }<br>})<br>&lt;/script&gt;<br></code></pre></div></td></tr></tbody></table></figure><h2 id="toRefs"><a href="#toRefs" class="headerlink" title="toRefs"></a>toRefs</h2><p>把一个响应式对象转换成普通对象，该普通对象的每个 property 都是一个 ref<br>应用: 当从合成函数返回响应式对象时，toRefs 非常有用，这样消费组件就可以在不丢失响应式的情况下对返回的对象进行分解使用</p><p>问题: reactive 对象取出的所有属性值都是非响应式的<br>解决: 利用 toRefs 可以将一个响应式 reactive 对象的所有原始属性转换为响应式的 ref 属性</p><figure class="highlight plain"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;h2&gt;toRefs使用&lt;/h2&gt;<br>  &lt;h3&gt;foo: {{foo}}&lt;/h3&gt;<br>  &lt;h3&gt;bar: {{bar}}&lt;/h3&gt;<br>&lt;/template&gt;<br><br>&lt;script lang="ts"&gt;<br>import { reactive, toRefs } from 'vue'<br>export default {<br>  setup() {<br>    const state = reactive({<br>      foo: 'a',<br>      bar: 'b'<br>    })<br>    const stateAsRefs = toRefs(state)<br>    setInterval(() =&gt; {<br>      state.foo += '++'<br>      state.bar += '++'<br>    }, 1000)<br><br>    return {<br>      // ...state,<br>      ...stateAsRefs<br>    }<br>  }<br>}<br>&lt;/script&gt;<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;h2&gt;toRefs使用&lt;/h2&gt;<br>  &lt;h3&gt;foo2: {{foo2}}&lt;/h3&gt;<br>  &lt;h3&gt;bar2: {{bar2}}&lt;/h3&gt;<br>&lt;/template&gt;<br><br>&lt;script lang="ts"&gt;<br>import { reactive, toRefs } from 'vue'<br>export default {<br>  setup() {<br>    return { foo2, bar2 }<br>  }<br>}<br>const { foo2, bar2 } = useRef()<br>function useRef() {<br>  const state = reactive({<br>    foo2: 'a',<br>    bar2: 'b'<br>  })<br>  setInterval(() =&gt; {<br>    state.foo2 += '++'<br>    state.bar2 += '++'<br>  }, 1000)<br>  return toRefs(state)<br>}<br>&lt;/script&gt;<br></code></pre></div></td></tr></tbody></table></figure><h2 id="ref获取元素"><a href="#ref获取元素" class="headerlink" title="ref获取元素"></a>ref获取元素</h2><p>利用ref函数获取组件中的标签元素</p><figure class="highlight plain"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">// 功能需求: 让输入框自动获取焦点<br>&lt;template&gt;<br>  &lt;h2&gt;ref获取焦点&lt;/h2&gt;<br>  &lt;input type="text"&gt;---<br>  &lt;input type="text" ref="inputRef"&gt;<br>&lt;/template&gt;<br><br>&lt;script lang="ts"&gt;<br>import { onMounted, ref } from 'vue'<br>export default {<br>  setup() {<br>    // 默认是空的，页面加载完毕，说明组件已经存在了，获取文本框元素<br>    const inputRef = ref&lt;HTMLElement | null&gt;(null)<br>    // 页面加载后的生命周期组合API<br>    onMounted(() =&gt; {<br>      inputRef.value &amp;&amp; inputRef.value.focus()<br>    })<br>    return { inputRef }<br>  }<br>}<br>&lt;/script&gt;<br></code></pre></div></td></tr></tbody></table></figure><h1 id="Composition-API-其它部分"><a href="#Composition-API-其它部分" class="headerlink" title="Composition API 其它部分"></a>Composition API 其它部分</h1><h2 id="shallowReactive-与-shallowRef"><a href="#shallowReactive-与-shallowRef" class="headerlink" title="shallowReactive 与 shallowRef"></a>shallowReactive 与 shallowRef</h2><ul><li>shallowReactive : 只处理了对象内最外层属性的响应式(也就是浅响应式)</li><li>shallowRef: 只处理了value的响应式, 不进行对象的reactive处理</li><li>什么时候用浅响应式呢?<ul><li>一般情况下使用ref和reactive即可</li><li>如果有一个对象数据, 结构比较深, 但变化时只是外层属性变化 =&gt; shallowReactive</li><li>如果有一个对象数据, 后面会产生新的对象来替换 =&gt; shallowRef</li></ul></li></ul><h2 id="readonly-与-shallowReadonly"><a href="#readonly-与-shallowReadonly" class="headerlink" title="readonly 与 shallowReadonly"></a>readonly 与 shallowReadonly</h2><ul><li>readonly:<ul><li>深度只读数据。</li><li>获取一个对象 (响应式或纯对象) 或 ref 并返回原始代理的只读代理。</li><li>只读代理是深层的：访问的任何嵌套 property 也是只读的。</li></ul></li><li>shallowReadonly<ul><li>浅只读数据。</li><li>创建一个代理，使其自身的 property 为只读，但不执行嵌套对象的深度只读转换。</li></ul></li><li>应用场景:<ul><li>在某些特定情况下, 可能不希望对数据进行更新的操作, 那就可以包装生成一个只读代理对象来读取数据, 而不能修改或删除。</li></ul></li></ul><h2 id="toRaw-与-markRaw"><a href="#toRaw-与-markRaw" class="headerlink" title="toRaw 与 markRaw"></a>toRaw 与 markRaw</h2><ul><li>toRaw<ul><li>返回由 reactive 或 readonly 方法转换成响应式代理的普通对象。</li><li>这是一个还原方法，可用于临时读取，访问不会被代理/跟踪，写入时也不会触发界面更新。</li></ul></li><li>markRaw<ul><li>标记一个对象，使其永远不会转换为代理。返回对象本身。</li></ul></li><li>应用场景:<ul><li>有些值不应被设置为响应式的，例如复杂的第三方类实例或 Vue 组件对象。</li><li>当渲染具有不可变数据源的大列表时，跳过代理转换可以提高性能。</li></ul></li></ul><h2 id="toRef"><a href="#toRef" class="headerlink" title="toRef"></a>toRef</h2><ul><li>为源响应式对象上的某个属性创建一个 ref对象, 二者内部操作的是同一个数据值, 更新时二者是同步的</li><li>区别ref: 拷贝了一份新的数据值单独操作, 更新时相互不影响</li><li>应用: 当要将 某个prop 的 ref 传递给复合函数时，toRef 很有用<code>const a = fn(toRef(props, 'foo'))</code><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> state = reactive({<br>  foo: <span class="hljs-number">1</span>,<br>  bar: <span class="hljs-number">2</span><br>})<br><span class="hljs-keyword">const</span> foo = toRef(state, <span class="hljs-string">'foo'</span>)<br><span class="hljs-keyword">const</span> foo2 = ref(state.foo)<br></code></pre></div></td></tr></tbody></table></figure></li></ul><h2 id="customRef"><a href="#customRef" class="headerlink" title="customRef"></a>customRef</h2><p>创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制</p><figure class="highlight plain"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">// 需求: 使用 customRef 实现 debounce 的示例<br>&lt;template&gt;<br>  &lt;h2&gt;debounce示例&lt;/h2&gt;<br>  &lt;input v-model="keyword" placeholder="搜索关键字" /&gt;<br>  &lt;p&gt;{{keyword}}&lt;/p&gt;<br>&lt;/template&gt;<br><br>&lt;script lang="ts"&gt;<br>import { ref, customRef } from 'vue'<br>export default {<br>  setup() {<br>    const keyword = useDebouncedRef('', 500)<br>    console.log(keyword)<br>    return { keyword }<br>  }<br>}<br><br>// 实现函数防抖的自定义ref<br>function useDebouncedRef&lt;T&gt;(value: T, delay = 200) {<br>  let timeout: number<br>  return customRef((track, trigger) =&gt; {<br>    return {<br>      get() {<br>        // 告诉Vue追踪数据<br>        track()<br>        return value<br>      },<br>      set(newValue: T) {<br>        clearTimeout(timeout)<br>        timeout = setTimeout(() =&gt; {<br>          value = newValue<br>          // 告诉Vue去触发界面更新<br>          trigger()<br>        }, delay)<br>      }<br>    }<br>  })<br>}<br>&lt;/script&gt;<br></code></pre></div></td></tr></tbody></table></figure><h2 id="provide-与-inject"><a href="#provide-与-inject" class="headerlink" title="provide 与 inject"></a>provide 与 inject</h2><p>provide和inject提供依赖注入，功能类似 2.x 的provide/inject<br>可以不经过父级组件，直接向孙子组件传输数据</p><figure class="highlight plain"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">// App.vue<br>&lt;template&gt;<br>  &lt;h2&gt;provide 与 inject&lt;/h2&gt;<br>  &lt;p&gt;当前颜色：{{color}}&lt;/p&gt;<br>  &lt;button @click="color='red'"&gt;red&lt;/button&gt;<br>  &lt;button @click="color='yellow'"&gt;yellow&lt;/button&gt;<br>  &lt;button @click="color='green'"&gt;green&lt;/button&gt;<br>  &lt;hr /&gt;<br>  &lt;Son /&gt;<br>&lt;/template&gt;<br><br>&lt;script lang="ts"&gt;<br>import { defineComponent, ref, provide } from 'vue'<br>import Son from './components/Son.vue'<br>export default defineComponent({<br>  name: 'App',<br>  components: { Son },<br>  setup() {<br>    const color = ref('red')<br>    // 提供数据<br>    provide('color', color)<br>    return { color }<br>  }<br>})<br>&lt;/script&gt;<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">components/Son.vue<br>&lt;template&gt;<br>  &lt;h3&gt;Son子级组件&lt;/h3&gt;<br>  &lt;hr /&gt;<br>  &lt;GrandSon /&gt;<br>&lt;/template&gt;<br><br>&lt;script lang="ts"&gt;<br>import { defineComponent } from 'vue'<br>import GrandSon from './GrandSon.vue'<br>export default defineComponent({<br>  name: 'Son',<br>  components: { GrandSon }<br>})<br>&lt;/script&gt;<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">components/GrandSon.vue<br>&lt;template&gt;<br>  &lt;h3 :style="{color}"&gt;GrandSon孙子组件&lt;/h3&gt;<br>&lt;/template&gt;<br><br>&lt;script lang="ts"&gt;<br>import { defineComponent, inject } from 'vue'<br>export default defineComponent({<br>  name: 'GrandSon',<br>  setup() {<br>    const color = inject('color')<br>    return { color }<br>  }<br>})<br>&lt;/script&gt;<br></code></pre></div></td></tr></tbody></table></figure><h2 id="响应式数据的判断"><a href="#响应式数据的判断" class="headerlink" title="响应式数据的判断"></a>响应式数据的判断</h2><ul><li>isRef: 检查一个值是否为一个 ref 对象</li><li>isReactive: 检查一个对象是否是由 reactive 创建的响应式代理</li><li>isReadonly: 检查一个对象是否是由 readonly 创建的只读代理</li><li>isProxy: 检查一个对象是否是由 reactive 或者 readonly 方法创建的代理</li></ul><h1 id="手写组合API"><a href="#手写组合API" class="headerlink" title="手写组合API"></a>手写组合API</h1><h2 id="shallowReactive-与-reactive"><a href="#shallowReactive-与-reactive" class="headerlink" title="shallowReactive 与 reactive"></a>shallowReactive 与 reactive</h2><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 定义一个reactiveHandler处理对象</span><br><span class="hljs-keyword">const</span> reactiveHandler = {<br>  <span class="hljs-comment">// 获取属性值</span><br>  get (target, prop) {<br>    <span class="hljs-keyword">const</span> result = <span class="hljs-built_in">Reflect</span>.get(target, prop)<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'拦截了读取数据'</span>, prop, result)<br>    <span class="hljs-keyword">return</span> result<br>  },<br>  <span class="hljs-comment">// 修改属性值或是添加属性</span><br>  set (target, prop, value) {<br>    <span class="hljs-keyword">const</span> result = <span class="hljs-built_in">Reflect</span>.set(target, prop, value)<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'拦截了修改数据或者是添加属性'</span>, prop, value)<br>    <span class="hljs-keyword">return</span> result<br>  },<br>  <span class="hljs-comment">// 删除某个属性</span><br>  deleteProperty (target, prop) {<br>    <span class="hljs-keyword">const</span> result = <span class="hljs-built_in">Reflect</span>.deleteProperty(target, prop)<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'拦截了删除数据'</span>, prop)<br>    <span class="hljs-keyword">return</span> result<br>  }<br>}<br><br><span class="hljs-comment">// 定义一个shallowReactive函数，传入一个目标对象</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">shallowReactive</span> (<span class="hljs-params">target</span>) </span>{<br>  <span class="hljs-comment">// 判断当前的目标对象是不是object类型（对象/数组）</span><br>  <span class="hljs-keyword">if</span> (target &amp;&amp; <span class="hljs-keyword">typeof</span> target === <span class="hljs-string">'object'</span>) {<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(target, reactiveHandler)<br>  }<br>  <span class="hljs-comment">// 如果传入的数据是基本类型的数据，那么就直接返回</span><br>  <span class="hljs-keyword">return</span> target<br>}<br><br><span class="hljs-comment">// 定义一个reactive函数，传入一个目标对象function shallowReactive (target) {</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reactive</span> (<span class="hljs-params">target</span>) </span>{<br>  <span class="hljs-comment">// 判断当前的目标对象是不是object类型（对象/数组）</span><br>  <span class="hljs-keyword">if</span> (target &amp;&amp; <span class="hljs-keyword">typeof</span> target === <span class="hljs-string">'object'</span>) {<br>    <span class="hljs-comment">// 对数组或者是对象中多有数据进行reactive的递归处理</span><br>    <span class="hljs-comment">// 先判断当前的数据是不是数组</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Array</span>.isArray(target)) {<br>      <span class="hljs-comment">// 数组的数据要进行遍历操作</span><br>      target.forEach(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> {<br>        target[index] = reactive(item)<br>      })<br>    } <span class="hljs-keyword">else</span> {<br>      <span class="hljs-comment">// 再判断当前的数据是不是对象</span><br>      <span class="hljs-comment">// 对象的数据也要进行遍历操作</span><br>      <span class="hljs-built_in">Object</span>.keys(target).forEach(<span class="hljs-function"><span class="hljs-params">key</span> =&gt;</span> {<br>        target[key] = reactive(target[key])<br>      })<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(target, reactiveHandler)<br>  }<br>  <span class="hljs-comment">// 如果传入的数据是基本类型的数据，那么就直接返回</span><br>  <span class="hljs-keyword">return</span> target<br>}<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"index.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> proxyUser1 = shallowReactive({</span><br><span class="javascript">      name: <span class="hljs-string">'小明'</span>,</span><br>      car: {<br><span class="javascript">        color: <span class="hljs-string">'red'</span></span><br>      }<br>    })<br><span class="javascript">    <span class="hljs-comment">// proxyUser1.name = '小红' // 拦截到了写的数据</span></span><br><span class="javascript">    <span class="hljs-comment">// proxyUser1.name += '==' // 拦截到了读和写的数据</span></span><br><span class="javascript">    <span class="hljs-comment">// proxyUser1.car.color += '==' // 拦截到了读数据，但是拦截不到写的数据</span></span><br><span class="javascript">    <span class="hljs-comment">// delete proxyUser1.name // 拦截到了删除数据</span></span><br><span class="javascript">    <span class="hljs-comment">// delete proxyUser1.car.color // 只拦截到了读，但是拦截不到删除</span></span><br><br><span class="javascript">    <span class="hljs-keyword">const</span> proxyUser2 = reactive({</span><br><span class="javascript">      name: <span class="hljs-string">'小明'</span>,</span><br>      car: {<br><span class="javascript">        color: <span class="hljs-string">'red'</span></span><br>      }<br>    })<br><span class="javascript">    <span class="hljs-comment">// proxyUser2.name += '==' // 拦截到了读和修改的数据</span></span><br><span class="javascript">    <span class="hljs-comment">// proxyUser2.car.color += '==' // 拦截到了到了读和修改的数据</span></span><br><span class="javascript">    <span class="hljs-comment">// delete proxyUser2.name // 拦截到了删除</span></span><br><span class="javascript">    <span class="hljs-comment">// delete proxyUser2.car.color // 拦截到了读和删除</span></span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><h2 id="shallowReadonly-与-readonly"><a href="#shallowReadonly-与-readonly" class="headerlink" title="shallowReadonly 与 readonly"></a>shallowReadonly 与 readonly</h2><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 定义了一个readonlyHandler处理器</span><br><span class="hljs-keyword">const</span> readonlyHandler = {<br>  get (target, prop) {<br>    <span class="hljs-keyword">const</span> result = <span class="hljs-built_in">Reflect</span>.get(target, prop)<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'拦截到了读取数据'</span>, prop, result)<br>    <span class="hljs-keyword">return</span> result<br>  },<br>  set (target, prop, value) {<br>    <span class="hljs-built_in">console</span>.warn(<span class="hljs-string">'只能读取数据，不能修改数据或添加数据'</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>  },<br>  deleteProperty (target, prop) {<br>    <span class="hljs-built_in">console</span>.warn(<span class="hljs-string">'只能读取数据，不能删除数据'</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>  }<br>}<br><br><span class="hljs-comment">// 定义一个shallowReadonly函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">shallowReadonly</span> (<span class="hljs-params">target</span>) </span>{<br>  <span class="hljs-comment">// 需要判断当前的数据是不是对象</span><br>  <span class="hljs-keyword">if</span> (target &amp;&amp; <span class="hljs-keyword">typeof</span> target === <span class="hljs-string">'object'</span>) {<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(target, readonlyHandler)<br>  }<br>  <span class="hljs-keyword">return</span> target<br>}<br><br><span class="hljs-comment">// 定义一个readonly函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">readonly</span> (<span class="hljs-params">target</span>) </span>{<br>  <span class="hljs-comment">// 需要判断当前的数据是不是对象</span><br>  <span class="hljs-keyword">if</span> (target &amp;&amp; <span class="hljs-keyword">typeof</span> target === <span class="hljs-string">'object'</span>) {<br>    <span class="hljs-comment">// 判断target是不是数组</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Array</span>.isArray(target)) {<br>      target.forEach(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> {<br>        <span class="hljs-comment">// 遍历数组</span><br>        target[index] = readonly(item)<br>      })<br>    } <span class="hljs-keyword">else</span> { <span class="hljs-comment">// 判断target是不是对象</span><br>      <span class="hljs-comment">// 遍历对象</span><br>      <span class="hljs-built_in">Object</span>.keys(target).forEach(<span class="hljs-function"><span class="hljs-params">key</span> =&gt;</span> {<br>        target[key] = readonly(target[key])<br>      })<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(target, readonlyHandler)<br>  }<br>  <span class="hljs-comment">// 如果不是对象或数组，那么直接返回</span><br>  <span class="hljs-keyword">return</span> target<br>}<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><br><span class="javascript">  <span class="hljs-keyword">const</span> proxyUser3 = shallowReadonly({</span><br><span class="javascript">    name: <span class="hljs-string">'小明'</span>,</span><br><span class="javascript">    cars: [<span class="hljs-string">'奔驰'</span>, <span class="hljs-string">'宝马'</span>]</span><br>  })<br><span class="javascript">  <span class="hljs-comment">// console.log(proxyUser3.name) // 可以读取</span></span><br><span class="javascript">  <span class="hljs-comment">// proxyUser3.name = '==' // 不能修改</span></span><br><span class="javascript">  <span class="hljs-comment">// delete proxyUser3.name // 不能删除</span></span><br><span class="javascript">  <span class="hljs-comment">// proxyUser3.cars[0] = '奥迪' // 拦截到了读取，可以修改</span></span><br><span class="javascript">  <span class="hljs-comment">// delete proxyUser3.cars[0] // 拦截到了读取，可以删除</span></span><br><br><span class="javascript">  <span class="hljs-keyword">const</span> proxyUser4 = readonly({</span><br><span class="javascript">    name: <span class="hljs-string">'小明'</span>,</span><br><span class="javascript">    cars: [<span class="hljs-string">'奔驰'</span>, <span class="hljs-string">'宝马'</span>]</span><br>  })<br><span class="javascript">  <span class="hljs-comment">// console.log(proxyUser4.name) // 可以读取</span></span><br><span class="javascript">  <span class="hljs-comment">// proxyUser4.name = '小红' // 只读的</span></span><br><span class="javascript">  <span class="hljs-comment">// proxyUser4.cars[0] = '奥迪' // 只读的</span></span><br><span class="javascript">  <span class="hljs-comment">// delete proxyUser4.name // 只读的</span></span><br><span class="javascript">  <span class="hljs-comment">// delete proxyUser4.cars[0] // 只读的</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><h2 id="shallowRef-与-ref"><a href="#shallowRef-与-ref" class="headerlink" title="shallowRef 与 ref"></a>shallowRef 与 ref</h2><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 定义一个shallowRef</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">shallowRef</span> (<span class="hljs-params">target</span>) </span>{<br>  <span class="hljs-keyword">return</span> {<br>    <span class="hljs-comment">// 保存target数据</span><br>    _value: target,<br>    get value () {<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'劫持到了读取数据'</span>)<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>._value<br>    },<br>    set value (val) {<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'劫持到了修改数据，准备更新界面'</span>, val)<br>      <span class="hljs-built_in">this</span>._value = val<br>    }<br>  }<br>}<br><br><span class="hljs-comment">// 定义一个ref函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ref</span> (<span class="hljs-params">target</span>) </span>{<br>  target = reactive(target)<br>  <span class="hljs-keyword">return</span> {<br>    <span class="hljs-comment">// 保存target数据</span><br>    _value: target,<br>    get value () {<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'劫持到了读取数据'</span>)<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>._value<br>    },<br>    set value (val) {<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'劫持到了修改数据，准备更新界面'</span>, val)<br>      <span class="hljs-built_in">this</span>._value = val<br>    }<br>  }<br>}<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">  <span class="hljs-keyword">const</span> ref1 = shallowRef({</span><br><span class="javascript">    name: <span class="hljs-string">'小明'</span>,</span><br>    cars: {<br><span class="javascript">      color: <span class="hljs-string">'red'</span></span><br>    }<br>  })<br><span class="javascript">  <span class="hljs-comment">// console.log(ref1.value)</span></span><br><span class="javascript">  <span class="hljs-comment">// ref1.value = '==' // 劫持到</span></span><br><span class="javascript">  <span class="hljs-comment">// ref1.value.car = '==' // 劫持不到</span></span><br><br><span class="javascript">  <span class="hljs-keyword">const</span> ref2 = ref({</span><br><span class="javascript">    name: <span class="hljs-string">'小明'</span>,</span><br>    cars: {<br><span class="javascript">      color: <span class="hljs-string">'red'</span></span><br>    }<br>  })<br><span class="javascript">  <span class="hljs-comment">// console.log(ref2.value)</span></span><br><span class="javascript">  <span class="hljs-comment">// ref2.value = '==' // 劫持到</span></span><br><span class="javascript">  <span class="hljs-comment">// ref2.value.car = '==' // 劫持到</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><h2 id="isRef-isReactive-与-isReadonly"><a href="#isRef-isReactive-与-isReadonly" class="headerlink" title="isRef, isReactive 与 isReadonly"></a>isRef, isReactive 与 isReadonly</h2><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ref</span> (<span class="hljs-params">target</span>) </span>{<br>  <span class="hljs-keyword">return</span> { <br>    _is_ref: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 标识当前的对象是ref对象</span><br>  }<br>}<br><span class="hljs-comment">// 定义一个函数isRef，判断当前对象是不是ref对象</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isRef</span> (<span class="hljs-params">obj</span>) </span>{<br>  <span class="hljs-keyword">return</span> obj &amp;&amp; obj._is_ref<br>}<br><br><span class="hljs-keyword">const</span> reactiveHandler = {<br>  get (target, prop) {<br>    <span class="hljs-keyword">if</span> (prop === <span class="hljs-string">'_is_reactive'</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>  }<br>}<br><span class="hljs-comment">// 定义一个函数isReactive，判断当前对象是不是reactive对象</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isReactive</span> (<span class="hljs-params">obj</span>) </span>{<br>  <span class="hljs-keyword">return</span> obj &amp;&amp; obj._is_reactive<br>}<br><br><span class="hljs-keyword">const</span> readonlyHandler = {<br>  get (target, prop) {<br>    <span class="hljs-keyword">if</span> (prop === <span class="hljs-string">'_is_readonly'</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>  }<br>}<br><span class="hljs-comment">// 定义一个函数isReadonly，判断当前对象是不是readonly对象</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isReadonly</span> (<span class="hljs-params">obj</span>) </span>{<br>  <span class="hljs-keyword">return</span> obj &amp;&amp; obj._is_readonly<br>}<br><br><span class="hljs-comment">// 定义一个函数isProxy，判断当前对象是不是reactive对象或者readonly对象</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isProxy</span> (<span class="hljs-params">obj</span>) </span>{<br>  <span class="hljs-keyword">return</span> isReactive(obj) || isReadonly(obj)<br>}<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(isRef(ref({}))) <span class="hljs-comment">// true</span></span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(isReactive(reactive({}))) <span class="hljs-comment">// true</span></span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(isReadonly(readonly({}))) <span class="hljs-comment">// true</span></span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(isProxy(reactive({}))) <span class="hljs-comment">// true</span></span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(isProxy(readonly({}))) <span class="hljs-comment">// true</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><p><a href="https://www.baidupcs.com/rest/2.0/pcs/file?method=batchdownload&amp;app_id=250528&amp;zipcontent=%7B%22fs_id%22:%5B333493587833468%5D%7D&amp;sign=DCb740ccc5511e5e8fedcff06b081203:l5mTTQ3zQs2Wa+HY6ZpvSc4t4jg=&amp;uid=4036931918&amp;time=1618573715&amp;dp-logid=125354098947303274&amp;dp-callid=0&amp;vuk=4036931918&amp;zipname=%E6%89%8B%E5%86%99API%20%E7%AD%891%E4%B8%AA%E6%96%87%E4%BB%B6.zip">手写API 下载</a></p><h1 id="新组件和API"><a href="#新组件和API" class="headerlink" title="新组件和API"></a>新组件和API</h1><h2 id="新组件"><a href="#新组件" class="headerlink" title="新组件"></a>新组件</h2><h3 id="Fragment-片断"><a href="#Fragment-片断" class="headerlink" title="Fragment(片断)"></a>Fragment(片断)</h3><ul><li>在Vue2中: 组件必须有一个根标签</li><li>在Vue3中: 组件可以没有根标签, 内部会将多个标签包含在一个Fragment虚拟元素中</li><li>好处: 减少标签层级, 减小内存占用<figure class="highlight plain"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;h2&gt;aaaa&lt;/h2&gt;<br>  &lt;h2&gt;bbbb&lt;/h2&gt;<br>&lt;/template&gt;<br></code></pre></div></td></tr></tbody></table></figure></li></ul><h3 id="Teleport-瞬移"><a href="#Teleport-瞬移" class="headerlink" title="Teleport(瞬移)"></a>Teleport(瞬移)</h3><ul><li>Teleport 提供了一种干净的方法, 让组件的html在父组件界面外的特定标签(很可能是body)下插入显示<figure class="highlight plain"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;teleport to="body"&gt;<br>    ...<br>  &lt;/teleport&gt;<br>&lt;/template&gt;<br></code></pre></div></td></tr></tbody></table></figure></li></ul><h3 id="Suspense-不确定的"><a href="#Suspense-不确定的" class="headerlink" title="Suspense(不确定的)"></a>Suspense(不确定的)</h3><ul><li>它们允许我们的应用程序在等待异步组件时渲染一些后备内容，可以让我们创建一个平滑的用户体验<figure class="highlight plain"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;Suspense&gt;<br>    &lt;template v-slot:default&gt;<br>      &lt;AsyncComp /&gt;<br>    &lt;/template&gt;<br><br>    &lt;template v-slot:fallback&gt;<br>      &lt;h1&gt;LOADING...&lt;/h1&gt;<br>    &lt;/template&gt;<br>  &lt;/Suspense&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>/* <br>异步组件 + Suspense组件<br>*/<br>&lt;/script&gt;<br></code></pre></div></td></tr></tbody></table></figure></li></ul><h2 id="新API"><a href="#新API" class="headerlink" title="新API"></a>新API</h2><h3 id="全新的全局API"><a href="#全新的全局API" class="headerlink" title="全新的全局API"></a>全新的全局API</h3><ul><li>createApp()</li><li>defineProperty()</li><li>defineAsyncComponent()</li><li>nextTick()</li></ul><h3 id="将原来的全局API转移到应用对象"><a href="#将原来的全局API转移到应用对象" class="headerlink" title="将原来的全局API转移到应用对象"></a>将原来的全局API转移到应用对象</h3><ul><li>app.component()</li><li>app.config()</li><li>app.directive()</li><li>app.mount()</li><li>app.unmount()</li><li>app.use()</li></ul><h3 id="模板语法变化"><a href="#模板语法变化" class="headerlink" title="模板语法变化"></a>模板语法变化</h3><ul><li>v-model的本质变化<ul><li>prop：value -&gt; modelValue；</li><li>event：input -&gt; update:modelValue；</li></ul></li><li>.sync修改符已移除, 由v-model代替</li><li>v-if优先v-for解析</li></ul><h1 id="Vue2和Vue3"><a href="#Vue2和Vue3" class="headerlink" title="Vue2和Vue3"></a>Vue2和Vue3</h1><ul><li>2020年9月发布的正式版</li><li>Vue3支持大多数Vue2的特性</li><li>Vue中设计了一套强大的组合API代替了Vue2中的option API，复用性更强了</li><li>更好地支持TS</li><li><strong>最主要：Vue3中使用了 Proxy 配合 Reflect 代替了Vue2中 <code>Object.defineProperty()</code> 方法实现数据的响应式（数据代理）</strong></li><li>重写了虚拟DOM，速度更快了</li><li>新的组件：Fragment(片段) / Teleport(瞬移) / Suspense(不确定)</li><li>设计了一个新的脚手架工具，vite</li></ul><h1 id="Vue3和React"><a href="#Vue3和React" class="headerlink" title="Vue3和React"></a>Vue3和React</h1><ul><li>支持Teleport，类似React.createPortal</li><li>支持组合式API，类似React Hooks，但原理完全不同<ul><li>VCA的setup函数只运行一次，没有闭包陷阱。VCA是通过返回可监控对象来实现的更新，所以VCA没有useCallback, useMemo之类的函数</li><li>React Hooks，组件实例每次更新都会运行一次组件对应的函数，每次运行对应的函数相应的useState等hook函数都会返回新状态值</li></ul></li><li>对数据响应式监控使用的不是gettter，setter，而是代理对象Proxy</li><li>性能更高：通过只更新数据变化了的部分的DOM来提升性能<ul><li>原理是能够监控到数据在DOM中的哪位位置用过，数据变的时候只更新对应位置的DOM</li><li>在特定情况下不做整个组件树的diff</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>web前端学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>front-end</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web前端学习笔记16——TypeScript</title>
    <link href="/posts/ae93be73.html"/>
    <url>/posts/ae93be73.html</url>
    
    <content type="html"><![CDATA[<h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><ul><li>始于JavaScript，归于JavaScript<br>TypeScript 可以编译出纯净、 简洁的 JavaScript 代码，并且可以运行在任何浏览器上、Node.js 环境中和任何支持 ECMAScript 3（或更高版本）的JavaScript 引擎中。</li><li>强大的类型系统<br>类型系统允许 JavaScript 开发者在开发 JavaScript 应用程序时使用高效的开发工具和常用操作比如静态检查和代码重构。</li><li>先进的 JavaScript<br>TypeScript 提供最新的和不断发展的 JavaScript 特性，包括那些来自 2015 年的 ECMAScript 和未来的提案中的特性，比如异步功能和 Decorators，以帮助建立健壮的组件。</li></ul><h1 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h1><figure class="highlight bash"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 安装</span><br>npm install -g typescript<br><span class="hljs-comment"># 检查是否安装成功</span><br>tsc -v<br></code></pre></div></td></tr></tbody></table></figure><ul><li>ts的文件中如果直接书写js语法的代码，那么在html文件中直接引入ts文件，在谷歌浏览器中是可以直接使用的<br>如果ts文件中有了ts的语法代码，那么就需要把这个ts文件编译成js文件，在html文件中引入js的文件来使用 <code>tsc ./xxx.ts</code><br>ts文件中的函数中的形参，如果使用了某个类型进行修饰，那么最终在编译的js文件中是没有这个类型的<br>ts文件中的变量使用的是let进行修饰，编译的js文件中的修饰符救变成了var</li><li>vscode自动编译<figure class="highlight md"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs md"><span class="hljs-bullet">1.</span> 生成配置文件tsconfig.json<br><span class="hljs-code">    tsc --init</span><br><span class="hljs-code">2. 修改tsconfig.json配置</span><br><span class="hljs-code">    "outDir": "./js",  // 输出默认文件夹</span><br><span class="hljs-code">    "strict": false,   // 严格模式   </span><br><span class="hljs-code">3. 启动监视任务</span><br><span class="hljs-code">    终端 -&gt; 运行任务 -&gt; 监视tsconfig.json</span><br></code></pre></div></td></tr></tbody></table></figure></li></ul><h1 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h1><h2 id="类型注解"><a href="#类型注解" class="headerlink" title="类型注解"></a>类型注解</h2><p>TypeScript 里的类型注解是一种轻量级的为函数或变量添加约束的方式</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">greeter</span> (<span class="hljs-params">person: <span class="hljs-built_in">string</span></span>) </span>{<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">'Hello, '</span> + person<br>}<br><span class="hljs-keyword">let</span> user = <span class="hljs-string">'World'</span><br><span class="hljs-built_in">console</span>.log(greeter(user))<br></code></pre></div></td></tr></tbody></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><figure class="highlight ts"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> Person {<br>  firstName: <span class="hljs-built_in">string</span><br>  lastName: <span class="hljs-built_in">string</span><br>}<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">greeter</span> (<span class="hljs-params">person: Person</span>) </span>{<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">'Hello, '</span> + person.firstName + <span class="hljs-string">' '</span> + person.lastName<br>}<br><span class="hljs-keyword">let</span> user = {<br>  firstName: <span class="hljs-string">'F'</span>,<br>  lastName: <span class="hljs-string">'K'</span><br>}<br><span class="hljs-built_in">console</span>.log(greeter(user))<br></code></pre></div></td></tr></tbody></table></figure><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><figure class="highlight ts"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-comment">// 定义一个类型</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>{<br>  <span class="hljs-comment">// 定义公共的字段（属性）</span><br>  fullName: <span class="hljs-built_in">string</span><br>  firstName: <span class="hljs-built_in">string</span><br>  lastName: <span class="hljs-built_in">string</span><br>  <span class="hljs-comment">// 定义一个构造器函数</span><br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">firstName: <span class="hljs-built_in">string</span>, lastName: <span class="hljs-built_in">string</span></span>)</span> {<br>    <span class="hljs-built_in">this</span>.firstName = firstName<br>    <span class="hljs-built_in">this</span>.lastName = lastName<br>    <span class="hljs-built_in">this</span>.fullName = firstName + <span class="hljs-string">' '</span> + lastName<br>  }<br>}<br><br><span class="hljs-comment">// 定义一个接口</span><br><span class="hljs-keyword">interface</span> Person {<br>  firstName: <span class="hljs-built_in">string</span><br>  lastName: <span class="hljs-built_in">string</span><br>}<br><br><span class="hljs-comment">// 定义一个函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">greeter</span>(<span class="hljs-params">person: Person</span>) </span>{<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">'Hello, '</span> + person.firstName + <span class="hljs-string">' '</span> + person.lastName<br>}<br><br><span class="hljs-comment">// 实例化对象</span><br><span class="hljs-keyword">const</span> user = <span class="hljs-keyword">new</span> User(<span class="hljs-string">'F'</span>, <span class="hljs-string">'K'</span>)<br><span class="hljs-built_in">console</span>.log(greeter(user))<br></code></pre></div></td></tr></tbody></table></figure><p>TypeScript 里的类只是一个语法糖，本质上还是 JavaScript 函数的实现。</p><h1 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h1><h2 id="布尔值-boolean"><a href="#布尔值-boolean" class="headerlink" title="布尔值 boolean"></a>布尔值 boolean</h2><figure class="highlight ts"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> flag: <span class="hljs-built_in">boolean</span> = <span class="hljs-literal">false</span><br>flag = <span class="hljs-literal">false</span><br>flag = <span class="hljs-number">10</span> <span class="hljs-comment">// 报错</span><br></code></pre></div></td></tr></tbody></table></figure><h2 id="数字-number"><a href="#数字-number" class="headerlink" title="数字 number"></a>数字 number</h2><figure class="highlight ts"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> a1: <span class="hljs-built_in">number</span> = <span class="hljs-number">10</span> <span class="hljs-comment">// 十进制</span><br><span class="hljs-keyword">let</span> a2: <span class="hljs-built_in">number</span> = <span class="hljs-number">0b1010</span>  <span class="hljs-comment">// 二进制</span><br><span class="hljs-keyword">let</span> a3: <span class="hljs-built_in">number</span> = <span class="hljs-number">0o12</span> <span class="hljs-comment">// 八进制</span><br><span class="hljs-keyword">let</span> a4: <span class="hljs-built_in">number</span> = <span class="hljs-number">0xa</span> <span class="hljs-comment">// 十六进制</span><br>a1 = <span class="hljs-string">'hello'</span> <span class="hljs-comment">// 报错</span><br></code></pre></div></td></tr></tbody></table></figure><h2 id="字符串-string"><a href="#字符串-string" class="headerlink" title="字符串 string"></a>字符串 string</h2><figure class="highlight ts"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> name:<span class="hljs-built_in">string</span> = <span class="hljs-string">'Jack'</span><br>name = <span class="hljs-number">10</span> <span class="hljs-comment">// 报错</span><br></code></pre></div></td></tr></tbody></table></figure><p><strong>总结：ts中变量一开始是什么类型，那么后期赋值的时候，只能用这个类型的数据，是不允许用其他类型的数据赋值给当前的这个变量中</strong></p><h2 id="undefined-和-null"><a href="#undefined-和-null" class="headerlink" title="undefined 和 null"></a>undefined 和 null</h2><p>默认情况下 null 和 undefined 是所有类型的子类型。 就是说可以把 null 和 undefined 赋值给 number 类型的变量。（关闭严格模式）</p><figure class="highlight ts"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> u: <span class="hljs-literal">undefined</span> = <span class="hljs-literal">undefined</span><br><span class="hljs-keyword">let</span> n: <span class="hljs-literal">null</span> = <span class="hljs-literal">null</span><br><span class="hljs-keyword">let</span> num: <span class="hljs-built_in">number</span> = <span class="hljs-literal">undefined</span><br><span class="hljs-keyword">let</span> num2: <span class="hljs-built_in">number</span> = <span class="hljs-literal">null</span><br></code></pre></div></td></tr></tbody></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组定义后，里面的数据类型必须和定义数组的时候的类型是一致的。</p><figure class="highlight ts"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-comment">// 方式1</span><br><span class="hljs-comment">// let 变量名: 数据类型[] = [值1, 值2, 值3]</span><br><span class="hljs-keyword">let</span> arr1: <span class="hljs-built_in">number</span>[] = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>]<br><span class="hljs-comment">// 方式2：泛型</span><br><span class="hljs-comment">// let 变量名: Array&lt;数据类型&gt; = [值1, 值2, 值3]</span><br><span class="hljs-keyword">let</span> arr2: <span class="hljs-built_in">Array</span>&lt;<span class="hljs-built_in">number</span>&gt; = [<span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">300</span>]<br></code></pre></div></td></tr></tbody></table></figure><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p>在定义数组的时候，类型和数据的个数一开始就已经限定了。<br>元组类型在使用时，数据类型的位置和数据的个数应该和在定义时是一致的。</p><figure class="highlight ts"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> arr3: [<span class="hljs-built_in">string</span>, <span class="hljs-built_in">number</span>, <span class="hljs-built_in">boolean</span>] = [<span class="hljs-string">'hello'</span>, <span class="hljs-number">100.12345</span>, <span class="hljs-literal">true</span>]<br><span class="hljs-built_in">console</span>.log(arr3[<span class="hljs-number">0</span>].split(<span class="hljs-string">''</span>))<br><span class="hljs-built_in">console</span>.log(arr3[<span class="hljs-number">1</span>].toFixed(<span class="hljs-number">2</span>))<br></code></pre></div></td></tr></tbody></table></figure><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p>枚举里面的每个数据值都可以叫元素，每个元素都有自己的编号，默认编号从0开始，依次递增1</p><figure class="highlight ts"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-built_in">enum</span> Color{<br>  red, green, blue<br>}<br><span class="hljs-keyword">let</span> color: Color = Color.red<br><span class="hljs-built_in">console</span>.log(color) <span class="hljs-comment">// 0</span><br><span class="hljs-built_in">console</span>.log(Color.red, Color.green, Color.blue) <span class="hljs-comment">// 0 1 2</span><br></code></pre></div></td></tr></tbody></table></figure><p>或者可以手动赋值</p><figure class="highlight ts"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-built_in">enum</span> Color {red = <span class="hljs-number">1</span>, green, blue}<br><span class="hljs-keyword">let</span> c: Color = Color.green<br><span class="hljs-built_in">console</span>.log(c) <span class="hljs-comment">// 2</span><br></code></pre></div></td></tr></tbody></table></figure><p>枚举类型提供的一个便利是可以由枚举的值得到它的名字</p><figure class="highlight ts"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-built_in">enum</span> Color {red = <span class="hljs-number">1</span>, green, blue}<br><span class="hljs-keyword">let</span> colorName: <span class="hljs-built_in">string</span> = Color[<span class="hljs-number">2</span>]<br><span class="hljs-built_in">console</span>.log(colorName)  <span class="hljs-comment">// 'green'</span><br></code></pre></div></td></tr></tbody></table></figure><h2 id="any"><a href="#any" class="headerlink" title="any"></a>any</h2><figure class="highlight ts"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> notSure: <span class="hljs-built_in">any</span> = <span class="hljs-number">1</span><br>notSure = <span class="hljs-string">'string'</span><br>notSure = <span class="hljs-literal">false</span><br><br><span class="hljs-keyword">let</span> arr: <span class="hljs-built_in">any</span>[] = [<span class="hljs-number">100</span>, <span class="hljs-string">'hello'</span>, <span class="hljs-literal">true</span>]<br><span class="hljs-built_in">console</span>.log(arr[<span class="hljs-number">0</span>].split(<span class="hljs-string">''</span>)) <span class="hljs-comment">// 编译时不会报错，但结果不能执行</span><br></code></pre></div></td></tr></tbody></table></figure><h2 id="void"><a href="#void" class="headerlink" title="void"></a>void</h2><p>某种程度上来说，void 类型像是与 any 类型相反，它表示没有任何类型。当一个函数没有返回值时，通常会见到其返回值类型是 void。</p><figure class="highlight ts"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-comment">// 表示没有任何类型, 一般用来说明函数的返回值不能是undefined和null之外的值 </span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>): <span class="hljs-title">void</span> </span>{<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'fn()'</span>)<br>  <span class="hljs-comment">// return undefined</span><br>  <span class="hljs-comment">// return null</span><br>  <span class="hljs-comment">// return 1 // error</span><br>}<br><br><span class="hljs-comment">// 声明一个 void 类型的变量没什么用，因为只能赋值 undefined 和 null</span><br><span class="hljs-keyword">let</span> unusable: <span class="hljs-built_in">void</span> = <span class="hljs-literal">undefined</span><br></code></pre></div></td></tr></tbody></table></figure><h2 id="object"><a href="#object" class="headerlink" title="object"></a>object</h2><p>object 表示非原始类型，也就是除 number，string，boolean之外的类型。</p><figure class="highlight ts"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-comment">// 定义一个函数，参数是object类型，返回值也是object类型</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn2</span>(<span class="hljs-params">obj: <span class="hljs-built_in">object</span></span>): <span class="hljs-title">object</span> </span>{<br>  <span class="hljs-built_in">console</span>.log(obj)<br>  <span class="hljs-keyword">return</span> {}<br>}<br><span class="hljs-built_in">console</span>.log(fn2({ <span class="hljs-attr">name</span>: <span class="hljs-string">'abc'</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">1</span> }));<br><span class="hljs-comment">// console.log(fn2('abc') // error</span><br><span class="hljs-built_in">console</span>.log(fn2(<span class="hljs-built_in">String</span>))<br><span class="hljs-built_in">console</span>.log(fn2(<span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(<span class="hljs-string">'abc'</span>)))<br></code></pre></div></td></tr></tbody></table></figure><h2 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h2><p>表示取值可以为多种类型中的一种</p><figure class="highlight ts"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-comment">// 定义一个函数得到一个数字或字符串值的字符串形式值</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getString</span>(<span class="hljs-params">str: <span class="hljs-built_in">number</span> | <span class="hljs-built_in">string</span></span>): <span class="hljs-title">string</span> </span>{<br>  <span class="hljs-keyword">return</span> str.toString()<br>}<br><span class="hljs-built_in">console</span>.log(getString(<span class="hljs-string">'123'</span>))<br><span class="hljs-built_in">console</span>.log(getString(<span class="hljs-number">123</span>))<br></code></pre></div></td></tr></tbody></table></figure><h2 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h2><p>类型断言好比其它语言里的类型转换，但是不进行特殊的数据检查和解构。 它没有运行时的影响，只是在编译阶段起作用。 TypeScript 会假设你已经进行了必须的检查。</p><ul><li>类型断言方式1：&lt;类型&gt;变量名</li><li>类型断言方式2：值 as 类型<figure class="highlight ts"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-comment">// 定义一个函数得到一个数字或字符串值的长度</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getString</span>(<span class="hljs-params">str: <span class="hljs-built_in">number</span> | <span class="hljs-built_in">string</span></span>): <span class="hljs-title">number</span> </span>{<br>  <span class="hljs-comment">// return str.toString().length</span><br>  <span class="hljs-comment">// 如果str本身是string类型，是没有必要调用toString()方法</span><br><br>  <span class="hljs-keyword">if</span> ((&lt;<span class="hljs-built_in">string</span>&gt;str).length) {<br>    <span class="hljs-keyword">return</span> (str <span class="hljs-keyword">as</span> <span class="hljs-built_in">string</span>).length<br>  } <span class="hljs-keyword">else</span> {<br>    <span class="hljs-keyword">return</span> str.toString().length<br>  }<br>}<br><span class="hljs-built_in">console</span>.log(getString(<span class="hljs-string">'12345'</span>))<br><span class="hljs-built_in">console</span>.log(getString(<span class="hljs-number">123</span>))<br></code></pre></div></td></tr></tbody></table></figure></li></ul><h2 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h2><p>TS会在没有明确的指定类型的时候推测出一个类型<br>有下面2种情况: 1. 定义变量时赋值了, 推断为对应的类型. 2. 定义变量时没有赋值, 推断为any类型</p><figure class="highlight ts"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-comment">// 定义变量时赋值了, 推断为对应的类型</span><br><span class="hljs-keyword">let</span> a = <span class="hljs-number">123</span> <span class="hljs-comment">// number</span><br><span class="hljs-comment">// a = 'abc' // error</span><br><br><span class="hljs-comment">// 定义变量时没有赋值, 推断为any类型</span><br><span class="hljs-keyword">let</span> b <span class="hljs-comment">// any类型</span><br>b = <span class="hljs-number">123</span><br>b = <span class="hljs-string">'abc'</span><br></code></pre></div></td></tr></tbody></table></figure><h1 id="接口-1"><a href="#接口-1" class="headerlink" title="接口"></a>接口</h1><p>TypeScript 的核心原则之一是对值所具有的结构进行类型检查。我们使用接口（Interfaces）来定义对象的类型。<br>接口是对象的状态(属性)和行为(方法)的抽象(描述)</p><h2 id="初探"><a href="#初探" class="headerlink" title="初探"></a>初探</h2><figure class="highlight ts"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-comment">// 需求: 创建人的对象, 对人的属性进行一定的约束</span><br><span class="hljs-comment">/* id是number类型, 必须有, 只读的</span><br><span class="hljs-comment">name是string类型, 必须有</span><br><span class="hljs-comment">age是number类型, 必须有</span><br><span class="hljs-comment">gender是string类型, 可以没有 */</span><br><br><span class="hljs-comment">// 定义一个接口，该接口作为person对象的类型使用，限定或是约束该对象中的属性数据</span><br><span class="hljs-keyword">interface</span> IPerson {<br>  <span class="hljs-comment">// 只读属性 readonly</span><br>  <span class="hljs-keyword">readonly</span> id: <span class="hljs-built_in">number</span>,<br>  name: <span class="hljs-built_in">string</span>,<br>  age: <span class="hljs-built_in">number</span>,<br>  <span class="hljs-comment">// 可选属性 在属性名后加一个 ? </span><br>  gender?: <span class="hljs-built_in">string</span><br>}<br><br><span class="hljs-comment">// 定义一个对象，该对象的类型就是定义的接口IPerson</span><br><span class="hljs-keyword">const</span> person: IPerson = {<br>  id: <span class="hljs-number">1</span>,<br>  name: <span class="hljs-string">'Rob'</span>,<br>  age: <span class="hljs-number">18</span>,<br>  <span class="hljs-comment">// gender: 'male'</span><br>}<br></code></pre></div></td></tr></tbody></table></figure><p>const &amp; readonly<br>作为变量使用用 const，作为属性则使用 readonly</p><h2 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h2><p>为了使用接口表示函数类型，我们需要给接口定义一个调用签名。它就像是一个只有参数列表和返回值类型的函数定义。参数列表里的每个参数都需要名字和类型。</p><figure class="highlight ts"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-comment">// 定义一个函数，用来作为某个函数的类型使用</span><br><span class="hljs-keyword">interface</span> SearchFunc {<br>  <span class="hljs-comment">// 定义一个调用签名</span><br>  (source: <span class="hljs-built_in">string</span>, <span class="hljs-attr">subString</span>: <span class="hljs-built_in">string</span>): <span class="hljs-built_in">boolean</span><br>}<br><br><span class="hljs-comment">// 定义一个函数，该类型就是上面定义的接口</span><br><span class="hljs-keyword">const</span> mySearch: SearchFunc = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">source: <span class="hljs-built_in">string</span>, sub: <span class="hljs-built_in">string</span></span>): <span class="hljs-title">boolean</span> </span>{<br>  <span class="hljs-keyword">return</span> source.search(sub) &gt; -<span class="hljs-number">1</span><br>}<br><span class="hljs-comment">// 调用函数</span><br><span class="hljs-built_in">console</span>.log(mySearch(<span class="hljs-string">'abcd'</span>, <span class="hljs-string">'bc'</span>)) <span class="hljs-comment">// true</span><br></code></pre></div></td></tr></tbody></table></figure><h2 id="类类型"><a href="#类类型" class="headerlink" title="类类型"></a>类类型</h2><p>与 C# 或 Java 里接口的基本作用一样，TypeScript 也能够用它来明确的强制一个类去符合某种契约。</p><figure class="highlight ts"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-comment">// 定义一个接口</span><br><span class="hljs-keyword">interface</span> IFly {<br>  <span class="hljs-comment">// 该方法没有任何的实现</span><br>  fly()<br>}<br><br><span class="hljs-comment">// 定义一个类，这个类的类型就是上面定义的接口</span><br><span class="hljs-comment">// 也可以理解为，IFly接口约束了当前的这个Person类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> <span class="hljs-title">implements</span> <span class="hljs-title">IFly</span> </span>{<br>  <span class="hljs-function"><span class="hljs-title">fly</span>(<span class="hljs-params"></span>)</span> {<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'I Can Fly!'</span>);<br>  }<br>}<br><span class="hljs-comment">// 实例化对象</span><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person()<br>person.fly() <span class="hljs-comment">// I Can Fly!</span><br><br><span class="hljs-comment">// 定义一个接口</span><br><span class="hljs-keyword">interface</span> ISwim {<br>  swim()<br>}<br><br><span class="hljs-comment">// 定义一个类，这个类的类型就是IFly和ISwim</span><br><span class="hljs-comment">// 当前这个类可以实现多个接口，一个类同时可以被多个接口约束</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person2</span> <span class="hljs-title">implements</span> <span class="hljs-title">IFly</span>, <span class="hljs-title">ISwim</span> </span>{<br>  <span class="hljs-function"><span class="hljs-title">fly</span>(<span class="hljs-params"></span>)</span> {<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'fly!'</span>)<br>  }<br>  <span class="hljs-function"><span class="hljs-title">swim</span>(<span class="hljs-params"></span>)</span> {<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'swim!'</span>)<br>  }<br>}<br><span class="hljs-comment">// 实例化对象</span><br><span class="hljs-keyword">const</span> person2 = <span class="hljs-keyword">new</span> Person2()<br>person2.fly() <span class="hljs-comment">// fly!</span><br>person2.swim() <span class="hljs-comment">// swim!</span><br></code></pre></div></td></tr></tbody></table></figure><p>总结：类可以通过接口的方式，来定义当前这个类的类型<br>类可以实现一个接口，类也可以实现多个接口，要注意，接口中的内容都要真正的实现</p><figure class="highlight ts"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-comment">// 定义一个接口，继承其他的多个接口</span><br><span class="hljs-keyword">interface</span> MyFlyAndSwim <span class="hljs-keyword">extends</span> IFly, ISwim { }<br><br><span class="hljs-comment">// 定义一个类，直接实现MyFlyAndSwim这个接口</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person3</span> <span class="hljs-title">implements</span> <span class="hljs-title">MyFlyAndSwim</span> </span>{<br>  <span class="hljs-function"><span class="hljs-title">fly</span>(<span class="hljs-params"></span>)</span> {<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'f'</span>)<br>  }<br>  <span class="hljs-function"><span class="hljs-title">swim</span>(<span class="hljs-params"></span>)</span> {<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'s'</span>)<br>  }<br>}<br><span class="hljs-keyword">const</span> person3 = <span class="hljs-keyword">new</span> Person3()<br>person3.fly() <span class="hljs-comment">// f</span><br>person3.swim() <span class="hljs-comment">// s</span><br></code></pre></div></td></tr></tbody></table></figure><p>总结：接口和接口之间叫继承（使用的是extends关键字），类和接口之间叫实现（使用的是implements）</p><h1 id="类-1"><a href="#类-1" class="headerlink" title="类"></a>类</h1><h2 id="基本实例"><a href="#基本实例" class="headerlink" title="基本实例"></a>基本实例</h2><p>类可以理解为模板，通过模板可以实例化对象</p><figure class="highlight ts"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-comment">// ts中类的定义及使用</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>{<br>  <span class="hljs-comment">// 定义属性</span><br>  name: <span class="hljs-built_in">string</span><br>  age: <span class="hljs-built_in">number</span><br>  gender: <span class="hljs-built_in">string</span><br>  <span class="hljs-comment">// 定义构造函数：为了将来实例化对象时，可以直接对属性的值进行初始化</span><br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span> = <span class="hljs-string">'小明'</span>, age: <span class="hljs-built_in">number</span> = <span class="hljs-number">18</span>, gender: <span class="hljs-built_in">string</span> = <span class="hljs-string">'男'</span></span>)</span> {<br>    <span class="hljs-built_in">this</span>.name = name<br>    <span class="hljs-built_in">this</span>.age = age<br>    <span class="hljs-built_in">this</span>.gender = gender<br>  }<br>  <span class="hljs-comment">// 定义实例方法</span><br>  <span class="hljs-function"><span class="hljs-title">sayHi</span>(<span class="hljs-params">str: <span class="hljs-built_in">string</span></span>)</span> {<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`你好，我是<span class="hljs-subst">${<span class="hljs-built_in">this</span>.name}</span>，今年已经<span class="hljs-subst">${<span class="hljs-built_in">this</span>.age}</span>岁了，是个<span class="hljs-subst">${<span class="hljs-built_in">this</span>.gender}</span>孩子，<span class="hljs-subst">${str}</span>`</span>)<br>  }<br>}<br><br><span class="hljs-comment">// ts中使用类，实例化对象，可以直接进行初始化操作</span><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">'小红'</span>, <span class="hljs-number">10</span>, <span class="hljs-string">'女'</span>)<br>person.sayHi(<span class="hljs-string">'你叫什么名字'</span>)<br></code></pre></div></td></tr></tbody></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承：类与类之间的关系<br>A类继承了B类，A类叫子类（派生类），B类叫基类（超类 / 父类）</p><figure class="highlight ts"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-comment">// 定义一个类，继承自Person</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span> </span>{<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span>, age: <span class="hljs-built_in">number</span>, gender: <span class="hljs-built_in">string</span></span>)</span> {<br>    <span class="hljs-comment">// 调用的是父类中的构造函数，使用的是super</span><br>    <span class="hljs-built_in">super</span>(name, age, gender)<br>  }<br>  <span class="hljs-comment">// 可以调用父类中的方法</span><br>  <span class="hljs-function"><span class="hljs-title">sayHi</span>(<span class="hljs-params"></span>)</span> {<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'我是学生类中的sayHi方法'</span>)<br>    <span class="hljs-comment">// 调用父类中的sayHi方法</span><br>    <span class="hljs-built_in">super</span>.sayHi(<span class="hljs-string">'haha'</span>)<br>  }<br>}<br><span class="hljs-keyword">const</span> stu = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">'小张'</span>, <span class="hljs-number">21</span>, <span class="hljs-string">'女'</span>)<br>stu.sayHi()<br></code></pre></div></td></tr></tbody></table></figure><p>总结：类和类之间如果要有继承关系，需要使用extends关键字<br>子类中可以调用父类中的构造函数，使用的是super关键字（包括调用父类中的实例方法，也可以使用super）<br>子类中可以重写父类的方法</p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>父类型的引用指向了子类型的对象，不同类型的对象针对相同的方法，产生了不同的行为</p><figure class="highlight ts"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-comment">// 定义一个父类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>{<br>  name: <span class="hljs-built_in">string</span><br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span></span>)</span> {<br>    <span class="hljs-built_in">this</span>.name = name<br>  }<br>  <span class="hljs-function"><span class="hljs-title">run</span>(<span class="hljs-params">distance: <span class="hljs-built_in">number</span> = <span class="hljs-number">0</span></span>)</span> {<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`跑了<span class="hljs-subst">${distance}</span>米这么远的距离`</span>, <span class="hljs-built_in">this</span>.name)<br>  }<br>}<br><br><span class="hljs-comment">// 定义一个子类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>{<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span></span>)</span> {<br>    <span class="hljs-built_in">super</span>(name)<br>  }<br>  <span class="hljs-function"><span class="hljs-title">run</span>(<span class="hljs-params">distance: <span class="hljs-built_in">number</span> = <span class="hljs-number">5</span></span>)</span> {<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`跑了<span class="hljs-subst">${distance}</span>米这么远的距离`</span>, <span class="hljs-built_in">this</span>.name)<br>  }<br>}<br><br><span class="hljs-comment">// 定义一个子类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>{<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span></span>)</span> {<br>    <span class="hljs-built_in">super</span>(name)<br>  }<br>  <span class="hljs-function"><span class="hljs-title">run</span>(<span class="hljs-params">distance: <span class="hljs-built_in">number</span> = <span class="hljs-number">10</span></span>)</span> {<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`跑了<span class="hljs-subst">${distance}</span>米这么远的距离`</span>, <span class="hljs-built_in">this</span>.name)<br>  }<br>}<br><br><span class="hljs-comment">// 实例化父类对象</span><br><span class="hljs-keyword">const</span> ani: Animal = <span class="hljs-keyword">new</span> Animal(<span class="hljs-string">'动物'</span>)<br>ani.run()<br><span class="hljs-comment">// 实例化子类对象</span><br><span class="hljs-keyword">const</span> dog: Dog = <span class="hljs-keyword">new</span> Dog(<span class="hljs-string">'小狗'</span>)<br>dog.run()<br><span class="hljs-keyword">const</span> pig: Pig = <span class="hljs-keyword">new</span> Pig(<span class="hljs-string">'小猪'</span>)<br>pig.run()<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'========'</span>)<br><br><span class="hljs-comment">// 也可以写成这样</span><br><span class="hljs-keyword">const</span> dog2: Animal = <span class="hljs-keyword">new</span> Dog(<span class="hljs-string">'大狗'</span>)<br>dog2.run()<br><span class="hljs-keyword">const</span> pig2: Animal = <span class="hljs-keyword">new</span> Pig(<span class="hljs-string">'大猪'</span>)<br>pig2.run()<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'========'</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">showRun</span>(<span class="hljs-params">ani: Animal</span>) </span>{<br>  ani.run()<br>}<br>showRun(dog2)<br>showRun(pig2)<br></code></pre></div></td></tr></tbody></table></figure><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><ul><li>public<br>默认修饰符，任何位置都可以访问类中的成员</li><li>private<br>不能在声明它的类的外部访问</li><li>protected<br>外部无法无法访问这个成员数据，但是子类中是可以访问的</li><li>readonly<figure class="highlight ts"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-comment">// 修饰类中的成员属性</span><br><span class="hljs-comment">// 修饰后，该属性成员就不能在外部被随意修改了</span><br><span class="hljs-comment">// 构造函数中可以对只读属性成员的数据进行修改</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>{<br>  <span class="hljs-keyword">readonly</span> name: <span class="hljs-built_in">string</span> = <span class="hljs-string">'abc'</span><br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span></span>)</span> {<br>    <span class="hljs-built_in">this</span>.name = name<br>  }<br>}<br><br><span class="hljs-keyword">let</span> stu = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">'John'</span>)<br><span class="hljs-built_in">console</span>.log(stu)<br><span class="hljs-comment">// stu.name = 'Peter' // error</span><br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight ts"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-comment">// 修饰类中的构造函数中的参数（参数属性）</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person2</span> </span>{<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">readonly</span> name: <span class="hljs-built_in">string</span></span>)</span> {<br>    <span class="hljs-comment">// 被修饰后，有了一个name属性成员，外部无法进行修改</span><br>    <span class="hljs-comment">// 也可以使用 public, private, protected 进行修饰，无论是哪个进行修饰，该类中都会自动添加这么一个属性成员</span><br>    <span class="hljs-comment">// this.name = name</span><br>  }<br>}<br><br><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> Person2(<span class="hljs-string">'Jack'</span>)<br><span class="hljs-built_in">console</span>.log(p)<br><span class="hljs-comment">// p.name = 'Kat' // error</span><br><span class="hljs-built_in">console</span>.log(p.name)<br></code></pre></div></td></tr></tbody></table></figure></li></ul><h2 id="存取器"><a href="#存取器" class="headerlink" title="存取器"></a>存取器</h2><p>可以有效控制对对象中成员的访问，通过getter和setter来进行操作</p><figure class="highlight ts"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>{<br>  firstName: <span class="hljs-built_in">string</span><br>  lastName: <span class="hljs-built_in">string</span><br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">firstName: <span class="hljs-built_in">string</span>, lastName: <span class="hljs-built_in">string</span></span>)</span> {<br>    <span class="hljs-built_in">this</span>.firstName = firstName<br>    <span class="hljs-built_in">this</span>.lastName = lastName<br>  }<br>  <span class="hljs-comment">// 读取器=》负责读取数据</span><br>  <span class="hljs-keyword">get</span> <span class="hljs-title">fullName</span>() {<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'getting...'</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.firstName + <span class="hljs-string">'_'</span> + <span class="hljs-built_in">this</span>.lastName<br>  }<br>  <span class="hljs-comment">// 设置器 =》负责设置数据（修改）</span><br>  <span class="hljs-keyword">set</span> <span class="hljs-title">fullName</span>(<span class="hljs-params">val</span>) {<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'setting...'</span>)<br>    <span class="hljs-keyword">let</span> names = val.split(<span class="hljs-string">'_'</span>)<br>    <span class="hljs-built_in">this</span>.firstName = names[<span class="hljs-number">0</span>]<br>    <span class="hljs-built_in">this</span>.lastName = names[<span class="hljs-number">1</span>]<br>  }<br>}<br><span class="hljs-keyword">const</span> person: Person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">'张'</span>, <span class="hljs-string">'三'</span>)<br><span class="hljs-built_in">console</span>.log(person)<br><span class="hljs-comment">// 获取该属性成员属性</span><br><span class="hljs-built_in">console</span>.log(person.fullName)<br><span class="hljs-comment">// 设置该属性的数据</span><br>person.fullName = <span class="hljs-string">'李_四'</span><br><span class="hljs-built_in">console</span>.log(person.fullName)<br></code></pre></div></td></tr></tbody></table></figure><h2 id="静态属性"><a href="#静态属性" class="headerlink" title="静态属性"></a>静态属性</h2><p>非静态属性, 是类的实例对象的属性<br>静态属性, 是类对象的属性</p><figure class="highlight ts"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>{<br>  name1: <span class="hljs-built_in">string</span> = <span class="hljs-string">'A'</span><br>  <span class="hljs-keyword">static</span> name2: <span class="hljs-built_in">string</span> = <span class="hljs-string">'B'</span><br>}<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">new</span> Person().name1)<br><span class="hljs-comment">// console.log(Person.name1) // error</span><br><span class="hljs-comment">// console.log(new Person().name2) // error</span><br><span class="hljs-built_in">console</span>.log(Person.name2)<br></code></pre></div></td></tr></tbody></table></figure><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>抽象类不能被实例化，可以包含实例方法。作用是为了子类服务的。</p><figure class="highlight ts"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>{<br>  <span class="hljs-keyword">abstract</span> cry()<br>  <span class="hljs-function"><span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span> {<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'run()'</span>)<br>  }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>{<br>  <span class="hljs-function"><span class="hljs-title">cry</span>(<span class="hljs-params"></span>)</span> {<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Dog cry()'</span>)<br>  }<br>}<br><br><span class="hljs-keyword">const</span> dog = <span class="hljs-keyword">new</span> Dog()<br>dog.cry()<br>dog.run()<br></code></pre></div></td></tr></tbody></table></figure><h1 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h1><p>函数名相同, 而形参不同的多个函数</p><figure class="highlight ts"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-comment">/* </span><br><span class="hljs-comment">需求: 有一个add函数，它可以接收2个string类型的参数进行拼接，也可以接收2个number类型的参数进行相加 </span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// 重载函数声明</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">x: <span class="hljs-built_in">string</span>, y: <span class="hljs-built_in">string</span></span>): <span class="hljs-title">string</span></span><br><span class="hljs-function"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">x: <span class="hljs-built_in">number</span>, y: <span class="hljs-built_in">number</span></span>): <span class="hljs-title">number</span></span></span><br><span class="hljs-function"><span class="hljs-function"></span></span><br><span class="hljs-function"><span class="hljs-function">// 定义函数实现</span></span><br><span class="hljs-function"><span class="hljs-function"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">x: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span>, y: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span></span>): <span class="hljs-title">string</span> | <span class="hljs-title">number</span> </span>{</span></span><br><span class="hljs-function"><span class="hljs-function">  // 在实现上我们要注意严格判断两个参数的类型是否相等，而不能简单的写一个 <span class="hljs-title">x</span> + <span class="hljs-title">y</span></span></span><br><span class="hljs-function"><span class="hljs-function">  <span class="hljs-title">if</span> (<span class="hljs-params"><span class="hljs-keyword">typeof</span> x === <span class="hljs-string">'string'</span> &amp;&amp; <span class="hljs-keyword">typeof</span> y === <span class="hljs-string">'string'</span></span>) </span>{</span><br><span class="hljs-function">    <span class="hljs-title">return</span> <span class="hljs-title">x</span> + <span class="hljs-title">y</span></span><br><span class="hljs-function">  } <span class="hljs-title">else</span> <span class="hljs-title">if</span> (<span class="hljs-params"><span class="hljs-keyword">typeof</span> x === <span class="hljs-string">'number'</span> &amp;&amp; <span class="hljs-keyword">typeof</span> y === <span class="hljs-string">'number'</span></span>) </span>{<br>    <span class="hljs-keyword">return</span> x + y<br>  }<br>}<br><br><span class="hljs-built_in">console</span>.log(add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))<br><span class="hljs-built_in">console</span>.log(add(<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>))<br><span class="hljs-comment">// console.log(add(1, 'a')) // 若不写重载函数声明，不会报错</span><br></code></pre></div></td></tr></tbody></table></figure><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><p>指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定具体类型的一种特性。</p><h2 id="使用函数泛型"><a href="#使用函数泛型" class="headerlink" title="使用函数泛型"></a>使用函数泛型</h2><figure class="highlight ts"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createArray</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params">value: T, count: <span class="hljs-built_in">number</span></span>): <span class="hljs-title">T</span>[] </span>{<br>  <span class="hljs-keyword">const</span> arr: <span class="hljs-built_in">Array</span>&lt;T&gt; = []<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; count; i++) {<br>    arr.push(value)<br>  }<br>  <span class="hljs-keyword">return</span> arr<br>}<br><br><span class="hljs-keyword">const</span> arr = createArray&lt;<span class="hljs-built_in">number</span>&gt;(<span class="hljs-number">11.123</span>, <span class="hljs-number">3</span>)<br><span class="hljs-built_in">console</span>.log(arr[<span class="hljs-number">0</span>].toFixed())<br><span class="hljs-keyword">const</span> arr2 = createArray&lt;<span class="hljs-built_in">string</span>&gt;(<span class="hljs-string">'aa'</span>, <span class="hljs-number">3</span>)<br><span class="hljs-built_in">console</span>.log(arr2[<span class="hljs-number">0</span>].split(<span class="hljs-string">''</span>))<br></code></pre></div></td></tr></tbody></table></figure><h2 id="多个泛型参数的函数"><a href="#多个泛型参数的函数" class="headerlink" title="多个泛型参数的函数"></a>多个泛型参数的函数</h2><p>一个函数可以定义多个泛型参数</p><figure class="highlight ts"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getMsg</span>&lt;<span class="hljs-title">K</span>, <span class="hljs-title">V</span>&gt;(<span class="hljs-params">value1: K, value2: V</span>): [<span class="hljs-title">K</span>, <span class="hljs-title">V</span>] </span>{<br>  <span class="hljs-keyword">return</span> [value1, value2]<br>}<br><span class="hljs-keyword">const</span> arr1 = getMsg&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">number</span>&gt;(<span class="hljs-string">'Jack'</span>, <span class="hljs-number">100.123</span>)<br><span class="hljs-built_in">console</span>.log(arr1[<span class="hljs-number">0</span>].split(<span class="hljs-string">''</span>), arr1[<span class="hljs-number">1</span>].toFixed(<span class="hljs-number">1</span>))<br></code></pre></div></td></tr></tbody></table></figure><h2 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h2><p>在定义接口时, 为接口中的属性或方法定义泛型类型; 在使用接口时, 再指定具体的泛型类型。</p><figure class="highlight ts"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> baseCRUD&lt;T&gt; {<br>  data: T[]<br>  add: <span class="hljs-function">(<span class="hljs-params">t: T</span>) =&gt;</span> <span class="hljs-built_in">void</span><br>  getById: <span class="hljs-function">(<span class="hljs-params">id: <span class="hljs-built_in">number</span></span>) =&gt;</span> T<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>{<br>  id?: <span class="hljs-built_in">number</span><br>  name: <span class="hljs-built_in">string</span><br>  age: <span class="hljs-built_in">number</span><br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name, age</span>)</span> {<br>    <span class="hljs-built_in">this</span>.name = name<br>    <span class="hljs-built_in">this</span>.age = age<br>  }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserCRUD</span> <span class="hljs-title">implements</span> <span class="hljs-title">baseCRUD</span>&lt;<span class="hljs-title">User</span>&gt; </span>{<br>  data: User[] = []<br><br>  add(user: User): <span class="hljs-built_in">void</span> {<br>    user = { ...user, <span class="hljs-attr">id</span>: <span class="hljs-built_in">Date</span>.now() }<br>    <span class="hljs-built_in">this</span>.data.push(user)<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'保存user'</span>, user.id)<br>  }<br><br>  getById(id: <span class="hljs-built_in">number</span>): User {<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.data.find(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.id === id)<br>  }<br>}<br><br><br><span class="hljs-keyword">const</span> userCRUD = <span class="hljs-keyword">new</span> UserCRUD()<br>userCRUD.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">'tom'</span>, <span class="hljs-number">12</span>))<br>userCRUD.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">'tom2'</span>, <span class="hljs-number">13</span>))<br><span class="hljs-built_in">console</span>.log(userCRUD.data)<br></code></pre></div></td></tr></tbody></table></figure><h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2><p>在定义类时, 为类中的属性或方法定义泛型类型; 在创建类的实例时, 再指定特定的泛型类型</p><figure class="highlight ts"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GenericNumber</span>&lt;<span class="hljs-title">T</span>&gt; </span>{<br>  zeroValue: T<br>  add: <span class="hljs-function">(<span class="hljs-params">x: T, y: T</span>) =&gt;</span> T<br>}<br><br><span class="hljs-keyword">let</span> myGenericNumber = <span class="hljs-keyword">new</span> GenericNumber&lt;<span class="hljs-built_in">number</span>&gt;()<br>myGenericNumber.zeroValue = <span class="hljs-number">0</span><br>myGenericNumber.add = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">x, y</span>) </span>{<br>  <span class="hljs-keyword">return</span> x + y<br>}<br><br><span class="hljs-keyword">let</span> myGenericString = <span class="hljs-keyword">new</span> GenericNumber&lt;<span class="hljs-built_in">string</span>&gt;()<br>myGenericString.zeroValue = <span class="hljs-string">'abc'</span><br>myGenericString.add = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">x, y</span>) </span>{<br>  <span class="hljs-keyword">return</span> x + y<br>}<br><br><span class="hljs-built_in">console</span>.log(myGenericString.add(myGenericString.zeroValue, <span class="hljs-string">'test'</span>))<br><span class="hljs-built_in">console</span>.log(myGenericNumber.add(myGenericNumber.zeroValue, <span class="hljs-number">12</span>))<br></code></pre></div></td></tr></tbody></table></figure><h2 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h2><figure class="highlight ts"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-comment">// 如果直接对一个泛型参数取 length 属性会报错, 因为这个泛型根本就不知道它有这个属性</span><br><span class="hljs-keyword">interface</span> ILength {<br>  length: <span class="hljs-built_in">number</span><br>}<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getLength</span>&lt;<span class="hljs-title">T</span> <span class="hljs-title">extends</span> <span class="hljs-title">ILength</span>&gt;(<span class="hljs-params">x: T</span>): <span class="hljs-title">number</span> </span>{<br>  <span class="hljs-keyword">return</span> x.length<br>}<br><span class="hljs-built_in">console</span>.log(getLength&lt;<span class="hljs-built_in">string</span>&gt;(<span class="hljs-string">'Hello World'</span>))<br><span class="hljs-comment">// console.log(getLength&lt;number&gt;(123)) // error</span><br></code></pre></div></td></tr></tbody></table></figure><h1 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h1><p>JavaScript 中有很多内置对象，它们可以直接在 TypeScript 中当做定义好了的类型。<br>内置对象是指根据标准在全局作用域（Global）上存在的对象。这里的标准是指 ECMAScript 和其他环境（比如 DOM）的标准。</p><ul><li>ECMAScript 的内置对象<br><code>Boolean  Number  String  Date  RegExp  Error</code><figure class="highlight ts"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> b: <span class="hljs-built_in">Boolean</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Boolean</span>(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">let</span> n: <span class="hljs-built_in">Number</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Number</span>(<span class="hljs-literal">true</span>)<br><span class="hljs-keyword">let</span> s: <span class="hljs-built_in">String</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(<span class="hljs-string">'abc'</span>)<br><span class="hljs-keyword">let</span> d: <span class="hljs-built_in">Date</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()<br><span class="hljs-keyword">let</span> r: <span class="hljs-built_in">RegExp</span> = <span class="hljs-regexp">/^1/</span><br><span class="hljs-keyword">let</span> e: <span class="hljs-built_in">Error</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">'error message'</span>)<br><span class="hljs-comment">// let bb: boolean = new Boolean(2)  // error</span><br></code></pre></div></td></tr></tbody></table></figure></li><li>BOM 和 DOM 的内置对象<br><code>Window  Document  HTMLElement  DocumentFragment  Event  NodeList</code><figure class="highlight ts"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> div: HTMLElement = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'test'</span>)<br><span class="hljs-keyword">const</span> divs: NodeList = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">'div'</span>)<br><span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function">(<span class="hljs-params">event: MouseEvent</span>) =&gt;</span> {<br>  <span class="hljs-built_in">console</span>.dir(event.target)<br>})<br><span class="hljs-keyword">const</span> fragment: DocumentFragment = <span class="hljs-built_in">document</span>.createDocumentFragment()<br></code></pre></div></td></tr></tbody></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>web前端学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>front-end</tag>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web前端学习笔记15——Vue源码分析</title>
    <link href="/posts/c12f9186.html"/>
    <url>/posts/c12f9186.html</url>
    
    <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ol><li>分析 vue 作为一个 MVVM 框架的基本实现原理<br>数据代理，模板解析，数据绑定</li><li>不直接看 vue.js 的源码</li><li>剖析 github 上某个仿 vue 实现的 <a href="https://github.com/DMQ/mvvm">mvvm 库</a></li></ol><h1 id="准备知识"><a href="#准备知识" class="headerlink" title="准备知识"></a>准备知识</h1><ol><li><code>[].slice.call(lis)</code>: 将伪数组转换为真数组(本质是一个对象)</li><li><code>node.nodeType</code>: 得到节点类型<figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"test"</span>&gt;</span>Test<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"fragment_test"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>test1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>test2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>test3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-comment">// 1.[].slice.call(lis): 将伪数组转换为真数组</span></span><br><span class="javascript">    <span class="hljs-keyword">const</span> lis = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">'li'</span>) <span class="hljs-comment">// lis是伪数组</span></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(lis <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Array</span>, lis[<span class="hljs-number">1</span>].innerHTML, lis.forEach);</span><br><span class="javascript">    <span class="hljs-comment">// false "test2" undefined</span></span><br><span class="javascript">    <span class="hljs-keyword">const</span> lis2 = <span class="hljs-built_in">Array</span>.prototype.slice.call(lis)</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(lis2 <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Array</span>, lis2[<span class="hljs-number">1</span>].innerHTML, lis2.forEach);</span><br><span class="javascript">    <span class="hljs-comment">// true "test2" ƒ forEach() { [native code] }</span></span><br><br><span class="javascript">    <span class="hljs-comment">// 2. node.nodeType: 得到节点类型</span></span><br><span class="javascript">    <span class="hljs-keyword">const</span> elementNode = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'test'</span>)</span><br><span class="javascript">    <span class="hljs-keyword">const</span> attrNode = elementNode.getAttributeNode(<span class="hljs-string">'id'</span>)</span><br><span class="javascript">    <span class="hljs-keyword">const</span> textNode = elementNode.firstChild</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(elementNode.nodeType, attrNode.nodeType, textNode.nodeType)</span><br><span class="javascript">    <span class="hljs-comment">// 1 2 3</span></span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>  <br></code></pre></div></td></tr></tbody></table></figure></li><li><code>Object.defineProperty(obj, propertyName, {})</code>: 给对象添加属性(指定描述符)<br>可参考这里<a href="./468b9935.html#Object">Object</a><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj = {<br>  firstName: <span class="hljs-string">'A'</span>,<br>  lastName: <span class="hljs-string">'B'</span><br>}<br><span class="hljs-comment">// 给obj添加fullName属性</span><br><span class="hljs-comment">// obj.fullName = 'A-B'，赋值变化后不能改变</span><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">属性描述符：</span><br><span class="hljs-comment">1. 数据描述符</span><br><span class="hljs-comment">    configurable: 是否可以重新定义</span><br><span class="hljs-comment">    enumerable: 是否可以枚举</span><br><span class="hljs-comment">    value: 初始值</span><br><span class="hljs-comment">    writable: 是否可以修改属性值</span><br><span class="hljs-comment">2. 访问描述符</span><br><span class="hljs-comment">    get: 回调函数，根据其它相关的属性动态计算得到当前属性值</span><br><span class="hljs-comment">    set: 回调函数，监视当前属性值的变化，更新其它相关的属性值</span><br><span class="hljs-comment">*/</span><br><span class="hljs-built_in">Object</span>.defineProperty(obj, <span class="hljs-string">'fullName'</span>, {<br>  <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span> {<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.firstName + <span class="hljs-string">'-'</span> + <span class="hljs-built_in">this</span>.lastName<br>  },<br>  <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">value</span>)</span> {<br>    <span class="hljs-keyword">const</span> names = value.split(<span class="hljs-string">'-'</span>)<br>    <span class="hljs-built_in">this</span>.firstName = names[<span class="hljs-number">0</span>]<br>    <span class="hljs-built_in">this</span>.lastName = names[<span class="hljs-number">1</span>]<br>  }<br>})<br><span class="hljs-built_in">console</span>.log(obj.fullName); <span class="hljs-comment">// A-B</span><br>obj.firstName = <span class="hljs-string">'C'</span><br>obj.lastName = <span class="hljs-string">'D'</span><br><span class="hljs-built_in">console</span>.log(obj.fullName); <span class="hljs-comment">// C-D</span><br>obj.fullName = <span class="hljs-string">'E-F'</span><br><span class="hljs-built_in">console</span>.log(obj.firstName, obj.lastName); <span class="hljs-comment">// E F</span><br><br><br><span class="hljs-built_in">Object</span>.defineProperty(obj, <span class="hljs-string">'fullName2'</span>, {<br>  configurable: <span class="hljs-literal">false</span>,<br>  enumerable: <span class="hljs-literal">true</span>,<br>  value: <span class="hljs-string">'G-H'</span>,<br>  writable: <span class="hljs-literal">false</span><br>})<br><span class="hljs-built_in">console</span>.log(obj.fullName2); <span class="hljs-comment">// G-H</span><br>obj.fullName2 = <span class="hljs-string">'J-k'</span><br><span class="hljs-built_in">console</span>.log(obj.fullName2); <span class="hljs-comment">// G-H</span><br><span class="hljs-comment">/* Object.defineProperty(obj, 'fullName2', { // 不能重新定义</span><br><span class="hljs-comment">  configurable: false,</span><br><span class="hljs-comment">  enumerable: false,</span><br><span class="hljs-comment">  value: 'G-H',</span><br><span class="hljs-comment">  writable: true</span><br><span class="hljs-comment">}) */</span><br></code></pre></div></td></tr></tbody></table></figure></li><li><code>Object.keys(obj)</code>: 得到对象自身可枚举属性组成的数组<figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> names = <span class="hljs-built_in">Object</span>.keys(obj)<br><span class="hljs-built_in">console</span>.log(names); <span class="hljs-comment">// ["firstName", "lastName", "fullName2"]</span><br><span class="hljs-comment">// 结果里没有fullName</span><br><span class="hljs-comment">// enumerable默认为false，不能枚举</span><br></code></pre></div></td></tr></tbody></table></figure></li><li><code>obj.hasOwnProperty(prop)</code>: 判断prop是否是obj自身的属性<figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(obj.hasOwnProperty(<span class="hljs-string">'fullName'</span>), obj.hasOwnProperty(<span class="hljs-string">'.toString'</span>));<br><span class="hljs-comment">// true false</span><br></code></pre></div></td></tr></tbody></table></figure></li><li><code>DocumentFragment</code>: 文档碎片(高效批量更新多个节点)<figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// document: 对应显示的页面，包含n个element。一旦更新document内部的某个元素，界面更新。</span><br><span class="hljs-comment">// documentFragment: 内存中保存n个element的容器对象(不与界面关联)，如果更新fragment中的某个element，界面不变</span><br><span class="hljs-comment">/* &lt;ul id="fragment_test"&gt;</span><br><span class="hljs-comment">      &lt;li&gt;test1&lt;/li&gt;</span><br><span class="hljs-comment">      &lt;li&gt;test2&lt;/li&gt;</span><br><span class="hljs-comment">      &lt;li&gt;test3&lt;/li&gt;</span><br><span class="hljs-comment">    &lt;/ul&gt; */</span><br><br><span class="hljs-keyword">const</span> ul = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'fragment_test'</span>)<br><span class="hljs-comment">// 1. 创建fragment</span><br><span class="hljs-keyword">const</span> fragment = <span class="hljs-built_in">document</span>.createDocumentFragment()<br><br><span class="hljs-comment">// 2. 取出ul中所有子节点保存到fragment</span><br><span class="hljs-keyword">let</span> child<br><span class="hljs-keyword">while</span> (child = ul.firstChild) { <span class="hljs-comment">// 一个节点只能有一个父亲</span><br>  fragment.appendChild(child) <span class="hljs-comment">// 先将child从ul中移除，添加为fragment子节点</span><br>}<br><br><span class="hljs-comment">// 3. 更新fragment中所有li的文本</span><br><span class="hljs-built_in">Array</span>.prototype.slice.call(fragment.childNodes).forEach(<span class="hljs-function"><span class="hljs-params">node</span> =&gt;</span> {<br>  <span class="hljs-keyword">if</span> (node.nodeType == <span class="hljs-number">1</span>) { <span class="hljs-comment">// 元素节点&lt;li&gt;</span><br>    node.textContent = <span class="hljs-string">'modify'</span><br>  }<br>})<br><br><span class="hljs-comment">// 4. 将fragment插入ul</span><br>ul.appendChild(fragment)<br></code></pre></div></td></tr></tbody></table></figure></li></ol><h1 id="1-数据代理"><a href="#1-数据代理" class="headerlink" title="1. 数据代理"></a>1. 数据代理</h1><ol><li>vue数据代理: data对象的所有属性的操作(读/写)由vm对象来代理操作</li><li>好处: 通过vm对象就可以方便的操作data中的数据</li><li>实现:<ol><li>通过Object.defineProperty(vm, key, {})给vm添加与data对象的属性对应的属性</li><li>所有添加的属性都包含get/set方法</li><li>在get/set方法中去操作data中对应的属性</li></ol></li></ol><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"test"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"js/mvvm/compile.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"js/mvvm/mvvm.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"js/mvvm/observer.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"js/mvvm/watcher.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> MVVM({</span><br><span class="javascript">      el: <span class="hljs-string">"#test"</span>,</span><br>      data: {<br><span class="javascript">        name: <span class="hljs-string">'Amy'</span></span><br>      }<br>    })<br><span class="javascript">    <span class="hljs-built_in">console</span>.log(vm.name, vm)  <span class="hljs-comment">// 读取的是data中的name, vm代理对data的读操作</span></span><br><span class="javascript">    vm.name = <span class="hljs-string">'Bob'</span> <span class="hljs-comment">// 数据保存到data中的name上, vm代理对data的写操作</span></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(vm.name, vm._data.name)</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// mnnm.js</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">相关于Vue的构造函数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">MVVM</span>(<span class="hljs-params">options</span>) </span>{<br>  <span class="hljs-comment">// 将选项对象保存到vm</span><br>  <span class="hljs-built_in">this</span>.$options = options;<br>  <span class="hljs-comment">// 将data对象保存到vm和data变量中</span><br>  <span class="hljs-keyword">var</span> data = <span class="hljs-built_in">this</span>._data = <span class="hljs-built_in">this</span>.$options.data;<br>  <span class="hljs-comment">//将vm保存在me变量中</span><br>  <span class="hljs-keyword">var</span> me = <span class="hljs-built_in">this</span>;<br><br>  <span class="hljs-comment">// 遍历data中所有属性</span><br>  <span class="hljs-built_in">Object</span>.keys(data).forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">key</span>) </span>{ <span class="hljs-comment">// key是data的某个属性名(name)</span><br>    <span class="hljs-comment">// 对指定属性实现代理</span><br>    me._proxy(key);<br>  });<br>}<br><br>MVVM.prototype = {<br>  <span class="hljs-comment">// 对指定属性实现代理</span><br>  _proxy: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">key</span>) </span>{<br>    <span class="hljs-comment">// 保存vm</span><br>    <span class="hljs-keyword">var</span> me = <span class="hljs-built_in">this</span>;<br>    <span class="hljs-comment">// 给vm添加指定属性名的属性(使用属性描述)</span><br>    <span class="hljs-built_in">Object</span>.defineProperty(me, key, {<br>      configurable: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 不能再重新定义</span><br>      enumerable: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 可以枚举遍历</span><br><br>      <span class="hljs-comment">// 当通过vm.name读取属性值时自动调用</span><br>      <span class="hljs-comment">// 读取data中对应属性值返回(实现代理读操作)</span><br>      get: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">proxyGetter</span>(<span class="hljs-params"></span>) </span>{<br>        <span class="hljs-keyword">return</span> me._data[key];<br>      },<br>      <span class="hljs-comment">// 当通过vm.name = 'xxx'时自动调用</span><br>      <span class="hljs-comment">// 将最新的值保存到data中对应的属性上(实现代理写操作)</span><br>      set: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">proxySetter</span>(<span class="hljs-params">newVal</span>) </span>{<br>        me._data[key] = newVal;<br>      }<br>    });<br>  }<br>};<br></code></pre></div></td></tr></tbody></table></figure><h1 id="2-模板解析"><a href="#2-模板解析" class="headerlink" title="2. 模板解析"></a>2. 模板解析</h1><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>模板解析<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css">    <span class="hljs-selector-class">.aa</span> {</span><br>      color: red<br>    }<br><span class="css">    <span class="hljs-selector-class">.bb</span>{</span><br>      font-size: 30px<br>    }<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"test"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{{name}}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">"show"</span>&gt;</span>测试<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">"msg"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">"msg"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"bb"</span> <span class="hljs-attr">v-class</span>=<span class="hljs-string">"myClass"</span>&gt;</span>Hello<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"js/mvvm/compile.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"js/mvvm/mvvm.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"js/mvvm/observer.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"js/mvvm/watcher.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">new</span> MVVM({</span><br><span class="javascript">      el: <span class="hljs-string">'#test'</span>,</span><br>      data: {<br><span class="javascript">        name: <span class="hljs-string">'Amy'</span>,</span><br><span class="handlebars"><span class="xml">        msg: '<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://cn.vuejs.org/"</span> &gt;</span> VUE <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> ',</span></span><br><span class="javascript">        myClass: <span class="hljs-string">'aa'</span></span><br>      },<br>      methods: {<br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">show</span>(<span class="hljs-params"></span>)</span> {</span><br><span class="javascript">          alert(<span class="hljs-built_in">this</span>.msg)</span><br>        }<br>      }<br>    })<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><hr><ol><li>将 el 的所有子节点取出, 添加到一个新建的文档 fragment 对象中</li><li>对 fragment 中的所有层次子节点递归进行编译解析处理<ul><li>对大括号表达式文本节点进行解析</li><li>对元素节点的指令属性进行解析</li><li>事件指令解析</li><li>一般指令解析</li></ul></li><li>将解析后的 fragment 添加到 el 中显示<hr></li></ol><ul><li>大括号表达式解析<ol><li>根据正则对象得到匹配出的表达式字符串: 子匹配/RegExp.$1(name)</li><li>从 data 中取出表达式对应的属性值</li><li>将属性值设置为文本节点的 textContent</li></ol></li><li>事件指令解析<ol><li>从指令名中取出事件名</li><li>根据指令的值(表达式)从 methods 中得到对应的事件处理函数对象</li><li>给当前元素节点绑定指定事件名和回调函数的 dom 事件监听</li><li>指令解析完后, 移除此指令属性</li></ol></li><li>一般指令解析<ol><li>得到指令名和指令值(表达式)<ul><li>text/html/class</li><li>msg/myClass</li></ul></li><li>从 data 中根据表达式得到对应的值</li><li>根据指令名确定需要操作元素节点的什么属性<ul><li>v-text—textContent 属性</li><li>v-html—innerHTML 属性</li><li>v-class–className 属性</li></ul></li><li>将得到的表达式的值设置到对应的属性上</li><li>移除元素的指令属性</li></ol></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// mvvm.js</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">MVVM</span>(<span class="hljs-params">options</span>) </span>{<br>  ...<br>  <span class="hljs-comment">// 创建一个用来编译模板的compile对象</span><br>  <span class="hljs-built_in">this</span>.$compile = <span class="hljs-keyword">new</span> Compile(options.el || <span class="hljs-built_in">document</span>.body, <span class="hljs-built_in">this</span>)<br>}<br><span class="hljs-comment">// compile.js</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Compile</span>(<span class="hljs-params">el, vm</span>) </span>{<br>  <span class="hljs-comment">// 保存vm到compile对象</span><br>  <span class="hljs-built_in">this</span>.$vm = vm;<br>  <span class="hljs-comment">// 将el对应的元素对象保存到compile对象中</span><br>  <span class="hljs-built_in">this</span>.$el = <span class="hljs-built_in">this</span>.isElementNode(el) ? el : <span class="hljs-built_in">document</span>.querySelector(el);<br><br>  <span class="hljs-comment">// 如果el元素存在</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.$el) {<br>    <span class="hljs-comment">// 1. 取出el中所有子节点, 封装在一个fragment对象中</span><br>    <span class="hljs-built_in">this</span>.$fragment = <span class="hljs-built_in">this</span>.node2Fragment(<span class="hljs-built_in">this</span>.$el);<br>    <span class="hljs-comment">// 2. 编译fragment中所有层次子节点</span><br>    <span class="hljs-built_in">this</span>.init();<br>    <span class="hljs-comment">// 3. 将编译好的fragment添加到el中</span><br>    <span class="hljs-built_in">this</span>.$el.appendChild(<span class="hljs-built_in">this</span>.$fragment);<br>  }<br>}<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// compile.js</span><br>Compile.prototype = {<br>  node2Fragment: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">el</span>) </span>{<br>    <span class="hljs-keyword">var</span> fragment = <span class="hljs-built_in">document</span>.createDocumentFragment(),<br>      child;<br>    <span class="hljs-comment">// 将el中所有子节点转移到fragment</span><br>    <span class="hljs-keyword">while</span> (child = el.firstChild) {<br>      fragment.appendChild(child);<br>    }<br>    <span class="hljs-keyword">return</span> fragment;<br>  },<br><br>  init: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-comment">// 编译指定元素(所有层次的子节点)</span><br>    <span class="hljs-built_in">this</span>.compileElement(<span class="hljs-built_in">this</span>.$fragment);<br>  },<br><br>  compileElement: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">el</span>) </span>{<br>    <span class="hljs-comment">// 取出最外层的所有子节点</span><br>    <span class="hljs-keyword">var</span> childNodes = el.childNodes,<br>      <span class="hljs-comment">// 保存compile对象</span><br>      me = <span class="hljs-built_in">this</span>;<br><br>    <span class="hljs-comment">// 遍历所有子节点(text/element)</span><br>    [].slice.call(childNodes).forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">node</span>) </span>{<br>      <span class="hljs-comment">// 得到节点的文本内容</span><br>      <span class="hljs-keyword">var</span> text = node.textContent;<br>      <span class="hljs-comment">// 创建正则对象(匹配大括号表达式)</span><br>      <span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/\{\{(.*)\}\}/</span>;  <span class="hljs-comment">// {{name}}</span><br><br>      <span class="hljs-comment">// 如果是元素节点</span><br>      <span class="hljs-keyword">if</span> (me.isElementNode(node)) {<br>        <span class="hljs-comment">// 编译它(解析指令)</span><br>        me.compile(node);<br>        <span class="hljs-comment">// 如果是一个大括号表达式格式的文本节点</span><br>      } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (me.isTextNode(node) &amp;&amp; reg.test(text)) {<br>        <span class="hljs-comment">// 编译大括号表达式格式的文本节点</span><br>        me.compileText(node, <span class="hljs-built_in">RegExp</span>.$1);<br>      }<br><br>      <span class="hljs-comment">// 如果子节点还有子节点，递归调用实现所有层次节点的编译</span><br>      <span class="hljs-keyword">if</span> (node.childNodes &amp;&amp; node.childNodes.length) {<br>        me.compileElement(node);<br>      }<br>    });<br>  },<br><br>  compile: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">node</span>) </span>{<br>    <span class="hljs-comment">// 得到标签的所有属性</span><br>    <span class="hljs-keyword">var</span> nodeAttrs = node.attributes,<br>      me = <span class="hljs-built_in">this</span>;<br>    <span class="hljs-comment">// 遍历所有属性</span><br>    [].slice.call(nodeAttrs).forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">attr</span>) </span>{<br>      <span class="hljs-comment">// 得到属性名(v-on:click)</span><br>      <span class="hljs-keyword">var</span> attrName = attr.name;<br>      <span class="hljs-comment">// 判断是否是指令属性</span><br>      <span class="hljs-keyword">if</span> (me.isDirective(attrName)) {<br>        <span class="hljs-comment">// 得到表达式(属性值)(show)</span><br>        <span class="hljs-keyword">var</span> exp = attr.value;<br>        <span class="hljs-comment">// 得到指令名(on:click)</span><br>        <span class="hljs-keyword">var</span> dir = attrName.substring(<span class="hljs-number">2</span>);<br>        <span class="hljs-comment">// 是否是事件指令</span><br>        <span class="hljs-keyword">if</span> (me.isEventDirective(dir)) {<br>          <span class="hljs-comment">// 解析事件指令</span><br>          compileUtil.eventHandler(node, me.$vm, exp, dir);<br>          <span class="hljs-comment">// 普通指令</span><br>        } <span class="hljs-keyword">else</span> {<br>           <span class="hljs-comment">// 编译普通指令</span><br>          compileUtil[dir] &amp;&amp; compileUtil[dir](node, me.$vm, exp);<br>        }<br>        <span class="hljs-comment">// 移除指令属性</span><br>        node.removeAttribute(attrName);<br>      }<br>    });<br>  },<br><br>  compileText: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">node, exp</span>) </span>{<br>    <span class="hljs-comment">// 调用编译工具对象解析</span><br>    compileUtil.text(node, <span class="hljs-built_in">this</span>.$vm, exp);<br>  },<br><br>  isDirective: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">attr</span>) </span>{<br>    <span class="hljs-keyword">return</span> attr.indexOf(<span class="hljs-string">'v-'</span>) == <span class="hljs-number">0</span>;<br>  },<br><br>  isEventDirective: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">dir</span>) </span>{<br>    <span class="hljs-keyword">return</span> dir.indexOf(<span class="hljs-string">'on'</span>) === <span class="hljs-number">0</span>;<br>  },<br><br>  isElementNode: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">node</span>) </span>{<br>    <span class="hljs-keyword">return</span> node.nodeType == <span class="hljs-number">1</span>;<br>  },<br><br>  isTextNode: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">node</span>) </span>{<br>    <span class="hljs-keyword">return</span> node.nodeType == <span class="hljs-number">3</span>;<br>  }<br>};<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// compile.js</span><br><span class="hljs-comment">// 包含多个解析指令方法的对象</span><br><span class="hljs-keyword">var</span> compileUtil = {<br>  <span class="hljs-comment">// 解析: v-text/{{}}</span><br>  text: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">node, vm, exp</span>) </span>{<br>    <span class="hljs-built_in">this</span>.bind(node, vm, exp, <span class="hljs-string">'text'</span>);<br>  },<br>  <span class="hljs-comment">// 解析: v-html</span><br>  html: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">node, vm, exp</span>) </span>{<br>    <span class="hljs-built_in">this</span>.bind(node, vm, exp, <span class="hljs-string">'html'</span>);<br>  },<br>  <span class="hljs-comment">// 解析: v-model</span><br>  model: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">node, vm, exp</span>) </span>{<br>    <span class="hljs-built_in">this</span>.bind(node, vm, exp, <span class="hljs-string">'model'</span>);<br><br>    <span class="hljs-keyword">var</span> me = <span class="hljs-built_in">this</span>,<br>      val = <span class="hljs-built_in">this</span>._getVMVal(vm, exp);<br>    node.addEventListener(<span class="hljs-string">'input'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>{<br>      <span class="hljs-keyword">var</span> newValue = e.target.value;<br>      <span class="hljs-keyword">if</span> (val === newValue) {<br>        <span class="hljs-keyword">return</span>;<br>      }<br><br>      me._setVMVal(vm, exp, newValue);<br>      val = newValue;<br>    });<br>  },<br>  <span class="hljs-comment">// 解析: v-class</span><br>  class: function (node, vm, exp) {<br>    <span class="hljs-built_in">this</span>.bind(node, vm, exp, <span class="hljs-string">'class'</span>);<br>  },<br><br>  <span class="hljs-comment">// 真正用于解析指令的方法</span><br>  bind: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">node, vm, exp, dir</span>) </span>{<br>    <span class="hljs-comment">// 根据指令名得到对应的更新节点函数</span><br>    <span class="hljs-keyword">var</span> updaterFn = updater[dir + <span class="hljs-string">'Updater'</span>];<br>    <span class="hljs-comment">// 如果存在调用来更新节点</span><br>    updaterFn &amp;&amp; updaterFn(node, <span class="hljs-built_in">this</span>._getVMVal(vm, exp));<br>  },<br><br>  <span class="hljs-comment">// 事件处理</span><br>  eventHandler: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">node, vm, exp, dir</span>) </span>{<br>    <span class="hljs-comment">// 得到事件名/类型(click)</span><br>    <span class="hljs-keyword">var</span> eventType = dir.split(<span class="hljs-string">':'</span>)[<span class="hljs-number">1</span>],<br>      <span class="hljs-comment">// 从methods中得到表达式所对应的函数(事件回调函数)(show(){})</span><br>      fn = vm.$options.methods &amp;&amp; vm.$options.methods[exp];<br>    <span class="hljs-comment">// 如果都存在</span><br>    <span class="hljs-keyword">if</span> (eventType &amp;&amp; fn) {<br>      <span class="hljs-comment">// 绑定指定事件名和回调函数的DOM事件监听, 将回调函数中的this强制绑定为vm</span><br>      node.addEventListener(eventType, fn.bind(vm), <span class="hljs-literal">false</span>);<br>    }<br>  },<br><br>  <span class="hljs-comment">// 从vm得到表达式对应的value(表达式可能有多层)</span><br>  _getVMVal: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">vm, exp</span>) </span>{<br>    <span class="hljs-keyword">var</span> val = vm._data;<br>    exp = exp.split(<span class="hljs-string">'.'</span>);<br>    exp.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">k</span>) </span>{<br>      val = val[k];<br>    });<br>    <span class="hljs-keyword">return</span> val;<br>  },<br><br>  _setVMVal: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">vm, exp, value</span>) </span>{<br>    <span class="hljs-keyword">var</span> val = vm._data;<br>    exp = exp.split(<span class="hljs-string">'.'</span>);<br>    exp.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">k, i</span>) </span>{<br>      <span class="hljs-comment">// 非最后一个key，更新val的值</span><br>      <span class="hljs-keyword">if</span> (i &lt; exp.length - <span class="hljs-number">1</span>) {<br>        val = val[k];<br>      } <span class="hljs-keyword">else</span> {<br>        val[k] = value;<br>      }<br>    });<br>  }<br>};<br><br><span class="hljs-comment">// 包含多个用于更新节点方法的对象</span><br><span class="hljs-keyword">var</span> updater = {<br>  <span class="hljs-comment">// 更新节点的textContent</span><br>  textUpdater: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">node, value</span>) </span>{<br>    node.textContent = <span class="hljs-keyword">typeof</span> value == <span class="hljs-string">'undefined'</span> ? <span class="hljs-string">''</span> : value;<br>  },<br><br>  <span class="hljs-comment">// 更新节点的innerHTML</span><br>  htmlUpdater: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">node, value</span>) </span>{<br>    node.innerHTML = <span class="hljs-keyword">typeof</span> value == <span class="hljs-string">'undefined'</span> ? <span class="hljs-string">''</span> : value;<br>  },<br><br>  <span class="hljs-comment">// 更新节点的className</span><br>  classUpdater: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">node, value, oldValue</span>) </span>{<br>    <span class="hljs-comment">// 静态class属性的值</span><br>    <span class="hljs-keyword">var</span> className = node.className;<br>    <span class="hljs-comment">// 将静态class属性的值与动态class值进行合并后设置为新的className属性值</span><br>    node.className = className + (className ? <span class="hljs-string">' '</span> : <span class="hljs-string">''</span>) + value;<br>  },<br><br>  <span class="hljs-comment">// 更新节点的value</span><br>  modelUpdater: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">node, value, oldValue</span>) </span>{<br>    node.value = <span class="hljs-keyword">typeof</span> value == <span class="hljs-string">'undefined'</span> ? <span class="hljs-string">''</span> : value;<br>  }<br>};<br></code></pre></div></td></tr></tbody></table></figure><h1 id="3-数据绑定"><a href="#3-数据绑定" class="headerlink" title="3. 数据绑定"></a>3. 数据绑定</h1><ul><li>数据绑定<br>一旦更新了data中的某个属性数据，所有界面上直接使用或间接使用了此属性的节点都会更新。</li><li>数据劫持<ol><li>数据劫持是 vue 中用来实现数据绑定的一种技术</li><li>基本思想: 通过 defineProperty()来监视 data 中所有属性(任意层次)数据的变化, 一旦变化就去更新界面</li></ol></li><li>四个重要对象<ol><li>Observer<ul><li>用来对 data 所有属性数据进行劫持的构造函数</li><li>给 data 中所有属性重新定义属性描述(get/set)</li><li>为 data 中的每个属性创建对应的 dep 对象</li></ul></li><li>Dep(Depend)<ul><li>data 中的每个属性(所有层次)都对应一个 dep 对象</li><li>创建的时机:<ul><li>在初始化 define data 中各个属性时创建对应的 dep 对象</li><li>在 data 中的某个属性值被设置为新的对象时</li></ul></li><li>对象的结构<figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">{<br>  id, <span class="hljs-comment">// 每个 dep 都有一个唯一的 id</span><br>  subs <span class="hljs-comment">// 包含 n 个对应 watcher 的数组(subscribes 的简写)</span><br>}<br></code></pre></div></td></tr></tbody></table></figure></li><li>subs 属性说明<ul><li>当 watcher 被创建时, 内部将当前 watcher 对象添加到对应的 dep 对象的 subs 中</li><li>当此 data 属性的值发生改变时, subs 中所有的 watcher 都会收到更新的通知, 从而最终更新对应的界面</li></ul></li></ul></li><li>Compiler<ul><li>用来解析模板页面的对象的构造函数(一个实例)</li><li>利用 compile 对象解析模板页面</li><li>每解析一个表达式(非事件指令)都会创建一个对应的 watcher 对象, 并建立  watcher 与 dep 的关系</li><li>complie 与 watcher 关系: 一对多的关系</li></ul></li><li>Watcher<ul><li>模板中每个非事件指令或表达式都对应一个 watcher 对象</li><li>监视当前表达式数据的变化</li><li>创建的时机: 在初始化编译模板时</li><li>对象的组成<figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">{<br>  vm, <span class="hljs-comment">// vm 对象</span><br>  exp, <span class="hljs-comment">// 对应指令的表达式</span><br>  cb, <span class="hljs-comment">// 当表达式所对应的数据发生改变的回调函数</span><br>  value, <span class="hljs-comment">// 表达式当前的值</span><br>  depIds <span class="hljs-comment">// 表达式中各级属性所对应的 dep 对象的集合对象</span><br>        <span class="hljs-comment">// 属性名为 dep 的 id, 属性值为 dep</span><br>}<br></code></pre></div></td></tr></tbody></table></figure></li></ul></li></ol></li><li>总结: dep 与 watcher 的关系: 多对多<ul><li>data 中的一个属性对应一个 dep, 一个 dep 中可能包含多个 watcher(模板中有几个表达式使用到了同一个属性)</li><li>模板中一个非事件表达式对应一个 watcher, 一个 watcher 中可能包含多个 dep(表达式是多层: a.b)</li><li>数据绑定使用到 2 个核心技术<ul><li>defineProperty()</li><li>消息订阅与发布</li></ul></li></ul></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// mvvm.js</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">MVVM</span>(<span class="hljs-params">options</span>) </span>{<br>  <span class="hljs-comment">// 对data中所有层析的属性通过数据劫持实现数据绑定</span><br>  observe(data, <span class="hljs-built_in">this</span>);<br>}<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// compile.js</span><br>bind: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">node, vm, exp, dir</span>)</span>{<br>  ...<br>  <span class="hljs-comment">// 为表达式创建一个对应的watcher，实现节点的更新显示</span><br>  <span class="hljs-keyword">new</span> Watcher(vm, exp, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value, oldValue</span>) </span>{ <br>    <span class="hljs-comment">// 当表达式对应的一个属性值变化时回调</span><br>    <span class="hljs-comment">// 更新界面中的指定节点</span><br>    updaterFn &amp;&amp; updaterFn(node, value, oldValue);<br>  });<br>}<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// watcher.js</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Watcher</span>(<span class="hljs-params">vm, exp, cb</span>) </span>{<br>  <span class="hljs-built_in">this</span>.cb = cb;  <span class="hljs-comment">// 更新界面回调</span><br>  <span class="hljs-built_in">this</span>.vm = vm;<br>  <span class="hljs-built_in">this</span>.exp = exp; <span class="hljs-comment">// 表达式</span><br>  <span class="hljs-built_in">this</span>.depIds = {};  <span class="hljs-comment">// 包含所有相关dep的容器对象</span><br>  <span class="hljs-built_in">this</span>.value = <span class="hljs-built_in">this</span>.get(); <span class="hljs-comment">// 得到表达式初始值保存</span><br>}<br><br>Watcher.prototype = {<br>  update: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-built_in">this</span>.run();<br>  },<br>  run: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-keyword">var</span> value = <span class="hljs-built_in">this</span>.get();<br>    <span class="hljs-keyword">var</span> oldVal = <span class="hljs-built_in">this</span>.value;<br>    <span class="hljs-keyword">if</span> (value !== oldVal) {<br>      <span class="hljs-built_in">this</span>.value = value;<br>      <span class="hljs-comment">// 调用回调函数更新界面</span><br>      <span class="hljs-built_in">this</span>.cb.call(<span class="hljs-built_in">this</span>.vm, value, oldVal);<br>    }<br>  },<br>  addDep: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">dep</span>) </span>{<br>    <span class="hljs-comment">// 判断dep与watcher关系是否已经建立</span><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.depIds.hasOwnProperty(dep.id)) {<br>      <span class="hljs-comment">// 将watcher添加到dep，用于更新</span><br>      dep.addSub(<span class="hljs-built_in">this</span>);<br>      <span class="hljs-comment">// 将dep添加到watcher，用于防止重复建立关系</span><br>      <span class="hljs-built_in">this</span>.depIds[dep.id] = dep;<br>    }<br>  },<br>  <span class="hljs-comment">// 得到表达式对应的值，建立dep与watcher的关系</span><br>  get: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-comment">// 给dep指定当前的watch</span><br>    Dep.target = <span class="hljs-built_in">this</span>;<br>    <span class="hljs-comment">// 获取表达式的值, 内部调用get建立dep与watcher的关系</span><br>    <span class="hljs-keyword">var</span> value = <span class="hljs-built_in">this</span>.getVMVal();<br>    <span class="hljs-comment">// 取出dep中指定的当前watcher</span><br>    Dep.target = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">return</span> value;<br>  },<br>  <span class="hljs-comment">// 得到表达式对应的值</span><br>  getVMVal: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-keyword">var</span> exp = <span class="hljs-built_in">this</span>.exp.split(<span class="hljs-string">'.'</span>);<br>    <span class="hljs-keyword">var</span> val = <span class="hljs-built_in">this</span>.vm._data;<br>    exp.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">k</span>) </span>{<br>      val = val[k];<br>    });<br>    <span class="hljs-keyword">return</span> val;<br>  }<br>};<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// observer.js</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Observer</span>(<span class="hljs-params">data</span>) </span>{<br>  <span class="hljs-comment">// 保存data对象</span><br>  <span class="hljs-built_in">this</span>.data = data;<br>  <span class="hljs-comment">// 走起</span><br>  <span class="hljs-built_in">this</span>.walk(data);<br>}<br><br>Observer.prototype = {<br>  walk: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>{<br>    <span class="hljs-comment">// 保存observer对象</span><br>    <span class="hljs-keyword">var</span> me = <span class="hljs-built_in">this</span>;<br>    <span class="hljs-comment">// 遍历data中所有属性</span><br>    <span class="hljs-built_in">Object</span>.keys(data).forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">key</span>) </span>{<br>      <span class="hljs-comment">// 对指定的属性实现响应式的数据绑定</span><br>      me.defineReactive(me.data, key, data[key]);<br>    });<br>  },<br><br>  defineReactive: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data, key, val</span>) </span>{<br>    <span class="hljs-comment">// 创建属性对应的dep对象 dependency</span><br>    <span class="hljs-keyword">var</span> dep = <span class="hljs-keyword">new</span> Dep();<br>    <span class="hljs-comment">// 间接递归调用实现对data中所有层次属性的劫持</span><br>    <span class="hljs-keyword">var</span> childObj = observe(val);<br>    <span class="hljs-comment">// 给data重新定义属性(添加set/get)</span><br>    <span class="hljs-built_in">Object</span>.defineProperty(data, key, {<br>      enumerable: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 可枚举</span><br>      configurable: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 不能再define</span><br>      get: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>        <span class="hljs-comment">// 建立dep与watcher的关系</span><br>        <span class="hljs-keyword">if</span> (Dep.target) {<br>          dep.depend();<br>        }<br>        <span class="hljs-comment">// 返回属性值</span><br>        <span class="hljs-keyword">return</span> val;<br>      },<br>      set: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">newVal</span>) </span>{ <span class="hljs-comment">// 监视key属性的变化，更新界面</span><br>        <span class="hljs-keyword">if</span> (newVal === val) {<br>          <span class="hljs-keyword">return</span>;<br>        }<br>        val = newVal;<br>        <span class="hljs-comment">// 新的值是object的话，进行监听</span><br>        childObj = observe(newVal);<br>        <span class="hljs-comment">// 通知所有相关的订阅者</span><br>        dep.notify();<br>      }<br>    });<br>  }<br>};<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">observe</span>(<span class="hljs-params">value, vm</span>) </span>{<br>  <span class="hljs-comment">// value必须是对象, 因为监视的是对象内部的属性</span><br>  <span class="hljs-keyword">if</span> (!value || <span class="hljs-keyword">typeof</span> value !== <span class="hljs-string">'object'</span>) {<br>    <span class="hljs-keyword">return</span>;<br>  }<br>  <span class="hljs-comment">// 创建一个对应的观察都对象</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Observer(value);<br>};<br><br><span class="hljs-keyword">var</span> uid = <span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Dep</span>(<span class="hljs-params"></span>) </span>{<br>  <span class="hljs-comment">// 标识属性</span><br>  <span class="hljs-built_in">this</span>.id = uid++;<br>  <span class="hljs-comment">// 相关的所有watcher的数组</span><br>  <span class="hljs-built_in">this</span>.subs = [];<br>}<br><br>Dep.prototype = {<br>  <span class="hljs-comment">// 添加watcher到dep中</span><br>  addSub: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">sub</span>) </span>{<br>    <span class="hljs-built_in">this</span>.subs.push(sub);<br>  },<br>  <span class="hljs-comment">// 去建立dep与watcher之间的关系</span><br>  depend: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>    Dep.target.addDep(<span class="hljs-built_in">this</span>);<br>  },<br>  removeSub: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">sub</span>) </span>{<br>    <span class="hljs-keyword">var</span> index = <span class="hljs-built_in">this</span>.subs.indexOf(sub);<br>    <span class="hljs-keyword">if</span> (index != -<span class="hljs-number">1</span>) {<br>      <span class="hljs-built_in">this</span>.subs.splice(index, <span class="hljs-number">1</span>);<br>    }<br>  },<br>  notify: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-comment">// 遍历所有watcher，通知watcher更新</span><br>    <span class="hljs-built_in">this</span>.subs.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">sub</span>) </span>{<br>      sub.update();<br>    });<br>  }<br>};<br><br>Dep.target = <span class="hljs-literal">null</span>;<br></code></pre></div></td></tr></tbody></table></figure><h1 id="MVVM原理"><a href="#MVVM原理" class="headerlink" title="MVVM原理"></a>MVVM原理</h1><p><img src="/image/post/MVVM%E5%8E%9F%E7%90%86%E5%9B%BE1.png" alt="MVVM 原理图"><br><img src="/image/post/MVVM%E5%8E%9F%E7%90%86%E5%9B%BE2.png" alt="MVVM 原理图"><br><a href="https://www.baidupcs.com/rest/2.0/pcs/file?method=batchdownload&amp;app_id=250528&amp;zipcontent=%7B%22fs_id%22:%5B1090386846218427%5D%7D&amp;sign=DCb740ccc5511e5e8fedcff06b081203:qiyANTDUp3R5mBKma5x7lbyKs6o=&amp;uid=4036931918&amp;time=1616336215&amp;dp-logid=8748101793799066579&amp;dp-callid=0&amp;vuk=4036931918&amp;zipname=mvvm%20%E7%AD%891%E4%B8%AA%E6%96%87%E4%BB%B6.zip">MVVM 实现 源码</a></p><h1 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h1><ul><li>双向数据绑定是建立在单向数据绑定(model =&gt; View)的基础之上的</li><li>双向数据绑定的实现流程:<ol><li>在解析 v-model 指令时, 给当前元素添加 input 监听</li><li>当 input 的 value 发生改变时, 将最新的值赋值给当前表达式所对应的 data 属性<figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// compile.js</span><br><span class="hljs-keyword">var</span> compileUtil = {<br>  <span class="hljs-comment">// 解析v-model</span><br>  model: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">node, vm, exp</span>) </span>{<br>    <span class="hljs-comment">// 实现数据的初始化显示和创建对应watcher</span><br>    <span class="hljs-built_in">this</span>.bind(node, vm, exp, <span class="hljs-string">'model'</span>);<br><br>    <span class="hljs-keyword">var</span> me = <span class="hljs-built_in">this</span>,<br>      <span class="hljs-comment">// 得到表达式的值</span><br>      val = <span class="hljs-built_in">this</span>._getVMVal(vm, exp);<br>    <span class="hljs-comment">// 给节点绑定input事件监听(输入改变时)</span><br>    node.addEventListener(<span class="hljs-string">'input'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>{<br>      <span class="hljs-comment">// 得到输入的最新值</span><br>      <span class="hljs-keyword">var</span> newValue = e.target.value;<br>      <span class="hljs-comment">// 如果没有变化，直接结束</span><br>      <span class="hljs-keyword">if</span> (val === newValue) {<br>        <span class="hljs-keyword">return</span>;<br>      }<br>      <span class="hljs-comment">// 将最新value保存给表达式所对应的属性</span><br>      me._setVMVal(vm, exp, newValue);<br>      <span class="hljs-comment">// 保存最新的值</span><br>      val = newValue;<br>    });<br>  }<br>}<br></code></pre></div></td></tr></tbody></table></figure></li></ol></li></ul><h1 id="函数实现"><a href="#函数实现" class="headerlink" title="函数实现"></a>函数实现</h1><h2 id="observe"><a href="#observe" class="headerlink" title="observe"></a>observe</h2><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//监控obj对象的变化，在变化后调用callback，暂时只考虑对象只有一层(watch)</span><br><span class="hljs-comment">//方法是通过把obj的每个属性都改成getter，setter，在setter调用时，调用callback</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">observe</span>(<span class="hljs-params">obj, callback</span>) </span>{<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> obj) {<br>    <span class="hljs-keyword">let</span> val = obj[key]<br>    <span class="hljs-built_in">Object</span>.defineProperty(obj, key, {<br>      get: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>        <span class="hljs-keyword">return</span> val<br>      },<br>      set: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">newVal</span>) </span>{<br>        <span class="hljs-keyword">if</span> (newVal === val) {<br>          <span class="hljs-keyword">return</span><br>        }<br>        val = newVal<br>        callback()<br>      }<br>    })<br>  }<br>}<br><br><span class="hljs-keyword">var</span> obj = { <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> }<br>observe(obj, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'obj changed'</span>)<br>})<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 对象有多层</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">observe</span>(<span class="hljs-params">obj, callback</span>) </span>{<br>  <span class="hljs-keyword">if</span> (obj &amp;&amp; <span class="hljs-keyword">typeof</span> obj == <span class="hljs-string">'object'</span>) {<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> obj) {<br>      <span class="hljs-keyword">let</span> val = obj[key]<br>      observe(val, callback)<br><br>      <span class="hljs-built_in">Object</span>.defineProperty(obj, key, {<br>        get: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>          <span class="hljs-keyword">return</span> val<br>        },<br>        set: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">newVal</span>) </span>{<br>          <span class="hljs-keyword">if</span> (newVal === val) {<br>            <span class="hljs-keyword">return</span><br>          }<br>          val = observe(newVal, callback)<br>          callback()<br>        }<br>      })<br>    }<br>  }<br>  <span class="hljs-keyword">return</span> obj<br>}<br></code></pre></div></td></tr></tbody></table></figure><h2 id="mapState"><a href="#mapState" class="headerlink" title="mapState"></a>mapState</h2><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mapState</span>(<span class="hljs-params">obj</span>) </span>{<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Array</span>.isArray(obj)) {<br>    <span class="hljs-keyword">let</span> mapped = {}<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">of</span> propAry) {<br>      mapped[key] = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.$store.state[key]<br>      }<br>    }<br>    <span class="hljs-keyword">return</span> mapped<br>  }<br><br>  <span class="hljs-keyword">var</span> mapped = {}<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> obj) {<br>    <span class="hljs-keyword">var</span> val = obj[key]<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> val == <span class="hljs-string">'string'</span>) {<br>      mapped[key] = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.$store.state[val]<br>      }<br>    }<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> val == <span class="hljs-string">'function'</span>) {<br>      mapped[key] = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>        <span class="hljs-keyword">return</span> val.call(<span class="hljs-built_in">this</span>, <span class="hljs-built_in">this</span>.$store.state)<br>      }<br>    }<br>  }<br>  <span class="hljs-keyword">return</span> mapped<br>}<br></code></pre></div></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>web前端学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>front-end</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web前端学习笔记14——使用Vue模板</title>
    <link href="/posts/5f4b0425.html"/>
    <url>/posts/5f4b0425.html</url>
    
    <content type="html"><![CDATA[<h1 id="创建模板项目"><a href="#创建模板项目" class="headerlink" title="创建模板项目"></a>创建模板项目</h1><p><a href="https://github.com/vuejs/vue-cli">vue-cli</a>：官方提供的脚手架工具<br>从 <a href="https://github.com/vuejs-templates">vuejs-templates</a> 下载模板项目</p><ul><li>创建 vue 项目<figure class="highlight bash"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">npm install -g vue-cli<br>vue init webpack vue_demo  <span class="hljs-comment">#名称不能包含大写</span><br><span class="hljs-comment"># vue-router， unit tests 和 e2e tests 两个单元测试包暂时不需要，其余默认</span><br><span class="hljs-built_in">cd</span> vue_demo<br>npm run dev<br><span class="hljs-comment"># 访问: http://localhost:8080/</span><br></code></pre></div></td></tr></tbody></table></figure></li><li>模板项目的结构<figure class="highlight md"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs md">|-- build : webpack 相关的配置文件夹(基本不需要修改)<br>  |-- dev-server.js : 通过 express 启动后台服务器<br>|-- config: webpack 相关的配置文件夹(基本不需要修改)<br>  |-- index.js: 指定的后台服务的端口号和静态资源文件夹<br>|-- src : 源码文件夹<br>  |-- components: vue 组件及其相关资源文件夹<br>  |-- App.vue: 应用根主组件<br>  |-- main.js: 应用入口 js<br>|-- static: 静态资源文件夹<br>|-- .babelrc: babel 的配置文件<br>|-- .eslintignore: eslint 检查忽略的配置<br>|-- .eslintrc.js: eslint 检查的配置<br>|-- .gitignore: git 版本管制忽略的配置<br>|-- index.html: 主页面文件<br>|-- package.json: 应用包配置文件<br>|-- README.md: 应用描述说明的 readme 文件<br>|-- node<span class="hljs-emphasis">_modules</span><br></code></pre></div></td></tr></tbody></table></figure></li></ul><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><ul><li><p>vue文件的组成<br>分为3部分：模板页面，JS 模块对象，样式</p><figure class="highlight plain"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">&lt;template&gt;<br>// 页面模板<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default {<br>  data() {<br>    return {}<br>  },<br>  methods: {},<br>  computed: {},<br>  components: {}<br>}<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>/* 样式定义 */<br>&lt;/style&gt;<br></code></pre></div></td></tr></tbody></table></figure></li><li><p>简单案例</p><figure class="highlight md"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs md">&lt;!-- 结构目录 --&gt;<br>|-- src<br>  |-- assets<br><span class="hljs-code">    |-- logo.png</span><br><span class="hljs-code">  |-- components</span><br><span class="hljs-code">    |-- helloworld.vue</span><br><span class="hljs-code">  |-- App.vue</span><br><span class="hljs-code">  |-- main.js</span><br><span class="hljs-code">|-- index.html</span><br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">// helloworld.vue<br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;p class="msg"&gt;{{ msg }}&lt;/p&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default {  //配置对象(与Vue一致)<br>  data() {  //必须写函数<br>    return {<br>      msg: 'Hello Vue Component',<br>    }<br>  },<br>}<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>.msg {<br>  color: red;<br>  font-size: 30px;<br>}<br>&lt;/style&gt;<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">// App.vue<br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;img class="logo" src="./assets/logo.png" alt="logo" /&gt;<br>    &lt;!-- 3. 使用组件标签 --&gt;<br>    &lt;HelloWorld /&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>// 1. 引入组件<br>import HelloWorld from './components/helloworld'<br>export default {<br>  // 2. 映射组件标签<br>  components: {<br>    HelloWorld,<br>  },<br>}<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>.logo {<br>  width: 200px;<br>  height: 200px;<br>}<br>&lt;/style&gt;<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// main.js</span><br><span class="hljs-comment">// 入口JS：创建Vue实例</span><br><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">'./App.vue'</span><br><br><span class="hljs-keyword">new</span> Vue({<br>  el: <span class="hljs-string">"#app"</span>, <span class="hljs-comment">//index.html里写的名称</span><br>  components: { App }, <span class="hljs-comment">//组件标签名</span><br>  template: <span class="hljs-string">'&lt;App/&gt;'</span> <span class="hljs-comment">// 模板插入到el所匹配的页面div里</span><br>})<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- index.html --&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width,initial-scale=1.0"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>helloworld<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- built files will be auto injected --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure></li></ul><h1 id="项目打包与发布"><a href="#项目打包与发布" class="headerlink" title="项目打包与发布"></a>项目打包与发布</h1><ul><li>静态服务器工具包<figure class="highlight bash"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 打包，会生成dist文件夹</span><br>npm run build<br><span class="hljs-comment"># 发布</span><br>npm install -g serve<br>serve dist<br><span class="hljs-comment"># 访问：http://localhost:5000</span><br></code></pre></div></td></tr></tbody></table></figure></li><li>动态 web 服务器(tomcat)<ol><li>修改配置<figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// webpack.prod.conf.js</span><br>output: {<br>  publicPath: <span class="hljs-string">'/xxx/'</span><br>  <span class="hljs-comment">//打包文件夹的名称</span><br>}<br></code></pre></div></td></tr></tbody></table></figure></li><li>重新打包: <code>npm run build</code></li><li>修改 dist 文件夹为项目名称: xxx</li><li>将 xxx 拷贝到运行的 tomcat 的 webapps 目录下</li><li>访问: <a href="http://localhost:8080/xxx">http://localhost:8080/xxx</a></li></ol></li></ul><h1 id="组件间通信"><a href="#组件间通信" class="headerlink" title="组件间通信"></a>组件间通信</h1><h2 id="props"><a href="#props" class="headerlink" title="props"></a>props</h2><p><a href="https://www.baidupcs.com/rest/2.0/pcs/file?method=batchdownload&amp;app_id=250528&amp;zipcontent=%7B%22fs_id%22:%5B510549148196205%5D%7D&amp;sign=DCb740ccc5511e5e8fedcff06b081203:YgER+TxcaEMzSWRWesdEFzOlH+I=&amp;uid=4036931918&amp;time=1615895027&amp;dp-logid=559220838078483504&amp;dp-callid=0&amp;vuk=4036931918&amp;zipname=src_todos%20%E7%AD%891%E4%B8%AA%E6%96%87%E4%BB%B6.zip">todos源文件下载</a></p><ol><li>使用组件标签时<br><code>&lt;my-component name='tom' :age='3' :set-name='setName' /&gt;</code></li><li>定义 MyComponent 时<br>在组件内声明所有的props<ol><li>只指定名称<br><code>props: ['name', 'age', 'setName']</code></li><li>指定名称和类型<figure class="highlight plain"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">props: {<br>  name: String,<br>  age: Number,<br>  setNmae: Function<br>}<br></code></pre></div></td></tr></tbody></table></figure></li><li>指定名称/类型/必要性/默认值<figure class="highlight plain"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">props: {<br>  name: {type: String, required: true, default:xxx},<br>  age: {type: Number, required: true, default:xxx}<br>}<br></code></pre></div></td></tr></tbody></table></figure></li></ol></li></ol><ul><li>注意<ul><li>此方式用于父组件向子组件传递数据</li><li>所有标签属性都会成为组件对象的属性, 模板页面可以直接引用</li><li>问题:<ul><li>如果需要向非子后代传递数据必须多层逐层传递</li><li>兄弟组件间也不能直接 props 通信, 必须借助父组件才可以</li></ul></li></ul></li></ul><h2 id="vue自定义事件"><a href="#vue自定义事件" class="headerlink" title="vue自定义事件"></a>vue自定义事件</h2><p><a href="https://www.baidupcs.com/rest/2.0/pcs/file?method=batchdownload&amp;app_id=250528&amp;zipcontent=%7B%22fs_id%22:%5B411051570951492%5D%7D&amp;sign=DCb740ccc5511e5e8fedcff06b081203:wWKborYhac0WkseamHGH9jloe0s=&amp;uid=4036931918&amp;time=1615895014&amp;dp-logid=559217391567055477&amp;dp-callid=0&amp;vuk=4036931918&amp;zipname=src_todos_modify%20%E7%AD%891%E4%B8%AA%E6%96%87%E4%BB%B6.zip">todos 通信方式修改</a></p><ol><li>绑定事件监听<ol><li>通过 v-on 绑定<figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 给TodoHeader标签对象绑定addTodo事件监听 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">TodoHeader</span> @<span class="hljs-attr">addTodo</span>=<span class="hljs-string">"addTodo"</span> /&gt;</span><br></code></pre></div></td></tr></tbody></table></figure></li><li>通过 $on() <figure class="highlight plain"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;TodoHeader ref="header" /&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>  this.$refs.header.$on('addTodo', this.addTodo)<br>&lt;/script&gt;<br></code></pre></div></td></tr></tbody></table></figure></li></ol></li><li>触发事件<figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 触发事件(只能在父组件中接收)</span><br><span class="hljs-built_in">this</span>.$emit(<span class="hljs-string">'addTodo'</span>, todo)<br></code></pre></div></td></tr></tbody></table></figure></li></ol><ul><li>注意<ul><li>此方式只用于子组件向父组件发送消息(数据)</li><li>问题: 隔代组件或兄弟组件间通信此种方式不合适</li></ul></li></ul><h2 id="消息订阅与发布"><a href="#消息订阅与发布" class="headerlink" title="消息订阅与发布"></a>消息订阅与发布</h2><ul><li>安装 PubSubJS 库 <code>npm i --save pubsub-js</code><br>绑定事件监听  —订阅消息<br>触发事件      —发布消息</li></ul><ol><li>订阅消息 <code>PubSub.subscribe('msg', function(msg, data){})</code></li><li>发布消息 <code>PubSub.publish('msg', data)</code></li></ol><ul><li>注意<br>优点: 此方式可实现任意关系组件间通信(数据)</li><li>总结: 事件的 2 个重要操作<ol><li>绑定事件监听 (订阅消息)<br>目标: 标签元素 <code>&lt;button&gt;</code><br>事件名(类型): click/focus<br>回调函数: <code>function(event){}</code></li><li>触发事件 (发布消息)<br>DOM 事件: 用户在浏览器上对应的界面上做对应的操作<br>自定义: 编码手动触发</li></ol></li></ul><h2 id="slot"><a href="#slot" class="headerlink" title="slot"></a>slot</h2><p>此方式用于父组件向子组件传递<strong>标签</strong>，而非数据。</p><ol><li>子组件 Child.vue<figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"xxx"</span>&gt;</span>不确定的标签结构 1<span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>组件确定的标签结构<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"yyy"</span>&gt;</span>不确定的标签结构 2<span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure></li><li>父组件 Parent.vue<figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">child</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"xxx"</span>&gt;</span>xxx 对应的标签结构<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"yyy"</span>&gt;</span>yyyy 对应的标签结构<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">child</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure></li></ol><p><a href="https://www.baidupcs.com/rest/2.0/pcs/file?method=batchdownload&amp;app_id=250528&amp;zipcontent=%7B%22fs_id%22:%5B466857802587390%5D%7D&amp;sign=DCb740ccc5511e5e8fedcff06b081203:j9NJoc6yVNtIBzvtyaAU/BbWG8s=&amp;uid=4036931918&amp;time=1616390085&amp;dp-logid=8762562628998474716&amp;dp-callid=0&amp;vuk=4036931918&amp;zipname=src_todos_final%20%E7%AD%891%E4%B8%AA%E6%96%87%E4%BB%B6.zip">todos 源文件最终版</a></p><h1 id="vue-ajax"><a href="#vue-ajax" class="headerlink" title="vue-ajax"></a>vue-ajax</h1><h2 id="vue-resource"><a href="#vue-resource" class="headerlink" title="vue-resource"></a>vue-resource</h2><p>vue 插件, 非官方库, vue1.x 使用广泛。<a href="https://github.com/pagekit/vue-resource/blob/develop/docs/http.md">文档</a><br>下载 <code>npm install vue-resource --save</code></p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 引入模块</span><br><span class="hljs-keyword">import</span> VueResource <span class="hljs-keyword">from</span> <span class="hljs-string">'vue-resource'</span><br><span class="hljs-comment">// 声明使用插件</span><br><span class="hljs-comment">// 内部会给vm对象和组件对象添加一个属性：$http</span><br>Vue.use(VueResourcejs)<br><br><span class="hljs-comment">// 通过 vue/组件对象发送 ajax 请求</span><br><span class="hljs-built_in">this</span>.$http.get(<span class="hljs-string">'/someUrl'</span>).then(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> {<br>  <span class="hljs-comment">// success callback</span><br>  <span class="hljs-built_in">console</span>.log(response.data) <span class="hljs-comment">//返回结果数据</span><br>}, <span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> {<br>  <span class="hljs-comment">// error callback</span><br>  <span class="hljs-built_in">console</span>.log(response.statusText) <span class="hljs-comment">//错误信息</span><br>})<br></code></pre></div></td></tr></tbody></table></figure><h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><p>通用的 ajax 请求库, 官方推荐, vue2.x 使用广泛。<br>下载 <code>npm install axios --save</code></p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 引入模块</span><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">'axios'</span><br><span class="hljs-comment">// 发送 ajax 请求</span><br>axios.get(url)<br>  .then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> {<br>    <span class="hljs-built_in">console</span>.log(response.data)<br>  })<br>  .catch(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> {<br>    <span class="hljs-built_in">console</span>.log(error.message)<br>  })<br></code></pre></div></td></tr></tbody></table></figure><p><a href="https://www.baidupcs.com/rest/2.0/pcs/file?method=batchdownload&amp;app_id=250528&amp;zipcontent=%7B%22fs_id%22:%5B620939812726153%5D%7D&amp;sign=DCb740ccc5511e5e8fedcff06b081203:qF9ajP1kVj822bPGGpOIxqaWFbY=&amp;uid=4036931918&amp;time=1615981286&amp;dp-logid=8652826240762618758&amp;dp-callid=0&amp;vuk=4036931918&amp;zipname=src_users%20%E7%AD%891%E4%B8%AA%E6%96%87%E4%BB%B6.zip">搜索github用户 源码下载</a></p><h1 id="UI-组件库"><a href="#UI-组件库" class="headerlink" title="UI 组件库"></a>UI 组件库</h1><ul><li>Mint UI:<br>主页: <a href="http://mint-ui.github.io/#!/zh-cn">http://mint-ui.github.io/#!/zh-cn</a><br>说明: 饿了么开源的基于 vue 的移动端 UI 组件库</li><li>Elment<br>主页: <a href="http://element-cn.eleme.io/#/zh-CN">http://element-cn.eleme.io/#/zh-CN</a><br>说明: 饿了么开源的基于 vue 的 PC 端 UI 组件库</li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 下载 Mint UI</span><br>npm install --save mint-ui<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight md"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs md">&lt;!-- 实现按需打包 --&gt;<br><span class="hljs-bullet">1.</span> 下载<br>npm install --save-dev babel-plugin-component<br><span class="hljs-bullet">2.</span> 修改 babel 配置<br>"plugins": [<br><span class="hljs-code">    [</span><br><span class="hljs-code">      "component",</span><br><span class="hljs-code">      {</span><br><span class="hljs-code">        "libraryName": "mint-ui",</span><br><span class="hljs-code">        "style": true</span><br><span class="hljs-code">      }</span><br><span class="hljs-code">    ]</span><br><span class="hljs-code">  ]</span><br></code></pre></div></td></tr></tbody></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p> mint-ui 组件分为 标签组件 与 非标签组件</p><figure class="highlight md"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs md">&lt;!-- 文件结构 --&gt;<br>|-- src<br>  |-- App.vue<br>  |-- main.js<br>|-- index.html<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- index.html --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no"</span> /&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- built files will be auto injected --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://as.alipayobjects.com/g/component/fastclick/1.0.6/fastclick.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">if</span> (<span class="hljs-string">'addEventListener'</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">document</span>) {</span><br><span class="javascript">      <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'DOMContentLoaded'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><br><span class="javascript">        FastClick.attach(<span class="hljs-built_in">document</span>.body);</span><br><span class="javascript">      }, <span class="hljs-literal">false</span>);</span><br>    }<br><span class="javascript">    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">window</span>.Promise) {</span><br><span class="javascript">      <span class="hljs-built_in">document</span>.writeln(<span class="hljs-string">'&lt;script src = "https://as.alipayobjects.com/g/component/es6-promise/3.2.2/es6-promise.min.js" '</span> + <span class="hljs-string">' &gt; '</span> + <span class="hljs-string">' &lt; '</span> + <span class="hljs-string">' / '</span> + <span class="hljs-string">'script &gt; '</span>);</span><br>    }<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// main.js</span><br><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">'./App.vue'</span><br><span class="hljs-keyword">import</span> { Button } <span class="hljs-keyword">from</span> <span class="hljs-string">'mint-ui'</span><br><br><span class="hljs-comment">// 注册成标签(全局)</span><br>Vue.component(Button.name, Button)<br><br><span class="hljs-comment">/* eslint-disable no-new */</span><br><span class="hljs-keyword">new</span> Vue({<br>  el: <span class="hljs-string">'#app'</span>,<br>  components: { App },<br>  template: <span class="hljs-string">'&lt;App/&gt;'</span><br>})<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">// App.vue<br>&lt;template&gt;<br>  &lt;mt-button type="primary" @click="handleClick" style="width: 100%"&gt;Test&lt;/mt-button&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import { Toast } from 'mint-ui'<br>export default {<br>  methods: {<br>    handleClick() {<br>      Toast('提示信息')<br>    }<br>  }<br>}<br>&lt;/script&gt;<br></code></pre></div></td></tr></tbody></table></figure><h1 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h1><p>官方提供的用来实现 SPA 的 vue 插件。<a href="https://router.vuejs.org/zh/">文档</a><br>下载<code>npm install vue-router --save</code></p><h2 id="路由组件"><a href="#路由组件" class="headerlink" title="路由组件"></a>路由组件</h2><ol><li>VueRouter(): 用于创建路由器的构建函数<figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">new</span> VueRouter({<br>  <span class="hljs-comment">// 多个配置项</span><br>})<br></code></pre></div></td></tr></tbody></table></figure></li><li>路由配置<figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">routes: [<br>  { <span class="hljs-comment">// 一般路由</span><br>    path: <span class="hljs-string">'/about'</span>,<br>    component: About<br>  },<br>  { <span class="hljs-comment">// 自动跳转路由</span><br>    path: <span class="hljs-string">'/'</span>,<br>    redirect: <span class="hljs-string">'/about'</span><br>  }<br>]<br></code></pre></div></td></tr></tbody></table></figure></li><li>注册路由器<figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">'./router'</span><br><span class="hljs-keyword">new</span> Vue({<br>  router<br>})<br></code></pre></div></td></tr></tbody></table></figure></li><li>使用路由组件标签<ul><li><code>&lt;router-link&gt;</code>: 用来生成路由链接<br><code>&lt;router-link to="/xxx"&gt;Go to XXX&lt;/router-link&gt;</code></li><li><code>&lt;router-view&gt;</code>: 用来显示当前路由组件界面<br><code>&lt;router-view&gt;&lt;/router-view&gt;</code></li></ul></li></ol><h2 id="向路由组件传递数据"><a href="#向路由组件传递数据" class="headerlink" title="向路由组件传递数据"></a>向路由组件传递数据</h2><ul><li><p>路由传参(param)</p><ol><li>配置路由<figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">children: [<br>  {<br>    path: <span class="hljs-string">'mdetail/:id'</span>,<br>    component: MessageDetail<br>  }<br>]<br></code></pre></div></td></tr></tbody></table></figure></li><li>路由路径<br><code>&lt;router-link :to="'/home/message/mdetail/'+m.id"&gt;{{m.title}}&lt;/router-link&gt;</code></li><li>路由组件中读取请求参数<br><code>this.$route.params.id</code></li></ol></li><li><p>路由传参(query)</p><ol><li>在地址的后面 写上 ？分隔</li><li>通过 key=value&amp;key2=value 的方式添加参数</li><li>组件中通过 <code>this.$route.query</code> 访问对应的 key 即可获取数据</li></ol></li><li><p><router-view>属性携带数据<br><code>&lt;router-view :msg="msg"&gt;&lt;/router-view&gt;</code></router-view></p></li></ul><h2 id="缓存路由组件对象"><a href="#缓存路由组件对象" class="headerlink" title="缓存路由组件对象"></a>缓存路由组件对象</h2><ul><li>默认情况下, 被切换的路由组件对象会死亡释放, 再次回来时是重新创建的</li><li>如果可以缓存路由组件对象, 可以提高用户体验<figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">keep-alive</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">keep-alive</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure></li></ul><h2 id="相关-API"><a href="#相关-API" class="headerlink" title="相关 API"></a>相关 API</h2><ul><li>this.$router.push(path): 相当于点击路由链接(可以返回到当前路由界面)</li><li>this.$router.replace(path): 用新路由替换当前路由(不可以返回到当前路由界面)</li><li>this.$router.back(): 请求(返回)上一个记录路由</li><li>this.$router.go(-1): 请求(返回)上一个记录路由</li><li>this.$router.go(1): 请求下一个记录路由</li></ul><h2 id="前端history路由的问题"><a href="#前端history路由的问题" class="headerlink" title="前端history路由的问题"></a>前端history路由的问题</h2><p>页面中加载的资源相对路径会根据地址栏的变化而变化，所以要使用绝对路径，或相对于根目录的路径需要声明base属性，以说明地址中哪部分是前端路由部分，哪部分是后端路由部分。<br>以特定url开头的地址都需要返回该url对应的内容。<br>该模式不利于缓存。</p><p><a href="https://www.baidupcs.com/rest/2.0/pcs/file?method=batchdownload&amp;app_id=250528&amp;zipcontent=%7B%22fs_id%22:%5B160508998630300%5D%7D&amp;sign=DCb740ccc5511e5e8fedcff06b081203:aLWldkpQt+A8tx/onZB88zC9v/8=&amp;uid=4036931918&amp;time=1616035350&amp;dp-logid=8667339095460594506&amp;dp-callid=0&amp;vuk=4036931918&amp;zipname=src_router%20%E7%AD%891%E4%B8%AA%E6%96%87%E4%BB%B6.zip">vue-router源码 下载</a></p><h1 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h1><h2 id="了解"><a href="#了解" class="headerlink" title="了解"></a>了解</h2><p><a href="https://vuex.vuejs.org/zh/">文档</a><br>简单来说: 对 vue 应用中多个组件的共享状态进行集中式的管理(读/写)</p><ul><li>状态自管理应用<br>state: 驱动应用的数据源<br>view: 以声明方式将 state 映射到视图<br>actions: 响应在 view 上的用户输入导致的状态变化(包含 n 个更新状态的方法)【一个action是一个函数】<br><img src="/image/post/%E8%87%AA%E7%AE%A1%E7%90%86.png" alt="状态自管理"></li><li>多组件共享状态的问题<ol><li>多个视图依赖于同一状态</li><li>来自不同视图的行为需要变更同一状态</li><li>以前的解决办法<ol><li>将数据以及操作数据的行为都定义在父组件</li><li>将数据以及操作数据的行为传递给需要的各个子组件(有可能需要多级传递)</li></ol></li><li>vuex 就是用来解决这个问题的</li></ol></li></ul><h2 id="核心概念和-API"><a href="#核心概念和-API" class="headerlink" title="核心概念和 API"></a>核心概念和 API</h2><p><img src="/image/post/vuex.png" alt="vuex"></p><ol><li><p>state</p><ul><li>vuex管理的状态对象</li><li>它应该是唯一的<figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> state = {<br>  xxx: initValue<br>}<br></code></pre></div></td></tr></tbody></table></figure></li></ul></li><li><p>mutations</p><ul><li>包含多个直接更新 state 的方法(回调函数)的对象</li><li>谁来触发：action 中的 commit(‘mutation 名称’)</li><li>只能包含同步的代码，不能写异步代码<figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> mutations = {<br>  <span class="hljs-function"><span class="hljs-title">yyy</span>(<span class="hljs-params">state, {data1}</span>)</span>{<br>    <span class="hljs-comment">// 更新 state 的某个属性</span><br>  }<br>}<br></code></pre></div></td></tr></tbody></table></figure></li></ul></li><li><p>actions</p><ul><li>包含多个事件回调函数的对象</li><li>通过执行: commit()来触发 mutation 的调用, 间接更新 state</li><li>谁来触发: 组件中: $store.dispatch(‘action 名称’, data1) // ‘zzz’</li><li>可以包含异步代码(定时器, ajax)<figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> action = {<br>  <span class="hljs-function"><span class="hljs-title">zzz</span>(<span class="hljs-params">{commit, state}, data1</span>)</span>{<br>    commit(<span class="hljs-string">'yyy'</span>, {data1})<br>  }<br>}<br></code></pre></div></td></tr></tbody></table></figure></li></ul></li><li><p>getters</p><ul><li>包含多个计算属性(get)的对象</li><li>谁来读取: 组件中: $store.getters.xxx<figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> getters = {<br>  <span class="hljs-function"><span class="hljs-title">mmm</span>(<span class="hljs-params">state</span>)</span>{<br>    <span class="hljs-keyword">return</span> ...<br>  }<br>}<br></code></pre></div></td></tr></tbody></table></figure></li></ul></li><li><p>store 对象</p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 向外暴露 store 对象</span><br><span class="hljs-comment">// store.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> Vuex.Store({<br>  state, <span class="hljs-comment">// 状态</span><br>  getters, <span class="hljs-comment">// 包含多个getter计算属性函数的对象</span><br>  mutations, <span class="hljs-comment">// 包含多个更新state函数的对象</span><br>  actions, <span class="hljs-comment">// 包含多个对应事件回调函数的对象</span><br>}<br><br><span class="hljs-comment">// 映射 store</span><br><span class="hljs-comment">// main.js</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">'./store'</span><br><span class="hljs-keyword">new</span> Vue({<br>  store<br>})<br></code></pre></div></td></tr></tbody></table></figure><ul><li>所有用 vuex 管理的组件中都多了一个属性$store, 它就是一个 store 对象</li><li>属性:<ul><li>state: 注册的 state 对象</li><li>getters: 注册的 getters 对象</li></ul></li><li>方法: <ul><li>dispatch(actionName, data): 分发调用 action</li></ul></li></ul></li><li><p>组件中简化语法</p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// App.vue</span><br><span class="hljs-keyword">import</span> {mapState, mapGetters, mapActions} <span class="hljs-keyword">from</span> <span class="hljs-string">'vuex'</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {<br>  <span class="hljs-comment">/* computed: {</span><br><span class="hljs-comment">    count () {</span><br><span class="hljs-comment">      return this.$store.state.count</span><br><span class="hljs-comment">    },</span><br><span class="hljs-comment">    evenOrOdd () {</span><br><span class="hljs-comment">      return this.$store.getters.evenOrOdd</span><br><span class="hljs-comment">    }</span><br><span class="hljs-comment">  }, */</span><br>  computed: {<br>    ...mapState([<span class="hljs-string">'count'</span>]),<br>    ...mapGetters([<span class="hljs-string">'evenOrOdd'</span>])<br>  },<br>  <span class="hljs-comment">/*methods: {</span><br><span class="hljs-comment">    increment () {</span><br><span class="hljs-comment">      this.$store.dispatch('increment')</span><br><span class="hljs-comment">    },</span><br><span class="hljs-comment">    decrement () {</span><br><span class="hljs-comment">      this.$store.dispatch('decrement')</span><br><span class="hljs-comment">    }</span><br><span class="hljs-comment">  } */</span><br>  methods: {<br>    ...mapActions([<span class="hljs-string">'increment'</span>, <span class="hljs-string">'decrement'</span>])<br>  }<br>}<br></code></pre></div></td></tr></tbody></table></figure></li><li><p>modules</p><ul><li>包含多个 module</li><li>一个 module 是一个 store 的配置对象</li><li>与一个组件(包含有共享数据)对应</li></ul></li></ol><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">// 普通写法<br>// App.vue<br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;p&gt;click {{ count }} times, count is {{ evenOrOdd }}&lt;/p&gt;<br>    &lt;button @click="increment"&gt;+&lt;/button&gt;<br>    &lt;button @click="decrement"&gt;-&lt;/button&gt;<br>    &lt;button @click="incrementIfOdd"&gt;increment if odd&lt;/button&gt;<br>    &lt;button @click="incrementAsync"&gt;increment async&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default {<br>  data() {<br>    return {<br>      count: 0<br>    }<br>  },<br>  computed: {<br>    evenOrOdd() {<br>      return this.count % 2 === 0 ? '偶数' : '奇数'<br>    }<br>  },<br>  methods: {<br>    // 增加<br>    increment() {<br>      const count = this.count<br>      this.count = count + 1<br>    },<br>    // 减少<br>    decrement() {<br>      const count = this.count<br>      this.count = count - 1<br>    },<br>    // 如果是奇数才增加<br>    incrementIfOdd() {<br>      const count = this.count<br>      if (count % 2 === 1) {<br>        this.count = count + 1<br>      }<br>    },<br>    // 过1秒才增加<br>    incrementAsync() {<br>      setTimeout(() =&gt; {<br>        const count = this.count<br>        this.count = count + 1<br>      }, 1000)<br>    }<br>  }<br>}<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>&lt;/style&gt;<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// main.js</span><br><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">'./App.vue'</span><br><br><span class="hljs-comment">/* eslint-disable no-new */</span><br><span class="hljs-keyword">new</span> Vue({<br>  el: <span class="hljs-string">'#app'</span>,<br>  components: { App },<br>  template: <span class="hljs-string">'&lt;App/&gt;'</span><br>})<br></code></pre></div></td></tr></tbody></table></figure><hr><figure class="highlight plain"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">// 用vuex<br>// App.vue<br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;p&gt;click {{ count }} times, count is {{ evenOrOdd }}&lt;/p&gt;<br>    &lt;button @click="increment"&gt;+&lt;/button&gt;<br>    &lt;button @click="decrement"&gt;-&lt;/button&gt;<br>    &lt;button @click="incrementIfOdd"&gt;increment if odd&lt;/button&gt;<br>    &lt;button @click="incrementAsync"&gt;increment async&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default {<br>  computed: {<br>    evenOrOdd() {<br>      return this.$store.getters.evenOrOdd<br>    }<br>  },<br>  methods: {<br>    // 增加<br>    increment() {<br>      // 通知vuex去增加<br>      this.$store.dispatch('increment') // 触发store中对应的action调用<br>    },<br>    // 减少<br>    decrement() {<br>      this.$store.dispatch('decrement')<br>    },<br>    // 如果是奇数才增加<br>    incrementIfOdd() {<br>      this.$store.dispatch('incrementIfOdd')<br>    },<br>    // 过1秒才增加<br>    incrementAsync() {<br>      this.$store.dispatch('incrementAsync')<br>    }<br>  }<br>}<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>&lt;/style&gt;<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// store.js</span><br><span class="hljs-comment">// vuex的核心管理对象模块：store</span><br><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span><br><span class="hljs-keyword">import</span> Vuex <span class="hljs-keyword">from</span> <span class="hljs-string">'vuex'</span><br><br>Vue.use(Vuex)<br><br><span class="hljs-comment">// 状态</span><br><span class="hljs-keyword">const</span> state = { <span class="hljs-comment">// 初始化状态</span><br>  count: <span class="hljs-number">0</span><br>}<br><br><span class="hljs-comment">// 包含多个更新state函数的对象</span><br><span class="hljs-keyword">const</span> mutations = {<br>  <span class="hljs-comment">// 增加的mutation</span><br>  <span class="hljs-function"><span class="hljs-title">INCREMENT</span>(<span class="hljs-params">state</span>)</span> {<br>    state.count++<br>  },<br>  <span class="hljs-comment">//  减少的mutation</span><br>  <span class="hljs-function"><span class="hljs-title">DECREMENT</span>(<span class="hljs-params">state</span>)</span> {<br>    state.count--<br>  }<br>}<br><br><span class="hljs-comment">// 包含多个对应事件回调函数的对象</span><br><span class="hljs-keyword">const</span> actions = {<br>  <span class="hljs-comment">// 增加的action</span><br>  <span class="hljs-function"><span class="hljs-title">increment</span>(<span class="hljs-params">{ commit }</span>)</span> {<br>    <span class="hljs-comment">// 提交增加的mutation</span><br>    commit(<span class="hljs-string">'INCREMENT'</span>)<br>  },<br><br>  <span class="hljs-comment">// 减少的action</span><br>  <span class="hljs-function"><span class="hljs-title">decrement</span>(<span class="hljs-params">{ commit }</span>)</span> {<br>    commit(<span class="hljs-string">'DECREMENT'</span>)<br>  },<br><br>  <span class="hljs-comment">// 带条件的action</span><br>  <span class="hljs-function"><span class="hljs-title">incrementIfOdd</span>(<span class="hljs-params">{ commit, state }</span>)</span> {<br>    <span class="hljs-keyword">if</span> (state.count % <span class="hljs-number">2</span> === <span class="hljs-number">1</span>) {<br>      commit(<span class="hljs-string">'INCREMENT'</span>)<br>    }<br>  },<br><br>  <span class="hljs-comment">// 异步的action</span><br>  <span class="hljs-function"><span class="hljs-title">incrementAsync</span>(<span class="hljs-params">{ commit }</span>)</span> {<br>    <span class="hljs-comment">// 在action中直接就可以执行异步代码</span><br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {<br>      commit(<span class="hljs-string">'INCREMENT'</span>)<br>    }, <span class="hljs-number">1000</span>);<br>  }<br>}<br><br><span class="hljs-comment">// 包含多个getter计算属性函数的对象</span><br><span class="hljs-keyword">const</span> getters = { <span class="hljs-comment">// 不需要调用，只需要读取属性值</span><br>  <span class="hljs-function"><span class="hljs-title">evenOrOdd</span>(<span class="hljs-params">state</span>)</span> {<br>    <span class="hljs-keyword">return</span> state.count % <span class="hljs-number">2</span> === <span class="hljs-number">0</span> ? <span class="hljs-string">'偶数'</span> : <span class="hljs-string">'奇数'</span><br>  }<br>}<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> Vuex.Store({<br>  state, <span class="hljs-comment">// 状态</span><br>  mutations, <span class="hljs-comment">// 包含多个更新state函数的对象</span><br>  actions, <span class="hljs-comment">// 包含多个对应事件回调函数的对象</span><br>  getters, <span class="hljs-comment">// 包含多个getter计算属性函数的对象</span><br>})<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// main.js</span><br><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">'./App.vue'</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">'./store'</span><br><br><span class="hljs-comment">/* eslint-disable no-new */</span><br><span class="hljs-keyword">new</span> Vue({<br>  el: <span class="hljs-string">'#app'</span>,<br>  components: { App },<br>  template: <span class="hljs-string">'&lt;App/&gt;'</span>,<br>  store <span class="hljs-comment">// 所有组件对象都多了一个属性：$store</span><br>})<br></code></pre></div></td></tr></tbody></table></figure><hr><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// App.vue优化</span><br><span class="hljs-keyword">import</span> { mapState, mapGetters, mapActions } <span class="hljs-keyword">from</span> <span class="hljs-string">'vuex'</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {<br>  computed: {<br>    <span class="hljs-comment">// mapState()返回值: {count(){return this.$store.state['count']}}</span><br>    ...mapState([<span class="hljs-string">'count'</span>]),<br>    <span class="hljs-comment">// mapGetters()返回值: {evenOrOdd(){return this.$store.getters['eventOrOdd']}}</span><br>    ...mapGetters([<span class="hljs-string">'evenOrOdd'</span>])<br>  },<br><br>  methods: {<br>    ...mapActions([<br>      <span class="hljs-string">'increment'</span>,<br>      <span class="hljs-string">'decrement'</span>,<br>      <span class="hljs-string">'incrementIfOdd'</span>,<br>      <span class="hljs-string">'incrementAsync'</span><br>    ])<br>  }<br>}<br></code></pre></div></td></tr></tbody></table></figure><p><img src="/image/post/vuex.jpg" alt="vuex结构"><br><a href="https://pcs.baidu.com/rest/2.0/pcs/file?method=download&amp;app_id=250528&amp;filename=vueCode.zip&amp;path=/share/%E6%BA%90%E7%A0%81/Vue/vueCode.zip&amp;filename=vueCode.zip">所有项目源代码 下载</a></p><h1 id="render"><a href="#render" class="headerlink" title="render"></a>render</h1><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// main.js</span><br><span class="hljs-keyword">new</span> Vue({<br>  el: <span class="hljs-string">'#app'</span>,<br>  components: { App }, <span class="hljs-comment">// 映射组件标签</span><br>  template: <span class="hljs-string">'&lt;App/&gt;'</span> <span class="hljs-comment">// 指定需要渲染到页面的模板</span><br>})<br></code></pre></div></td></tr></tbody></table></figure><p>上述代码可以简写为：</p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// main.js</span><br><span class="hljs-keyword">new</span> Vue({<br>  el: <span class="hljs-string">'#app'</span>,<br>  render: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> h(App)<br>})<br></code></pre></div></td></tr></tbody></table></figure><p>其中，render函数相当于：</p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">createElement</span>) </span>{<br>  <span class="hljs-keyword">return</span> createElement(App)<br>}<br></code></pre></div></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>web前端学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>front-end</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web前端学习笔记13——Vue基础</title>
    <link href="/posts/284c34b3.html"/>
    <url>/posts/284c34b3.html</url>
    
    <content type="html"><![CDATA[<h1 id="了解"><a href="#了解" class="headerlink" title="了解"></a>了解</h1><ul><li><p>介绍<br>渐进式 JavaScript 框架<br>作者：尤雨溪<br>作用：动态构建用户界面</p></li><li><p>特点<br>遵循 MVVM 模式<br>编码简洁，体积小，运行效率高，适合移动/PC端开发<br>它本身只关注UI，可以轻松引入 vue 插件或其它第三方库开发项目</p></li><li><p>与其它前端 JS 框架的关联<br>借鉴 angular 的<strong>模板</strong>和<strong>数据绑定</strong>技术<br>借鉴 react 的<strong>组件化</strong>和<strong>虚拟DOM</strong>技术</p></li><li><p>扩展插件</p><figure class="highlight md"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs md">vue-cli: vue 脚手架<br>vue-resource(axios): ajax 请求<br>vue-router: 路由<br>vuex: 状态管理<br>vue-lazyload: 图片懒加载<br>vue-scroller: 页面滑动相关<br>mint-ui: 基于vue的UI组件库(移动端)<br>element-ui: 基于vue的UI组件库(PC端)<br></code></pre></div></td></tr></tbody></table></figure></li></ul><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 1. 引入Vue.js</span><br><span class="hljs-comment">  2. 创建Vue对象</span><br><span class="hljs-comment">  el : 指定根element(选择器)</span><br><span class="hljs-comment">  data : 初始化数据(页面可以访问)</span><br><span class="hljs-comment">  3. 双向数据绑定 : v-model</span><br><span class="hljs-comment">  4. 显示数据 : {{xxx}}</span><br><span class="hljs-comment">  5. 理解vue的mvvm实现 --&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">'username'</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>hello {{username}}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> Vue({</span><br><span class="javascript">      el: <span class="hljs-string">'#app'</span>,</span><br>      data: {<br><span class="javascript">        username: <span class="hljs-string">'world'</span></span><br>      }<br>    })<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><p><img src="/image/post/vue.png" alt="Vue模型"><br>MVVM<br>model： 模型，数据对象(data)<br>view: 视图，模板页面<br>viewmodel: 视图模型(vue的实例)</p><h1 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h1><ul><li>模板：动态的html页面，包含了一些JS语法代码。<br>大括号表达式，指令(以v-开头的自定义标签属性)</li><li>双大括号表达式<br>语法: <code>{{exp}}</code> 或 <code>{{{exp}}}</code><br>功能: 向页面输出数据<br>可以调用对象的方法</li><li>指令一: 强制数据绑定<br>功能: 指定变化的属性值<br>完整写法: <code>v-bind:xxx='yyy'  //yyy会作为表达式解析执行</code><br>简洁写法: <code>:xxx='yyy'</code></li><li>指令二: 绑定事件监听<br>功能: 绑定指定事件名的回调函数<br>完整写法: <code>v-on:click='xxx'</code><br>简洁写法: <code>@click='xxx'</code></li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>1. 双大括号表达式<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{{content}}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{{content.toUpperCase()}}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">'msg'</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> <span class="hljs-comment">&lt;!-- textContent --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">'msg'</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> <span class="hljs-comment">&lt;!-- innerHTML --&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>2. 指令一: 强制数据绑定<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"imgUrl"</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 这种写法不对，可用下面两种写法 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">v-bind:src</span>=<span class="hljs-string">"imgUrl"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">"imgUrl"</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>3. 指令二: 绑定事件监听<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">"test"</span>&gt;</span>点我<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"test2('abc')"</span>&gt;</span>点我2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">new</span> Vue({</span><br><span class="javascript">      el: <span class="hljs-string">'#app'</span>,</span><br>      data: {<br><span class="javascript">        content: <span class="hljs-string">'hello world'</span>,</span><br><span class="handlebars"><span class="xml">        msg: '<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://cn.vuejs.org/"</span>&gt;</span>Vue<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>',</span></span><br><span class="javascript">        imgUrl: <span class="hljs-string">'https://cn.vuejs.org/images/logo.png'</span></span><br>      },<br>      methods: {<br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span> {</span><br><span class="javascript">          alert(<span class="hljs-string">'HELLO!'</span>)</span><br>        },<br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">test2</span>(<span class="hljs-params">w</span>)</span> {</span><br>          alert(w)<br>        }<br>      }<br>    })<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><h1 id="计算属性和监视"><a href="#计算属性和监视" class="headerlink" title="计算属性和监视"></a>计算属性和监视</h1><ul><li>计算属性<br>在computed属性对象中定义计算属性的方法<br>在页面中使用<code>{{方法名}}</code>来显示计算的结果</li><li>监视属性<br>通过通过vm对象的<code>$watch()或</code>watch配置`来监视指定的属性<br>当属性变化时, 回调函数自动调用, 在函数内部进行计算</li><li>计算属性高级<br>通过getter/setter实现对属性数据的显示和监视<br>计算属性存在缓存, 多次读取只执行一次getter计算<br>getter: 属性的 get 方法<br>setter: 属性的 set 方法</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"demo"</span>&gt;</span><br>    姓: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"First Name"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"firstName"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    名: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"Last Name"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"lastName"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    姓名1(单向): <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"Full Name1"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"fullName1"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    姓名2(单向): <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"Full Name2"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"fullName2"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    姓名3(双向): <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"Full Name3"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"fullName3"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 只调用了一次fullName1()，用了缓存 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{{fullName1}}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{{fullName1}}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{{fullName1}}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> Vue({</span><br><span class="javascript">      el: <span class="hljs-string">'#demo'</span>,</span><br>      data: {<br><span class="javascript">        firstName: <span class="hljs-string">'A'</span>,</span><br><span class="javascript">        lastName: <span class="hljs-string">'B'</span>,</span><br><span class="javascript">        fullName2: <span class="hljs-string">'A B'</span></span><br>      },<br>      computed: {<br><span class="javascript">        <span class="hljs-comment">// 什么时候执行: 初始化显示/相关的data属性数据发生改变</span></span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">fullName1</span>(<span class="hljs-params"></span>)</span> {</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'fullName1()'</span>);</span><br><span class="javascript">          <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.firstName + <span class="hljs-string">' '</span> + <span class="hljs-built_in">this</span>.lastName</span><br>        },<br>        fullName3: {<br><span class="javascript">          <span class="hljs-comment">// 回调函数，当需要读取当前属性时回调，根据相关的数据计算并返回当前属性的值</span></span><br><span class="javascript">          <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span> {</span><br><span class="javascript">            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.firstName + <span class="hljs-string">' '</span> + <span class="hljs-built_in">this</span>.lastName</span><br>          },<br><span class="javascript">          <span class="hljs-comment">// 回调函数，监视当前属性值的变化，当属性值发生改变时回调，更新相关的属性值</span></span><br><span class="javascript">          <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">value</span>)</span> { <span class="hljs-comment">//value就是fullName3的最新属性值</span></span><br><span class="javascript">            <span class="hljs-keyword">const</span> names = value.split(<span class="hljs-string">' '</span>)</span><br><span class="javascript">            <span class="hljs-built_in">this</span>.firstName = names[<span class="hljs-number">0</span>]</span><br><span class="javascript">            <span class="hljs-built_in">this</span>.lastName = names[<span class="hljs-number">1</span>]</span><br>          }<br>        }<br>      },<br><span class="javascript">      watch: { <span class="hljs-comment">//配置监视，用对象</span></span><br><span class="javascript">        firstName: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) </span>{</span><br><span class="javascript">          <span class="hljs-built_in">this</span>.fullName2 = value + <span class="hljs-string">' '</span> + <span class="hljs-built_in">this</span>.lastName</span><br>        }<br>      }<br>    })<br><span class="javascript">    vm.$watch(<span class="hljs-string">'lastName'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) </span>{ <span class="hljs-comment">//用实例方法</span></span><br><span class="javascript">      <span class="hljs-built_in">this</span>.fullName2 = <span class="hljs-built_in">this</span>.firstName + <span class="hljs-string">' '</span> + value</span><br>    })<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><h1 id="class-与-style-绑定"><a href="#class-与-style-绑定" class="headerlink" title="class 与 style 绑定"></a>class 与 style 绑定</h1><ul><li>在应用界面中, 某个(些)元素的样式是变化的<br>class/style绑定就是专门用来实现动态样式效果的技术</li><li>class绑定  <code>:class='xxx'</code><br>xxx可以是字符串，对象，数组</li><li>style绑定  <code>:style="{ color: activeColor, fontSize: fontSize + 'px' }"</code><br>其中activeColor/fontSize是data属性</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>class与style绑定<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css">    <span class="hljs-selector-class">.aClass</span> {</span><br>      color: red;<br>    }<br><span class="css">    <span class="hljs-selector-class">.bClass</span> {</span><br>      color: blue;<br>    }<br><span class="css">    <span class="hljs-selector-class">.cClass</span> {</span><br>      font-size: 30px;<br>    }<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"demo"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>1. class绑定 :class='xxx'<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"cClass"</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">"a"</span>&gt;</span>xxx是字符串<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 类名：boolean --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">"{aClass:isA, bClass:isB}"</span>&gt;</span>xxx是对象<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">"['aClass','cClass']"</span>&gt;</span>xxx是数组<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>2. style绑定<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">"{color: activeColor, fontSize: fs + 'px'}"</span>&gt;</span>style绑定<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">'update'</span>&gt;</span>更新<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">new</span> Vue({</span><br><span class="javascript">      el: <span class="hljs-string">"#demo"</span>,</span><br>      data: {<br><span class="javascript">        a: <span class="hljs-string">'aClass'</span>,</span><br><span class="javascript">        isA: <span class="hljs-literal">true</span>,</span><br><span class="javascript">        isB: <span class="hljs-literal">false</span>,</span><br><span class="javascript">        activeColor: <span class="hljs-string">'red'</span>,</span><br>        fs: 20<br>      },<br>      methods: {<br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">update</span>(<span class="hljs-params"></span>)</span> {</span><br><span class="javascript">          <span class="hljs-built_in">this</span>.a = <span class="hljs-string">'bClass'</span></span><br><span class="javascript">          <span class="hljs-built_in">this</span>.isA = <span class="hljs-literal">false</span></span><br><span class="javascript">          <span class="hljs-built_in">this</span>.isB = <span class="hljs-literal">true</span></span><br><span class="javascript">          <span class="hljs-built_in">this</span>.activeColor = <span class="hljs-string">'green'</span></span><br><span class="javascript">          <span class="hljs-built_in">this</span>.fs = <span class="hljs-number">30</span></span><br>        }<br>      }<br>    })<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><h1 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h1><p><code>v-if  v-else  v-show</code></p><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"demo"</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- v-if, v-else做隐藏是通过标签移除</span><br><span class="hljs-comment">    v-show是通过样式隐藏，标签并未移除</span><br><span class="hljs-comment">    如果需要频繁切换 v-show 较好 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"ok"</span>&gt;</span>Success<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-else</span>&gt;</span>Fail<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">"ok"</span>&gt;</span>成功<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">"!ok"</span>&gt;</span>失败<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"ok=!ok"</span>&gt;</span>切换<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">new</span> Vue({</span><br><span class="javascript">      el: <span class="hljs-string">'#demo'</span>,</span><br>      data: {<br><span class="javascript">        ok: <span class="hljs-literal">false</span></span><br>      }<br>    })<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><h1 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h1><ul><li>列表显示<br>数组: v-for / index<br>对象: v-for / key</li><li>列表的更新显示<br>删除item，替换item</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"demo"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>测试：v-for 遍历数组<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"(p, index) in persons"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">"index"</span>&gt;</span><br>        {{index}}--{{p.name}}--{{p.age}}<br>        --<span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"deleteP(index)"</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        --<span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"updateP(index, {name:'Cat', age:10})"</span>&gt;</span>更新<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"addP({name:'Toby', age: 18})"</span>&gt;</span>添加<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>测试：v-for 遍历对象<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"(value, key) in persons[1]"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">"key"</span>&gt;</span><br>      {{value}}--{{key}}<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><br><span class="javascript">    <span class="hljs-comment">// vue本身只是监视了persons的改变，没有监视数组内部数据的改变</span></span><br><span class="javascript">    <span class="hljs-comment">// vue重写了数组中的一系列改变数组内部数据的方法（先调用原生，更新界面）=&gt; 数组内部改变，界面自动变化</span></span><br><span class="javascript">    <span class="hljs-keyword">new</span> Vue({</span><br><span class="javascript">      el: <span class="hljs-string">'#demo'</span>,</span><br>      data: {<br>        persons: [<br><span class="javascript">          { <span class="hljs-attr">name</span>: <span class="hljs-string">'Jack'</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span> },</span><br><span class="javascript">          { <span class="hljs-attr">name</span>: <span class="hljs-string">'Bob'</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">25</span> },</span><br><span class="javascript">          { <span class="hljs-attr">name</span>: <span class="hljs-string">'Tom'</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">23</span> },</span><br><span class="javascript">          { <span class="hljs-attr">name</span>: <span class="hljs-string">'Mary'</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">18</span> }</span><br>        ]<br>      },<br>      methods: {<br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">deleteP</span>(<span class="hljs-params">index</span>)</span> {</span><br><span class="javascript">          <span class="hljs-comment">// 删除persons中指定index的p</span></span><br><span class="javascript">          <span class="hljs-built_in">this</span>.persons.splice(index, <span class="hljs-number">1</span>)</span><br>        },<br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">updateP</span>(<span class="hljs-params">index, newP</span>)</span> {</span><br><span class="javascript">          <span class="hljs-comment">//并没有改变persons本身，数组内部发生了变化，但并没有调用变异方法，vue不会更新界面</span></span><br><span class="javascript">          <span class="hljs-comment">// this.persons[index] = newP</span></span><br><span class="javascript">          <span class="hljs-built_in">this</span>.persons.splice(index, <span class="hljs-number">1</span>, newP)</span><br><span class="javascript">          <span class="hljs-comment">// 增加一项</span></span><br><span class="javascript">          <span class="hljs-comment">// this.persons.splice(index, 0, newP)</span></span><br>        },<br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">addP</span>(<span class="hljs-params">newP</span>)</span> {</span><br><span class="javascript">          <span class="hljs-built_in">this</span>.persons.push(newP)</span><br>        }<br>      }<br>    })<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><ul><li>过滤与排序</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"demo2"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"searchName"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"(p, index) in filterPersons"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">" index"</span>&gt;</span><br>        {{index}}--{{p.name}}--{{p.age}}<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"setOrderType(1)"</span>&gt;</span>年龄升序<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"setOrderType(2)"</span>&gt;</span>年龄降序<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"setOrderType(0)"</span>&gt;</span>原本顺序<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">new</span> Vue({</span><br><span class="javascript">      el: <span class="hljs-string">"#demo2"</span>,</span><br>      data: {<br><span class="javascript">        searchName: <span class="hljs-string">''</span>,</span><br><span class="javascript">        orderType: <span class="hljs-number">0</span>, <span class="hljs-comment">//0表示原本顺序</span></span><br>        persons: [<br><span class="javascript">          { <span class="hljs-attr">name</span>: <span class="hljs-string">'Jack'</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span> },</span><br><span class="javascript">          { <span class="hljs-attr">name</span>: <span class="hljs-string">'Bob'</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">25</span> },</span><br><span class="javascript">          { <span class="hljs-attr">name</span>: <span class="hljs-string">'Tom'</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">23</span> },</span><br><span class="javascript">          { <span class="hljs-attr">name</span>: <span class="hljs-string">'Mary'</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">18</span> }</span><br>        ]<br>      },<br>      computed: {<br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">filterPersons</span>(<span class="hljs-params"></span>)</span> {</span><br><span class="javascript">          <span class="hljs-comment">// 取出相关的数据</span></span><br><span class="javascript">          <span class="hljs-keyword">const</span> { searchName, persons, orderType } = <span class="hljs-built_in">this</span></span><br><span class="javascript">          <span class="hljs-comment">// 最终需要显示的数组</span></span><br><span class="javascript">          <span class="hljs-keyword">let</span> fPersons</span><br><span class="javascript">          <span class="hljs-comment">// 对persons进行过滤</span></span><br><span class="javascript">          fPersons = persons.filter(<span class="hljs-function"><span class="hljs-params">p</span> =&gt;</span> p.name.indexOf(searchName) !== -<span class="hljs-number">1</span>)</span><br><br><span class="javascript">          <span class="hljs-comment">// 排序</span></span><br><span class="javascript">          <span class="hljs-keyword">if</span> (orderType !== <span class="hljs-number">0</span>) {</span><br><span class="javascript">            fPersons.sort(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">p1, p2</span>) </span>{ </span><br><span class="javascript">              <span class="hljs-comment">// sort() 返回负数p1在前，返回正数p2在前</span></span><br><span class="javascript">              <span class="hljs-comment">// 1表示升序，2表示降序</span></span><br><span class="javascript">              <span class="hljs-keyword">if</span> (orderType === <span class="hljs-number">2</span>) {</span><br><span class="javascript">                <span class="hljs-keyword">return</span> p2.age - p1.age</span><br>              }<br><span class="javascript">              <span class="hljs-keyword">if</span> (orderType === <span class="hljs-number">1</span>) {</span><br><span class="javascript">                <span class="hljs-keyword">return</span> p1.age - p2.age</span><br>              }<br>            })<br>          }<br><span class="javascript">          <span class="hljs-keyword">return</span> fPersons</span><br>        }<br>      },<br>      methods: {<br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">setOrderType</span>(<span class="hljs-params">orderType</span>)</span> {</span><br><span class="javascript">          <span class="hljs-built_in">this</span>.orderType = orderType</span><br>        }<br>      }<br>    })<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><h1 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h1><ul><li>绑定监听<br>v-on:xxx=”fun”<br>@xxx=”fun”<br>@xxx=”fun(参数)”<br>默认事件形参: event<br>隐含属性对象: $event</li><li>事件修饰符<br>.prevent : 阻止事件的默认行为 event.preventDefault()<br>.stop : 停止事件冒泡 event.stopPropagation()</li><li>按键修饰符<br>.keycode : 操作的是某个keycode值的健<br>.enter : 操作的是enter键</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"demo"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>1. 绑定监听<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"test1"</span>&gt;</span>test1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"test2('hello world')"</span>&gt;</span>test2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"test3"</span>&gt;</span>test3<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"test4(123, $event)"</span>&gt;</span>test4<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>2. 时间修饰符<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"width: 200px; height: 200px; background: red"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"test5"</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"width: 100px; height: 100px; background: blue"</span> @<span class="hljs-attr">click.stop</span>=<span class="hljs-string">"test6"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://cn.vuejs.org/"</span> @<span class="hljs-attr">click.prevent</span>=<span class="hljs-string">"test7"</span>&gt;</span>Vue官网<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>3. 案件修饰符<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> @<span class="hljs-attr">keyup.13</span>=<span class="hljs-string">"test8"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> @<span class="hljs-attr">keyup.enter</span>=<span class="hljs-string">"test8"</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">new</span> Vue({</span><br><span class="javascript">      el: <span class="hljs-string">"#demo"</span>,</span><br>      data: {<br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">test1</span>(<span class="hljs-params"></span>)</span> {</span><br><span class="javascript">          alert(<span class="hljs-string">'test1'</span>)</span><br>        },<br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">test2</span>(<span class="hljs-params">msg</span>)</span> {</span><br>          alert(msg)<br>        },<br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">test3</span>(<span class="hljs-params">event</span>)</span> {</span><br>          alert(event.target.innerHTML)<br>        },<br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">test4</span>(<span class="hljs-params">number, event</span>)</span> {</span><br><span class="javascript">          alert(number + <span class="hljs-string">'--'</span> + event.target.innerHTML)</span><br>        },<br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">test5</span>(<span class="hljs-params"></span>)</span> {</span><br><span class="javascript">          alert(<span class="hljs-string">'out'</span>)</span><br>        },<br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">test6</span>(<span class="hljs-params"></span>)</span> {</span><br><span class="javascript">          <span class="hljs-comment">// 停止事件冒泡</span></span><br><span class="javascript">          <span class="hljs-comment">// event.stopPropagation()</span></span><br><span class="javascript">          alert(<span class="hljs-string">'inner'</span>)</span><br>        },<br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">test7</span>(<span class="hljs-params"></span>)</span> {</span><br><span class="javascript">          <span class="hljs-comment">// 阻止事件的默认行为</span></span><br><span class="javascript">          <span class="hljs-comment">// event.preventDefault()</span></span><br><span class="javascript">          alert(<span class="hljs-string">'点击了'</span>)</span><br>        },<br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">test8</span>(<span class="hljs-params"></span>)</span> {</span><br><span class="javascript">          <span class="hljs-comment">// if (event.keyCode === 13)</span></span><br>          alert(event.target.value)<br>        }<br>      }<br>    })<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><h1 id="表单输入绑定"><a href="#表单输入绑定" class="headerlink" title="表单输入绑定"></a>表单输入绑定</h1><p>使用v-model(双向数据绑定)自动收集数据<br><code>text/textarea  checkbox  radio  select</code></p><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"demo"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"/xxx"</span> @<span class="hljs-attr">submit.prevent</span>=<span class="hljs-string">"handleSubmit"</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>用户名：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"username"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>密码：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"pwd"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>性别：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"radio"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"female"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"女"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"gender"</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"female"</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"radio"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"male"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"男"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"gender"</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"male"</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>爱好：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"basketball"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"bk"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"hobbit"</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"basketball"</span>&gt;</span>篮球<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"football"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"ft"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"hobbit"</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"football"</span>&gt;</span>足球<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"pingpang"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"pp"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"hobbit"</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"pingpang"</span>&gt;</span>乒乓<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>城市：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"cityId"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">""</span>&gt;</span>未选择<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">"city.id"</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"(city, index) in allCitys"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">"index"</span>&gt;</span>{{city.name}}<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>介绍：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">"10"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"description"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"注册"</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">new</span> Vue({</span><br><span class="javascript">      el: <span class="hljs-string">"#demo"</span>,</span><br>      data: {<br><span class="javascript">        username: <span class="hljs-string">''</span>,</span><br><span class="javascript">        pwd: <span class="hljs-string">''</span>,</span><br><span class="javascript">        gender: <span class="hljs-string">'女'</span>,</span><br><span class="javascript">        hobbit: [<span class="hljs-string">'bk'</span>, <span class="hljs-string">'ft'</span>],</span><br><span class="javascript">        allCitys: [{ <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">'北京'</span> }, { <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">'上海'</span> }, { <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">'深圳'</span> }],</span><br><span class="javascript">        cityId: <span class="hljs-string">'3'</span>,</span><br><span class="javascript">        description: <span class="hljs-string">''</span></span><br>      },<br>      methods: {<br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">handleSubmit</span>(<span class="hljs-params"></span>)</span> {</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.username, <span class="hljs-built_in">this</span>.pwd, <span class="hljs-built_in">this</span>.gender, <span class="hljs-built_in">this</span>.hobbit, <span class="hljs-built_in">this</span>.cityId, <span class="hljs-built_in">this</span>.description);</span><br>        }<br>      }<br>    })<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><h1 id="Vue实例的生命周期"><a href="#Vue实例的生命周期" class="headerlink" title="Vue实例的生命周期"></a>Vue实例的生命周期</h1><p><img src="/image/post/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="Vue生命周期"></p><ul><li>vue对象的生命周期<ol><li>初始化显示<ul><li>beforeCreate()</li><li>created()</li><li>beforeMount()</li><li>mounted()</li></ul></li><li>更新显示 this.xxx = value<ul><li>beforeUpdate()</li><li>updated()</li></ul></li><li>销毁vue实例: vm.$destroy()<ul><li>beforeDestroy()</li><li>destroyed()</li></ul></li></ol></li><li>常用的生命周期方法<br>mounted(): 发送ajax请求, 启动定时器等异步任务<br>beforeDestroy(): 做收尾工作, 如: 清除定时器</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"demo"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"destroyVM"</span>&gt;</span>destroy vm<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">"isShow"</span>&gt;</span>测试<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">new</span> Vue({</span><br><span class="javascript">      el: <span class="hljs-string">"#demo"</span>,</span><br>      data: {<br><span class="javascript">        isShow: <span class="hljs-literal">true</span></span><br>      },<br><br><span class="javascript">      <span class="hljs-comment">// 1. 初始化阶段</span></span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">beforeCreate</span>(<span class="hljs-params"></span>)</span> {</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'beforeCreate()'</span>)</span><br>      },<br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">created</span>(<span class="hljs-params"></span>)</span> {</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'created()'</span>)</span><br>      },<br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">beforeMount</span>(<span class="hljs-params"></span>)</span> {</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'beforeMount()'</span>)</span><br>      },<br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">mounted</span>(<span class="hljs-params"></span>)</span> { <span class="hljs-comment">//初始化显示之后立即调用(1次)</span></span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Mounted()'</span>)</span><br><span class="javascript">        <span class="hljs-built_in">this</span>.intervalId = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> {</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'------'</span>);</span><br><span class="javascript">          <span class="hljs-built_in">this</span>.isShow = !<span class="hljs-built_in">this</span>.isShow <span class="hljs-comment">//更新数据</span></span><br>        }, 1000)<br>      },<br><br><span class="javascript">      <span class="hljs-comment">// 2. 更新阶段</span></span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">beforeUpdate</span>(<span class="hljs-params"></span>)</span> {</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'beforeUpdate()'</span>)</span><br>      },<br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">updated</span>(<span class="hljs-params"></span>)</span> {</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'updated()'</span>)</span><br>      },<br><br><span class="javascript">      <span class="hljs-comment">// 3. 死亡阶段</span></span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">beforeDestroy</span>(<span class="hljs-params"></span>)</span> { <span class="hljs-comment">//死亡之前调用(1次)</span></span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'beforeDestroy()'</span>)</span><br><span class="javascript">        <span class="hljs-comment">// 清除定时器</span></span><br><span class="javascript">        <span class="hljs-built_in">clearInterval</span>(<span class="hljs-built_in">this</span>.intervalId)</span><br>      },<br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">destroyed</span>(<span class="hljs-params"></span>)</span> {</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'destroyed()'</span>)</span><br>      },<br><br>      methods: {<br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">destroyVM</span>(<span class="hljs-params"></span>)</span> {</span><br><span class="javascript">          <span class="hljs-built_in">this</span>.$destroy()</span><br>        }<br>      }<br>    })<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><h1 id="过渡与动画"><a href="#过渡与动画" class="headerlink" title="过渡与动画"></a>过渡与动画</h1><ol><li>vue动画的理解<br>操作css的trasition或animation<br>vue会给目标元素添加/移除特定的class</li><li>基本过渡动画的编码<ol><li>在目标元素外包裹<code>&lt;transition name="xxx"&gt;</code></li><li>定义class样式<ul><li>指定过渡样式: transition</li><li>指定隐藏时的样式: opacity/其它</li></ul></li></ol></li><li>过渡的类名<br>xxx-enter-active: 指定显示的transition<br>xxx-leave-active: 指定隐藏的transition<br>xxx-enter: 指定隐藏时的样式<br><img src="/image/post/Vue%E8%BF%87%E6%B8%A1.png" alt="Vue过渡"></li></ol><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Vue 过渡效果<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css">    <span class="hljs-comment">/* 显示/隐藏的过渡效果 */</span></span><br><span class="css">    <span class="hljs-selector-class">.xxx-enter-active</span>, <span class="hljs-selector-class">.xxx-leave-active</span> {</span><br>      transition: opacity 1s;<br>    }<br><br><span class="css">    <span class="hljs-comment">/* 隐藏时的样式 */</span></span><br><span class="css">    <span class="hljs-selector-class">.xxx-enter</span>, <span class="hljs-selector-class">.xxx-leave-to</span> {</span><br>      opacity: 0;<br>    }<br><br><span class="css">    <span class="hljs-comment">/* 显示的过渡效果 */</span></span><br><span class="css">    <span class="hljs-selector-class">.move-enter-active</span> {</span><br>      transition: all 1s;<br>    }<br><br><span class="css">    <span class="hljs-comment">/* 隐藏的过渡效果 */</span></span><br><span class="css">    <span class="hljs-selector-class">.move-leave-active</span> {</span><br>      transition: all 3s;<br>    }<br><br><span class="css">    <span class="hljs-comment">/* 隐藏时的样式 */</span></span><br><span class="css">    <span class="hljs-selector-class">.move-enter</span>, <span class="hljs-selector-class">.move-leave-to</span> {</span><br>      opacity: 0;<br>      transform: translateX(20px);<br>    }<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"demo"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"isShow = !isShow"</span>&gt;</span>toggle<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">transition</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"xxx"</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">"isShow"</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"demo2"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"isShow = !isShow"</span>&gt;</span>toggle<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">transition</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"move"</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">"isShow"</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">new</span> Vue({</span><br><span class="javascript">      el: <span class="hljs-string">"#demo"</span>,</span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {</span><br><span class="javascript">        <span class="hljs-keyword">return</span> {</span><br><span class="javascript">          isShow: <span class="hljs-literal">true</span></span><br>        }<br>      }<br>    })<br><span class="javascript">    <span class="hljs-keyword">new</span> Vue({</span><br><span class="javascript">      el: <span class="hljs-string">"#demo2"</span>,</span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> {</span><br><span class="javascript">        <span class="hljs-keyword">return</span> {</span><br><span class="javascript">          isShow: <span class="hljs-literal">true</span></span><br>        }<br>      }<br>    })<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Vue 动画<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css">    <span class="hljs-selector-class">.bounce-enter-active</span> {</span><br>      animation: bounce-in .5s;<br>    }<br><span class="css">    <span class="hljs-selector-class">.bounce-leave-active</span> {</span><br>      animation: bounce-in .5s reverse;<br>    }<br><br><span class="css">    <span class="hljs-keyword">@keyframes</span> bounce-in {</span><br>      0% {<br>        transform: scale(0);<br>      }<br>      50% {<br>        transform: scale(1.5);<br>      }<br>      100% {<br>        transform: scale(1);<br>      }<br>    }<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"example"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"show = !show"</span>&gt;</span>Toggle show<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">transition</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"bounce"</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"show"</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"display: inline-block"</span>&gt;</span>Lorem<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">new</span> Vue({</span><br><span class="javascript">      el: <span class="hljs-string">'#example'</span>,</span><br>      data: {<br><span class="javascript">        show: <span class="hljs-literal">true</span></span><br>      }<br>    })<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><h1 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h1><ol><li>理解过滤器<br>功能: 对要显示的数据进行特定格式化后再显示<br>注意: 并没有改变原本的数据, 可是产生新的对应的数据</li><li>编码<ol><li>定义过滤器<figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">Vue.filter(filterName, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value[,arg1,arg2,...]{</span></span><br><span class="hljs-function"><span class="hljs-params">  <span class="hljs-regexp">//</span> 进行一定的数据处理</span></span><br><span class="hljs-function"><span class="hljs-params">  <span class="hljs-keyword">return</span> newValue</span></span><br><span class="hljs-function"><span class="hljs-params">}</span>)</span><br></code></pre></div></td></tr></tbody></table></figure></li><li>使用过滤器<figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>{{myData | filterName}}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>{{myData | filterName(arg)}}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure></li></ol></li></ol><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"demo"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>显示格式化的日期时间<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{{date}}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>完整版：{{date | dateString}}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>年月日：{{date | dateString('YYYY-MM-DD')}}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>时分秒：{{date | dateString('HH:mm:ss')}}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.bootcdn.net/ajax/libs/moment.js/2.29.1/moment.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><br><span class="javascript">    <span class="hljs-comment">// 自定义过滤</span></span><br><span class="javascript">    Vue.filter(<span class="hljs-string">'dateString'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value, format = <span class="hljs-string">'YYYY-MM-DD HH:mm:ss'</span></span>) </span>{</span><br><span class="javascript">      <span class="hljs-keyword">return</span> moment(value).format(format)</span><br>    })<br><span class="javascript">    <span class="hljs-keyword">new</span> Vue({</span><br><span class="javascript">      el: <span class="hljs-string">"#demo"</span>,</span><br>      data: {<br><span class="javascript">        date: <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()</span><br>      }<br>    })<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><h1 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h1><h2 id="内置指令"><a href="#内置指令" class="headerlink" title="内置指令"></a>内置指令</h2><table><thead><tr><th align="left">常用内置指令</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">v-text :</td><td align="left">更新元素的 textContent</td></tr><tr><td align="left">v-html :</td><td align="left">更新元素的 innerHTML</td></tr><tr><td align="left">v-if :</td><td align="left">如果为 true, 当前标签才会输出到页面</td></tr><tr><td align="left">v-else:</td><td align="left">如果为 false, 当前标签才会输出到页面</td></tr><tr><td align="left">v-show :</td><td align="left">通过控制 display 样式来控制显示/隐藏</td></tr><tr><td align="left">v-for :</td><td align="left">遍历数组/对象</td></tr><tr><td align="left">v-on :</td><td align="left">绑定事件监听, 一般简写为@</td></tr><tr><td align="left">v-bind :</td><td align="left">强制绑定解析表达式, 可以省略 v-bind, 简写为一个冒号</td></tr><tr><td align="left">v-model :</td><td align="left">双向数据绑定</td></tr><tr><td align="left">ref :</td><td align="left">指定唯一标识, vue 对象通过$els 属性访问这个元素对象</td></tr><tr><td align="left">v-cloak :</td><td align="left">防止闪现, 与 css 配合: [v-cloak] { display: none }</td></tr></tbody></table><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>ref 和 v-cloak 指令<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css">    <span class="hljs-selector-attr">[v-cloak]</span> {</span><br>      display: none;<br>    }<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"demo"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"content"</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"hint"</span>&gt;</span>提示<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 解析之前存在，解析之后没有 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-cloak</span>&gt;</span>{{msg}}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><br><span class="javascript">    alert(<span class="hljs-string">'----'</span>)</span><br><span class="javascript">    <span class="hljs-keyword">new</span> Vue({</span><br><span class="javascript">      el: <span class="hljs-string">"#demo"</span>,</span><br>      data: {<br><span class="javascript">        msg: <span class="hljs-string">'测试'</span></span><br>      },<br>      methods: {<br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">hint</span>(<span class="hljs-params"></span>)</span> {</span><br><span class="javascript">          alert(<span class="hljs-built_in">this</span>.$refs.content.textContent)</span><br>        }<br>      }<br>    })<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 1. 注册全局指令</span><br>Vue.directive(<span class="hljs-string">'my-directive'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">el, binding</span>) </span>{<br>  el.innerHTML = binding.value.toupperCase()<br>})<br><br><span class="hljs-comment">// 2. 注册局部指令</span><br>directives: {<br>  <span class="hljs-string">'lower-text'</span>(el, binding) {<br>    el.textContent = binding.value.toLowerCase()<br>  }<br>}<br><br><span class="hljs-comment">// 3. 使用指令</span><br>v-my-directive=<span class="hljs-string">'xxx'</span><br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 需求: 自定义2个指令</span><br><span class="hljs-comment">  1. 功能类型于v-text, 但转换为全大写</span><br><span class="hljs-comment">  2. 功能类型于v-text, 但转换为全小写 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"demo1"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-upper-text</span>=<span class="hljs-string">"msg1"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-lower-text</span>=<span class="hljs-string">"msg1"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"demo2"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-upper-text</span>=<span class="hljs-string">"msg2"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-lower-text</span>=<span class="hljs-string">"msg2"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><br><span class="javascript">    <span class="hljs-comment">// 定义全局指令</span></span><br><span class="javascript">    <span class="hljs-comment">// el: 指令属性所在的标签对象</span></span><br><span class="javascript">    <span class="hljs-comment">// binding: 包含指令相关信息数据的对象</span></span><br><span class="javascript">    Vue.directive(<span class="hljs-string">'upper-text'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">el, binding</span>) </span>{</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(el, binding)</span><br>      el.textContent = binding.value.toUpperCase()<br>    })<br><span class="javascript">    <span class="hljs-keyword">new</span> Vue({</span><br><span class="javascript">      el: <span class="hljs-string">"#demo1"</span>,</span><br>      data: {<br><span class="javascript">        msg1: <span class="hljs-string">'Hello World'</span></span><br>      },<br><span class="javascript">      directives: { <span class="hljs-comment">//注册局部指令: 只在当前vm管理范围内有效</span></span><br><span class="javascript">        <span class="hljs-string">'lower-text'</span>(el, binding) {</span><br>          el.textContent = binding.value.toLowerCase()<br>        }<br>      }<br>    })<br><span class="javascript">    <span class="hljs-keyword">new</span> Vue({</span><br><span class="javascript">      el: <span class="hljs-string">"#demo2"</span>,</span><br>      data: {<br><span class="javascript">        msg2: <span class="hljs-string">'I Got It!'</span></span><br>      }<br>    })<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// vue-mine.js</span><br><span class="hljs-comment">// vue的插件库</span><br>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>  <span class="hljs-comment">// 需要向外暴露的插件对象</span><br>  <span class="hljs-keyword">const</span> MyPlugin = {}<br><br>  <span class="hljs-comment">// 插件对象必须有一个install()</span><br>  MyPlugin.install = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">Vue, options</span>) </span>{<br>    <span class="hljs-comment">// 1. 添加全局方法或属性</span><br>    Vue.myGlobalMethod = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Vue函数对象的方法myGlobalMethod()'</span>)<br>    }<br><br>    <span class="hljs-comment">// 2. 添加全局资源</span><br>    Vue.directive(<span class="hljs-string">'my-directive'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">el, binding</span>) </span>{<br>      el.textContent = binding.value.toUpperCase()<br>    })<br><br>    <span class="hljs-comment">// 3. 添加实例方法</span><br>    Vue.prototype.$myMethod = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Vue实例对象的方法$myMethod()'</span>)<br>    }<br>  }<br><br>  <span class="hljs-comment">// 向外暴露</span><br>  <span class="hljs-built_in">window</span>.MyPlugin = MyPlugin<br>})()<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"demo"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-my-directive</span>=<span class="hljs-string">"msg"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../js/vue.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"./vue-mine.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><br><span class="javascript">    <span class="hljs-comment">// 声明使用插件</span></span><br><span class="javascript">    Vue.use(MyPlugin) <span class="hljs-comment">//内部会执行MuPlugin.install(Vue)</span></span><br>    Vue.myGlobalMethod()<br><br><span class="javascript">    <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> Vue({</span><br><span class="javascript">      el: <span class="hljs-string">"#demo"</span>,</span><br>      data: {<br><span class="javascript">        msg: <span class="hljs-string">'Hello World'</span></span><br>      }<br>    })<br>    vm.$myMethod()<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>web前端学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>front-end</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web前端学习笔记12——数据库</title>
    <link href="/posts/b1456509.html"/>
    <url>/posts/b1456509.html</url>
    
    <content type="html"><![CDATA[<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h2 id="关系型数据库-RDBMS"><a href="#关系型数据库-RDBMS" class="headerlink" title="关系型数据库 RDBMS"></a>关系型数据库 RDBMS</h2><p>可以理解为Excel<br>里面都是表，只是用程序代码来操作表格里的数据</p><ul><li>CS模型(client/server)<br>MiaraDB<br>PostgreSQL<br>Office Access<br>SQLServer<br>OceanDB<br>Oracle<br>  MySQL</li><li>非CS模型<br>SQLite 10亿行，4T<br>  sqlite把数据存在一个文件里，通过sqlite提供的相关函数去读取</li></ul><h2 id="非关系型数据库"><a href="#非关系型数据库" class="headerlink" title="非关系型数据库"></a>非关系型数据库</h2><ul><li>文档型数据库(MongoDB, PunchDB)<br><code>JOSN {name: 'z', age: 18, foo: 8}, {name: 'a', age: 28}</code></li><li>缓存型数据库，KV数据库，Key, Value<br>Redis<br>redis.get(‘xxx’)<br>redis.push(‘yyy’, ‘333’)</li><li>日志型数据库</li></ul><h1 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h1><ol><li>select 表头关键字（展示哪几列）<br>&nbsp;&nbsp;&nbsp;&nbsp;<code>aaa * 10 as bbb</code>，xxx是新建列的名称；若有空格，用’’包起来；关键字distinct，不重复</li><li>from 文件夹</li><li>where 筛选条件</li></ol><ul><li>运算符<ul><li>and or not</li><li>in<br><code>state = 'VA' or state = 'GA' or state = 'FL'</code>和<code>state in ('VA', 'FL', 'GA')</code>等价</li><li>between<br><code>points &gt;= 1000 and points &lt;= 300</code>和<code>points between 1000 and 3000</code>等价</li><li>like<br><code>last_name like '%y'</code> 筛选姓最后一个字母是y的人<br>% 任意字符数&nbsp;&nbsp;&nbsp;&nbsp;_ 单字符</li><li>regexp 正则表达式<figure class="highlight md"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs md">^       开头<br>$       结尾<br>|       逻辑或<br>[abc]   abc其中一个或多个<br>[a-f]   a-f中一个或多个<br></code></pre></div></td></tr></tbody></table></figure>详情见<a href="./468b9935.html#%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F">这里</a></li><li>is null 为空的单元格</li></ul></li></ul><ol start="4"><li>ordered by 排序关键字<br>在关系型数据库中，每个表格都有一个主键列，这一列中的值能够唯一识别表里的记录<br>关键字desc 降序排列</li><li>limit<br><code>limit 10</code> 只展示前10项<br><code>limit 6，3</code> 略过前6项，展示3项</li></ol><h1 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h1><p>内连接join</p><figure class="highlight sql"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">from a<br>join b on a.id = b.id<br><span class="hljs-comment">-- 用相同id来合并a和b</span><br><span class="hljs-comment">-- join b using(id)</span><br>也可用using来连接，多个连接条件中间加,<br><br>from employees e<br>join employees m<br>  on e.reports_to = m.employee_id<br><span class="hljs-comment">-- 自连接 </span><br></code></pre></div></td></tr></tbody></table></figure><p>外连接left join/right join</p><figure class="highlight sql"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">from c<br>left join o on c.id = o.id<br><span class="hljs-comment">-- 所有左表的记录被返回，不管条件正确还是错误</span><br><span class="hljs-comment">-- right join则是右表都被返回</span><br></code></pre></div></td></tr></tbody></table></figure><p>natural join<br>cross join<br>union 合并多个查询的结果</p><figure class="highlight sql"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">select...<br>from...<br>where...<br>union<br>select...<br>from...<br>where...<br></code></pre></div></td></tr></tbody></table></figure><h1 id="行"><a href="#行" class="headerlink" title="行"></a>行</h1><figure class="highlight sql"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- 插入单行</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> xxx(addr, n, who)<br><span class="hljs-keyword">values</span>(<span class="hljs-keyword">default</span>, <span class="hljs-number">1</span>, <span class="hljs-string">'xxx'</span>)<br><br><span class="hljs-comment">-- 插入多行</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> xxx(<span class="hljs-keyword">name</span>)<br><span class="hljs-keyword">values</span>(<span class="hljs-string">'wwr'</span>),(<span class="hljs-string">'tn'</span>),(<span class="hljs-string">'io'</span>)<br><br><span class="hljs-comment">-- 复制一张表</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> orders_archived <span class="hljs-keyword">as</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> orders<br><br><span class="hljs-comment">-- 更新行</span><br><span class="hljs-keyword">update</span> salary<br> <span class="hljs-keyword">set</span> gender = f<br><span class="hljs-keyword">where</span> <span class="hljs-keyword">id</span> &gt; <span class="hljs-number">10</span><br><br><span class="hljs-comment">-- 删除行</span><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> xxx<br>where...<br></code></pre></div></td></tr></tbody></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><ul><li>基本函数<br><code>max() min() avg() sum() count()</code> </li><li><a href="https://www.w3school.com.cn/sql/sql_groupby.asp">group by</a> 分组</li><li><a href="https://www.w3school.com.cn/sql/sql_having.asp">having</a></li><li>case<figure class="highlight sql"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- 简单case函数</span><br>case gender<br>  when '1' then 'f'<br>  when '2' then 'm'<br>  else 'NaN' <span class="hljs-keyword">end</span><br><br><span class="hljs-comment">-- case搜索函数</span><br><span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> gender = <span class="hljs-string">'1'</span> <span class="hljs-keyword">then</span> <span class="hljs-string">'f'</span><br>     <span class="hljs-keyword">when</span> gender = <span class="hljs-string">'2'</span> <span class="hljs-keyword">then</span> <span class="hljs-string">'m'</span><br>     <span class="hljs-keyword">else</span> <span class="hljs-string">'NaN'</span> <span class="hljs-keyword">end</span><br><br><span class="hljs-comment">-- case函数只返回第一个符合条件的值，剩下的case部分将会被自动忽略</span><br><span class="hljs-comment">--下面这段sql，无法得到“第二类”这个结果</span><br><span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> col_1 <span class="hljs-keyword">in</span> (<span class="hljs-string">'a'</span>,<span class="hljs-string">'b'</span>) <span class="hljs-keyword">then</span> <span class="hljs-string">'第一类'</span><br>     <span class="hljs-keyword">when</span> col_1 <span class="hljs-keyword">in</span> (<span class="hljs-string">'a'</span>) <span class="hljs-keyword">then</span> <span class="hljs-string">'第二类'</span><br>     <span class="hljs-keyword">else</span> <span class="hljs-string">'其他'</span> <span class="hljs-keyword">end</span><br></code></pre></div></td></tr></tbody></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>web前端学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>front-end</tag>
      
      <tag>Database</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web前端学习笔记11——NodeJS</title>
    <link href="/posts/c642559f.html"/>
    <url>/posts/c642559f.html</url>
    
    <content type="html"><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><ul><li>环境变量（windows系统中变量）<br>当我们在命令行窗口打开一个文件，或调用一个程序时<br>系统会首先在当前目录下寻找文件程序，如果找到了则直接打开<br>如果没有找到则会依次到环境变量path的路径中寻找，直到找到为止<br>如果没找到则报错<br>所以我们可以将一些经常需要访问的程序和文件的路径添加到path中，这样我们就可以在任意位置来访问这些文件和程序了</li><li>进程和线程<br>进程就是一个一个的工作计划。<br>线程是计算机中最小的计量单位，负责执行进程中的程序。</li></ul><p><strong>JS是单线程，但是在后台拥有一个I/O线程池。</strong></p><h1 id="node-js简介"><a href="#node-js简介" class="headerlink" title="node.js简介"></a>node.js简介</h1><p>Node.js是一个能够在服务器端运行JavaScript的开放源代码、跨平台JavaScript运行环境。<br>Node采用Google开发的V8引擎运行js代码，使用<strong>事件驱动</strong>、<strong>非阻塞</strong>和<strong>异步I/O模型</strong>等技术来提高性能，可优化应用程序的传输量和规模。</p><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p><a href="http://nodejs.cn/api/modules.html">CommonJS模块</a><br>具体例子可见<a href="./383ae588.html">笔记8</a></p><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><ul><li>CommonJS的包规范由包结构和包描述文件两个部分组成。</li></ul><p>包结构：用于组织包中的各种文件<br>包实际上就是一个压缩文件，解压以后还原为目录。符合规范的目录，应该包含如下文件：</p><figure class="highlight md"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs md">– package.json  描述文件<br>– bin           可执行二进制文件<br>– lib           js代码<br>– doc           文档<br>– test          单元测试<br></code></pre></div></td></tr></tbody></table></figure><p>包描述文件：描述包的相关信息，以供外部读取分析<br>包描述文件用于表达非代码相关的信息，它是一个JSON格式的文件 – package.json，位于包的根目录下，是包的重要组成部分。</p><h2 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h2><p>NPM(Node Package Manager)<br>对于Node而言，NPM帮助其完成了第三方模块的发布、安装和依赖等。借助NPM，Node与第三方模块之间形成了很好的一个生态系统。</p><table><thead><tr><th align="left">指令</th><th align="left">操作</th></tr></thead><tbody><tr><td align="left">npm –v</td><td align="left">查看npm的版本 包名</td></tr><tr><td align="left">npm r/remove 包名</td><td align="left">删除一个模块</td></tr><tr><td align="left">npm i 包名 –save</td><td align="left">安装包并添加到依赖中</td></tr><tr><td align="left">npm install</td><td align="left">下载当前项目所依赖的包</td></tr><tr><td align="left">npm i 包名 –g</td><td align="left">全局安装包（全局安装的包一般都是一些工具）</td></tr><tr><td align="left">npm i 文件路径</td><td align="left">从本地安装</td></tr><tr><td align="left">npm i 包名 –registry=地址</td><td align="left">从镜像源安装</td></tr><tr><td align="left">npm config set registry 地址</td><td align="left">设置镜像源</td></tr></tbody></table><p>通过npm下载的包都放到node_modules文件夹中。<br>通过npm下载的包，直接通过包名引入即可。<br>node在使用模块名字来引入模块时，它会首先在当前目录的node_modules中寻找是否含有该模块，如果有则直接使用。<br>如果没有则去上一级目录的node_modules中寻找，如果有则直接使用。<br>如果没有则再去上一级目录寻找，直到找到为止。<br>直到找到磁盘的根目录，如果依然没有，则报错。</p><h1 id="Buffer（缓冲区）"><a href="#Buffer（缓冲区）" class="headerlink" title="Buffer（缓冲区）"></a>Buffer（缓冲区）</h1><p><a href="http://nodejs.cn/api/buffer.html#buffer">Buffer 文档</a></p><ol><li>Buffer的结构和数组很像，操作的方法也和数组类似</li><li>数组中不能存储二进制的文件，而buffer就是专门用来存储二进制数据</li><li>使用buffer不需要引入模块，直接使用即可</li><li>在buffer中存储的都是二进制数据，但是在显示都是以16进制的形式显示。<br>buffer中每一个元素的范围是从 00 - ff / 0 - 255 / 00000000 - 11111111<br>buffer中的一个元素，占用内存一个字节(byte)</li></ol><ul><li>使用Buffer保存字符串<figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> str = <span class="hljs-string">"Hello 前端"</span> <br><span class="hljs-keyword">const</span> buf = Buffer.from(str)<br><span class="hljs-comment">// 使用Buffer保存字符串</span><br><br><span class="hljs-built_in">console</span>.log(buf.length)<br><span class="hljs-comment">// 占用内存的大小</span><br><span class="hljs-comment">// 12(5+1+3*2)</span><br><br><span class="hljs-built_in">console</span>.log(str.length) <br><span class="hljs-comment">//字符串的长度</span><br><span class="hljs-comment">// 8</span><br><br><span class="hljs-built_in">console</span>.log(buf)<br><span class="hljs-comment">// Buffer(12) [72, 101, 108, 108, 111, 32, 229, 137, 141, 231, 171, 175]</span><br><br><span class="hljs-keyword">const</span> buf2 = Buffer.from(<span class="hljs-string">'我是文本'</span>)<br><span class="hljs-built_in">console</span>.log(buf2.toString()) <span class="hljs-comment">//我是文本</span><br><span class="hljs-comment">// buf.toString() 将缓冲区中的数据转换为字符串</span><br></code></pre></div></td></tr></tbody></table></figure></li><li>创建指定大小的Buffer对象<figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> buf = Buffer.alloc(<span class="hljs-number">10</span>)<br><span class="hljs-comment">// 创建一个长度为 10、以零填充的 Buffer</span><br><br>buf[<span class="hljs-number">0</span>] = <span class="hljs-number">255</span><br><span class="hljs-comment">// 会转换成16进制 ff</span><br><br>buf[<span class="hljs-number">10</span>] = <span class="hljs-number">1</span> <span class="hljs-comment">//不会有改变</span><br><span class="hljs-comment">// Buffer的大小一旦确定，则不能修改</span><br><span class="hljs-comment">// Buffer实际上是对底层内存的直接操作</span><br><br>buf[<span class="hljs-number">1</span>] = <span class="hljs-number">256</span> <span class="hljs-comment">//0</span><br>buf[<span class="hljs-number">2</span>] = <span class="hljs-number">556</span> <span class="hljs-comment">//44</span><br><span class="hljs-comment">// 会舍弃8位之前的数字</span><br><span class="hljs-comment">// 556 = 0b1000101100，后8位为0b00101100 = 0x44</span><br><br>consol.log(buf[<span class="hljs-number">0</span>]) <span class="hljs-comment">//255</span><br><span class="hljs-comment">//只要数字在控制台或页面输出一定是10进制</span><br>consol.log(buf[<span class="hljs-number">0</span>].toString(<span class="hljs-number">2</span>)) <span class="hljs-comment">//11111111</span><br><span class="hljs-comment">//转换成别的进制</span><br><br><span class="hljs-keyword">const</span> buf2 = Buffer.allocUnsafe(<span class="hljs-number">10</span>)<br><span class="hljs-comment">// 新创建的 Buffer 的内容是未知的，可能包含敏感数据(不清空数据)</span><br></code></pre></div></td></tr></tbody></table></figure></li></ul><h1 id="fs（文件系统）"><a href="#fs（文件系统）" class="headerlink" title="fs（文件系统）"></a>fs（文件系统）</h1><p><a href="http://nodejs.cn/api/fs.html">fs 文档</a><br>fs(File System)，文件系统。简单来说就是通过Node来操作系统中的文件。<br>服务器的本质就是将本地的文件发送给远程的客户端。</p><ol><li>要使用fs模块，首先需要对其进行加载 <code>const fs = require("fs")</code></li><li>fs模块中所有的操作都有两种形式可供选择，同步(Sync)和异步(callback)。<br>同步文件系统会阻塞程序的执行，也就是除非操作完毕，否则不会向下执行代码。<br>异步文件系统不会阻塞程序的执行，而是在操作完成时，通过回调函数将结果返回。</li></ol><h2 id="同步文件"><a href="#同步文件" class="headerlink" title="同步文件"></a>同步文件</h2><h3 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h3><ol><li>打开文件<figure class="highlight md"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs md">fs.openSync(path[, flags, mode])<br><span class="hljs-bullet">-</span> path 要打开文件的路径<br><span class="hljs-bullet">-</span> flags 打开文件要做的操作的类型<br><span class="hljs-code">    r 只读的</span><br><span class="hljs-code">    w 可写的</span><br><span class="hljs-code">- mode 设置文件的操作权限，一般不传</span><br><span class="hljs-code">该方法会返回一个文件的描述符作为结果，可以通过该描述符来对文件进行各种操作</span><br></code></pre></div></td></tr></tbody></table></figure></li><li>向文件中写入内容<figure class="highlight md"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs md">fs.writeSync(fd, string[, position[, encoding]])<br><span class="hljs-bullet">-</span> fd 文件的描述符，通过openSync()获取<br><span class="hljs-bullet">-</span> string 要写入的内容<br><span class="hljs-bullet">-</span> position 写入的起始位置<br><span class="hljs-bullet">-</span> encoding 写入的编码，默认utf-8<br></code></pre></div></td></tr></tbody></table></figure></li><li>保存并关闭文件<figure class="highlight md"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs md">fs.closeSync(fd)<br><span class="hljs-bullet">-</span> fd 要关闭文件的描述符<br></code></pre></div></td></tr></tbody></table></figure></li></ol><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>)<br><br><span class="hljs-comment">// 打开文件</span><br><span class="hljs-keyword">var</span> fd = fs.openSync(<span class="hljs-string">'hello.txt'</span>, <span class="hljs-string">'w'</span>)<br><span class="hljs-comment">// 向文件中写入内容</span><br>fs.writeSync(fd, <span class="hljs-string">'今天天气真好。'</span>, <span class="hljs-number">2</span>)<br><span class="hljs-comment">// 关闭文件</span><br>fs.closeSync(fd)<br></code></pre></div></td></tr></tbody></table></figure><h3 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h3><p><code>fs.readSync(fd, buffer, [options])</code></p><h2 id="异步文件"><a href="#异步文件" class="headerlink" title="异步文件"></a>异步文件</h2><h3 id="写入-1"><a href="#写入-1" class="headerlink" title="写入"></a>写入</h3><ol><li>打开文件<figure class="highlight md"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs md">fs.open(path[, flags[, mode]], callback)<br>异步调用的方法，结果都是通过回调函数的参数返回的<br>回调函数两个参数<br>err 错误对象，如果没有错误则为null<br>fd 文件的描述符<br></code></pre></div></td></tr></tbody></table></figure></li><li>异步写入一个文件<figure class="highlight md"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs md">fs.write(fd, string[, position[, encoding]], callback)<br></code></pre></div></td></tr></tbody></table></figure></li><li>关闭文件<figure class="highlight md"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs md">fs.close(fd, callback)<br></code></pre></div></td></tr></tbody></table></figure></li></ol><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>)<br><br><span class="hljs-comment">// 打开文件</span><br>fs.open(<span class="hljs-string">'hello2.txt'</span>, <span class="hljs-string">'w'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, fd</span>) </span>{<br>  <span class="hljs-comment">// 判断是否出错</span><br>  <span class="hljs-keyword">if</span> (!err) {<br>    <span class="hljs-comment">// 如果没有出错，则对文件进行写入操作</span><br>    fs.write(fd, <span class="hljs-string">'这是异步写入的内容'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) </span>{<br>      <span class="hljs-keyword">if</span> (!err) {<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'写入成功'</span>)<br>      }<br>      <span class="hljs-comment">// 关闭文件</span><br>      fs.close(fd, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) </span>{<br>        <span class="hljs-keyword">if</span> (!err) {<br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'文件已关闭'</span>)<br>        }<br>      })<br>    })<br>  } <span class="hljs-keyword">else</span> {<br>    <span class="hljs-built_in">console</span>.log(err)<br>  }<br>})<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'程序向下执行'</span>)<br></code></pre></div></td></tr></tbody></table></figure><h3 id="读取-1"><a href="#读取-1" class="headerlink" title="读取"></a>读取</h3><p><code>fs.read(fd, [options,] callback)</code></p><h2 id="简单文件"><a href="#简单文件" class="headerlink" title="简单文件"></a>简单文件</h2><h3 id="写入-2"><a href="#写入-2" class="headerlink" title="写入"></a>写入</h3><figure class="highlight md"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs md">fs.writeFile(file, data[, options], callback)<br>fs.writeFileSync(file, data[, options])<br><span class="hljs-bullet">  -</span> file 要操作的文件路径<br><span class="hljs-bullet">  -</span> data 要写入的数据，可以是String或BUffer<br><span class="hljs-bullet">  -</span> options 选项，可以对写入进行一些设置<br><span class="hljs-bullet">    -</span> encoding <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span></span> | <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">null</span>&gt;</span></span> 默认值: 'utf8'<br><span class="hljs-bullet">    -</span> mode <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">integer</span>&gt;</span></span> 默认值: 0o666<br><span class="hljs-bullet">    -</span> flag <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span></span> 默认值: 'w'<br><span class="hljs-code">      r 只读  w 可写  a 追加</span><br><span class="hljs-code">  - callback 当写入完成以后执行的函数</span><br></code></pre></div></td></tr></tbody></table></figure><p><a href="http://nodejs.cn/api/fs.html#fs_file_system_flags">flag 标志</a></p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>)<br><br><span class="hljs-comment">// 路径或者改为 C:/Users/fe/Desktop/nodejs/hello3.txt</span><br>fs.writeFile(<span class="hljs-string">'C:\\Users\\fe\\Desktop\\nodejs\\hello3.txt'</span>, <span class="hljs-string">'这是通过writeFile写入的内容'</span>, { <span class="hljs-attr">flag</span>: <span class="hljs-string">"w"</span> }, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) </span>{<br>  <span class="hljs-keyword">if</span> (!err) {<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'写入成功'</span>)<br>  } <span class="hljs-keyword">else</span> {<br>    <span class="hljs-built_in">console</span>.log(err)<br>  }<br>})<br></code></pre></div></td></tr></tbody></table></figure><h3 id="读取-2"><a href="#读取-2" class="headerlink" title="读取"></a>读取</h3><figure class="highlight md"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs md">fs.readFile(path[, options], callback)<br>fs.readFileSync(path[, options])<br><span class="hljs-bullet">  -</span> path 要读取的文件的路径<br><span class="hljs-bullet">  -</span> options  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Object</span>&gt;</span></span> | <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span></span><br><span class="hljs-bullet">    -</span> encoding <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span></span> | <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">null</span>&gt;</span></span> 默认值: null<br><span class="hljs-bullet">    -</span> flag <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span></span> 默认值: 'r'<br><span class="hljs-bullet">  -</span> callback 回调函数，通过回调函数将读取到内容返回(err, data)<br><span class="hljs-code">    err 错误对象</span><br><span class="hljs-code">    data 读取到的数据，会返回一个Buffer</span><br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>)<br>fs.readFile(<span class="hljs-string">'a.jpg'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, data</span>) </span>{<br>  <span class="hljs-keyword">if</span> (!err) {<br>    <span class="hljs-comment">// 将data写入到文件中</span><br>    fs.writeFile(<span class="hljs-string">'hello.jpg'</span>, data, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) </span>{<br>      <span class="hljs-keyword">if</span> (!err) {<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'写入成功！'</span>)<br>      }<br>    })<br>  }<br>})<br><span class="hljs-comment">// 实现了复制操作</span><br></code></pre></div></td></tr></tbody></table></figure><h2 id="流式文件"><a href="#流式文件" class="headerlink" title="流式文件"></a>流式文件</h2><h3 id="写入-3"><a href="#写入-3" class="headerlink" title="写入"></a>写入</h3><p>同步、异步、简单文件的写入都不适合大文件的写入，性能较差，容易导致内存溢出。</p><figure class="highlight md"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs md">首先需要创建一个Writable对象<br>  fs.createWriteStream(path[, options])<br><span class="hljs-bullet">    -</span> path 文件路径<br><span class="hljs-bullet">    -</span> options {encoding:"",mode:"",flag:""}<br>打开了Writable文件流，就可以使用write()方法来写入它<br>写入完成后，再调用end()方法来关闭流<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>)<br><br><span class="hljs-comment">// 创建一个可写流</span><br><span class="hljs-keyword">var</span> ws = fs.createWriteStream(<span class="hljs-string">'hello4.txt'</span>)<br><span class="hljs-comment">// 可以通过监听流的open和close事件来监听流的打开和关闭</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">on(事件字符串, 回调函数)</span><br><span class="hljs-comment">  - 可以为对象绑定一个事件</span><br><span class="hljs-comment">once(事件字符串, 回调函数)</span><br><span class="hljs-comment">  - 可以为对象绑定一个一次性的事件，该事件将会在触发一次以后自动失效</span><br><span class="hljs-comment">*/</span><br>ws.once(<span class="hljs-string">'open'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'流打开了'</span>)<br>})<br>ws.once(<span class="hljs-string">'close'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'流关闭了'</span>)<br>})<br><br><span class="hljs-comment">// 通过ws向文件中输出内容</span><br>ws.write(<span class="hljs-string">'通过可写流写入文件的内容'</span>)<br>ws.write(<span class="hljs-string">'今天天气真好'</span>)<br>ws.write(<span class="hljs-string">'HELLO'</span>)<br>ws.write(<span class="hljs-string">'WORLD'</span>)<br><br><span class="hljs-comment">// 关闭流</span><br>ws.close()<br><span class="hljs-comment">// ws.end()</span><br></code></pre></div></td></tr></tbody></table></figure><h3 id="读取-3"><a href="#读取-3" class="headerlink" title="读取"></a>读取</h3><p>流式文件读取也适用于一些比较大的文件，可以分多次将文件读取到内容中</p><figure class="highlight md"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs md">首先需要创建一个Readable流对象<br>  fs.createReadStream(path[, options])<br><span class="hljs-bullet">    -</span> path 文件路径<br><span class="hljs-bullet">    -</span> options {encoding:"",mode:"",flag:""}<br>打开Readable文件流以后，可以通过readable事件和read()请求，或通过data事件处理程序从它读出。<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>)<br><br><span class="hljs-comment">// 创建一个可读流</span><br><span class="hljs-keyword">var</span> rs = fs.createReadStream(<span class="hljs-string">'ABC.mp3'</span>)<br><span class="hljs-comment">// 创建一个可写流</span><br><span class="hljs-keyword">var</span> ws = fs.createWriteStream(<span class="hljs-string">'123.mp3'</span>)<br><br><span class="hljs-comment">// 监听流的开启和关闭</span><br>rs.once(<span class="hljs-string">'open'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'可读流打开了'</span>)<br>})<br>rs.once(<span class="hljs-string">'close'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'可读流关闭了'</span>)<br>  <span class="hljs-comment">// 数据读取完毕，关闭可写流</span><br>  ws.end()<br>})<br>ws.once(<span class="hljs-string">'open'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'可写流打开了'</span>)<br>})<br>ws.once(<span class="hljs-string">'close'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'可写流关闭了'</span>)<br>})<br><br><span class="hljs-comment">// 如果要读取一个可读流中的数据，必须要为可读流绑定一个data事件，data事件绑定文笔，它会自动开始读取数据</span><br>rs.on(<span class="hljs-string">'data'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>{<br>  <span class="hljs-comment">// console.log(data)</span><br>  <span class="hljs-comment">// 将读取到的数据写入到可写流中</span><br>  ws.write(data)<br>})<br><span class="hljs-comment">// 复制一个大文件</span><br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 另一种写法</span><br><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>)<br><br><span class="hljs-comment">// 创建一个可读流</span><br><span class="hljs-keyword">var</span> rs = fs.createReadStream(<span class="hljs-string">'ABC.mp3'</span>)<br><span class="hljs-comment">// 创建一个可写流</span><br><span class="hljs-keyword">var</span> ws = fs.createWriteStream(<span class="hljs-string">'456.mp3'</span>)<br><br><span class="hljs-comment">// 监听流的开启和关闭</span><br>rs.once(<span class="hljs-string">'open'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'可读流打开了'</span>)<br>})<br>rs.once(<span class="hljs-string">'close'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'可读流关闭了'</span>)<br>})<br>ws.once(<span class="hljs-string">'open'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'可写流打开了'</span>)<br>})<br>ws.once(<span class="hljs-string">'close'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'可写流关闭了'</span>)<br>})<br><br><span class="hljs-comment">// pipe()可以将可读流中的内容，直接俄输出到可写流中</span><br>rs.pipe(ws)<br></code></pre></div></td></tr></tbody></table></figure><h2 id="其它方法"><a href="#其它方法" class="headerlink" title="其它方法"></a>其它方法</h2><ul><li><p>检查一个文件是否存在<br><code>fs.existsSync(path)</code></p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> isExists = fs.existsSync(<span class="hljs-string">'a.mp3'</span>)<br><span class="hljs-built_in">console</span>.log(isExists)<br><span class="hljs-comment">// 存在输出 true，不存在输出 false</span><br></code></pre></div></td></tr></tbody></table></figure></li><li><p>获取文件信息<br><a href="http://nodejs.cn/api/fs.html#fs_class_fs_stats">fs.Stats类 文档</a></p><figure class="highlight md"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs md">fs.stat(path[, options], callback)<br>fs.statSync(path[, options])<br>  会返回一个对象，这个对象中保存了当前对象状态的相关信息<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">fs.stat(<span class="hljs-string">'ABC.mp3'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, stat</span>) </span>{<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  isFile() 是否是一个文件</span><br><span class="hljs-comment">  isDirectory() 是否是一个文件夹</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-comment">// console.log(stat.size)</span><br>  <span class="hljs-built_in">console</span>.log(stat.isFile())<br>})<br></code></pre></div></td></tr></tbody></table></figure></li><li><p>删除文件</p><figure class="highlight md"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs md">fs.unlink(path, callback)<br>fs.unlinkSync(path)<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">fs.unlinkSync(<span class="hljs-string">'hello.txt'</span>)<br></code></pre></div></td></tr></tbody></table></figure></li><li><p>列出文件</p><figure class="highlight md"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs md">fs.readdir(path[, options], callback)<br>fs.readdirSync(path[, options])<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">fs.readdir(<span class="hljs-string">'.'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, files</span>) </span>{<br>  <span class="hljs-keyword">if</span> (!err) {<br>    <span class="hljs-built_in">console</span>.log(files)<br>  }<br>})<br><span class="hljs-comment">// files是一个字符串数组，每一个元素就是一个文件夹或文件的名字</span><br></code></pre></div></td></tr></tbody></table></figure></li><li><p>截断文件</p><figure class="highlight md"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs md">fs.truncate(path, len, callback)<br>fs.truncateSync(path, len)<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">fs.truncateSync(<span class="hljs-string">'hello2.txt'</span>, <span class="hljs-number">10</span>)<br>截断文件，将文件修改为指定大小<br></code></pre></div></td></tr></tbody></table></figure></li><li><p>建立目录</p><figure class="highlight md"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs md">fs.mkdir(path[, mode], callback)<br>fs.mkdirSync(path[, mode])<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">fs.mkdirSync(<span class="hljs-string">'hello'</span>)<br></code></pre></div></td></tr></tbody></table></figure></li><li><p>删除目录</p><figure class="highlight md"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs md">fs.rmdir(path, callback)<br>fs.rmdirSync(path)<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">fs.rmdirSync(<span class="hljs-string">'hello'</span>)<br></code></pre></div></td></tr></tbody></table></figure></li><li><p>重命名文件和目录</p><figure class="highlight md"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs md">fs.rename(oldPath, newPath, callback)<br>fs.renameSync(oldPath, newPath)<br><span class="hljs-bullet">  -</span> oldPath 旧路径<br><span class="hljs-bullet">  -</span> newPath 新路径<br><span class="hljs-bullet">  -</span> callback 回调函数<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">fs.rename(<span class="hljs-string">'hello3.txt'</span>, <span class="hljs-string">'C:/Users/fe/Desktop/555.txt'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) </span>{<br>  <span class="hljs-keyword">if</span> (!err) {<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'修改成功！'</span>)<br>  }<br>})<br><span class="hljs-comment">// 也可以实现剪切功能</span><br></code></pre></div></td></tr></tbody></table></figure></li><li><p>监视文件更改写入</p><figure class="highlight md"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs md">fs.watchFile(filename[, options], listener)<br><span class="hljs-bullet">  -</span> filename 要监视的文件的名字<br><span class="hljs-bullet">  -</span> options 配置选项<br><span class="hljs-bullet">    -</span> bigint <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">boolean</span>&gt;</span></span> 默认值: false<br><span class="hljs-bullet">    -</span> persistent <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">boolean</span>&gt;</span></span> 默认值: true<br><span class="hljs-bullet">    -</span> interval <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">integer</span>&gt;</span></span> 默认值: 5007 间隔时间<br><span class="hljs-bullet">  -</span> listener 回调函数，当文件发生变化时，回调函数会执行。有两个参数：<br><span class="hljs-code">    curr 当前文件的状态</span><br><span class="hljs-code">    prev 修改前文件的状态</span><br><span class="hljs-code">      这两个对象都是status对象</span><br><span class="hljs-code"></span><br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">fs.watchFile(<span class="hljs-string">'hello4.txt'</span>, { <span class="hljs-attr">interval</span>: <span class="hljs-number">1000</span> }, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">curr, prev</span>) </span>{<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'修改前文件大小：'</span> + prev.size)<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'修改后文件大小：'</span> + curr.size)<br>})<br></code></pre></div></td></tr></tbody></table></figure></li></ul><h1 id="EventEmitter"><a href="#EventEmitter" class="headerlink" title="EventEmitter"></a>EventEmitter</h1><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// EventEmitter类 实现</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Eventer</span> </span>{<br>  #eventListeners = {}<br><br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> { }<br><br>  <span class="hljs-function"><span class="hljs-title">on</span>(<span class="hljs-params">eventName, handler</span>)</span> {<br>    <span class="hljs-keyword">if</span> (!(eventName <span class="hljs-keyword">in</span> <span class="hljs-built_in">this</span>.#eventListeners)) {<br>      <span class="hljs-built_in">this</span>.#eventListeners[eventName] = []<br>    }<br><br>    <span class="hljs-built_in">this</span>.#eventListeners[eventName].push(handler)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span><br>  }<br><br>  <span class="hljs-function"><span class="hljs-title">emit</span>(<span class="hljs-params">eventName, ...args</span>)</span> {<br>    <span class="hljs-keyword">var</span> handlers = <span class="hljs-built_in">this</span>.#eventListeners[eventName]<br>    <span class="hljs-keyword">if</span> (handlers &amp;&amp; handlers.length &gt; <span class="hljs-number">0</span>) {<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> handler <span class="hljs-keyword">of</span> handlers) {<br>        handler.call(<span class="hljs-built_in">this</span>, ...args)<br>      }<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    } <span class="hljs-keyword">else</span> {<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    }<br>  }<br>}<br></code></pre></div></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>web前端学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>front-end</tag>
      
      <tag>NodeJS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web前端学习笔记10——Promise</title>
    <link href="/posts/4f3dd51e.html"/>
    <url>/posts/4f3dd51e.html</url>
    
    <content type="html"><![CDATA[<h1 id="了解Promise"><a href="#了解Promise" class="headerlink" title="了解Promise"></a>了解Promise</h1><p>Promise是JS中进行异步编程的新解决方案（旧解决方案是单纯使用回调函数）</p><ul><li><p>为什么要使用Promise</p><ol><li>指定回调函数的方式更加灵活<br>旧的：必须在启动异步任务前指定<br>promise：启动异步任务 =&gt; 返回promise对象 =&gt; 给promise对象绑定回调函数（甚至可以在异步任务结束后指定多个）</li><li>支持链式调用，可以解决回调地狱<br>回调地狱：回调函数嵌套调用，外部回调函数异步执行的结果是嵌套的回调执行的条件。<br>回调地狱的缺点：不便于阅读，不便于异常处理</li></ol></li><li><p>异步编程</p><ul><li>fs 文件操作<figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>).readFile(<span class="hljs-string">'./index.html'</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> {})<br></code></pre></div></td></tr></tbody></table></figure></li><li>数据库操作</li><li>AJAX<figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">$.get(<span class="hljs-string">'/server'</span>, <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> {})<br></code></pre></div></td></tr></tbody></table></figure></li><li>定时器<figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {}, <span class="hljs-number">2000</span>)<br></code></pre></div></td></tr></tbody></table></figure></li></ul></li><li><p>Promise 的状态<br>实例对象中的一个属性 【PromiseState】</p><ul><li>pending 未决定的</li><li>resolved / fullfilled 成功</li><li>rejected 失败</li></ul><p>状态改变</p><ul><li>pending 变为 resolved</li><li>pending 变为 rejected<br>只有这2种，且一个promise对象只能改变一次<br>成功的结果数据一般称为value，失败的结果数据一般称为reason</li></ul></li><li><p>Promise 对象的值<br>实例对象中的另一个属性 【PromiseResult】<br>保存着对象【成功/失败】的结果</p><ul><li>resolve</li><li>reject</li></ul></li><li><p>Promise 工作流程<br><img src="/image/post/promise%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.jpg" alt="promise工作流程"></p></li></ul><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><h2 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout()"></a>setTimeout()</h2><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"page-header"</span>&gt;</span>Promise 初体验<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"btn"</span>&gt;</span>点击抽奖<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-comment">//生成随机数</span></span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">rand</span>(<span class="hljs-params">m, n</span>) </span>{</span><br><span class="javascript">      <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.ceil(<span class="hljs-built_in">Math</span>.random() * (n - m + <span class="hljs-number">1</span>)) + m - <span class="hljs-number">1</span></span><br>    }<br>    /*<br>        点击按钮,  1s 后显示是否中奖(30%概率中奖)<br>            若中奖弹出    恭喜恭喜<br>            若未中奖弹出  再接再厉<br>    */<br><span class="javascript">    <span class="hljs-keyword">const</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#btn'</span>)</span><br><span class="javascript">    <span class="hljs-comment">//绑定单击事件</span></span><br><span class="javascript">    btn.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><br><span class="javascript">      <span class="hljs-comment">// 定时器</span></span><br><span class="javascript">      <span class="hljs-comment">// setTimeout(() =&gt; {</span></span><br><span class="javascript">      <span class="hljs-comment">//获取从1 - 100的一个随机数</span></span><br><span class="javascript">      <span class="hljs-comment">//   let n = rand(1, 100)</span></span><br><span class="javascript">      <span class="hljs-comment">//   if (n &lt;= 30) {</span></span><br><span class="javascript">      <span class="hljs-comment">//     alert('恭喜恭喜')</span></span><br><span class="javascript">      <span class="hljs-comment">//   } else {</span></span><br><span class="javascript">      <span class="hljs-comment">//     alert('再接再厉')</span></span><br><span class="javascript">      <span class="hljs-comment">//   }</span></span><br><span class="javascript">      <span class="hljs-comment">// }, 1000)</span></span><br><br><span class="javascript">      <span class="hljs-comment">//Promise 形式实现</span></span><br><span class="javascript">      <span class="hljs-comment">// resolve 解决  函数类型的数据</span></span><br><span class="javascript">      <span class="hljs-comment">// reject  拒绝  函数类型的数据</span></span><br><span class="javascript">      <span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {</span><br><span class="javascript">        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {</span><br><span class="javascript">          <span class="hljs-keyword">let</span> n = rand(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>)</span><br><span class="javascript">          <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">30</span>) {</span><br><span class="javascript">            resolve(n) <span class="hljs-comment">// 将 promise 对象的状态设置为 『成功』</span></span><br><span class="javascript">          } <span class="hljs-keyword">else</span> {</span><br><span class="javascript">            reject(n) <span class="hljs-comment">// 将 promise 对象的状态设置为 『失败』</span></span><br>          }<br>        }, 1000)<br>      })<br><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(p)</span><br><span class="javascript">      <span class="hljs-comment">//调用 then 方法</span></span><br><span class="javascript">      <span class="hljs-comment">// value 值</span></span><br><span class="javascript">      <span class="hljs-comment">// reason 理由</span></span><br><span class="javascript">      p.then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> {</span><br><span class="javascript">        alert(<span class="hljs-string">'恭喜恭喜, 您的中奖数字为 '</span> + value)</span><br><span class="javascript">      }, <span class="hljs-function">(<span class="hljs-params">reason</span>) =&gt;</span> {</span><br><span class="javascript">        alert(<span class="hljs-string">'再接再厉, 您的号码为 '</span> + reason)</span><br>      })<br>    })<br><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><h2 id="fs"><a href="#fs" class="headerlink" title="fs"></a>fs</h2><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>)<br><br><span class="hljs-comment">// 回调函数形式</span><br><span class="hljs-comment">// fs.readFile('./resources/content.txt', (err, data) =&gt; {</span><br><span class="hljs-comment">//   if (err) throw err</span><br><span class="hljs-comment">//   console.log(data.toString())</span><br><span class="hljs-comment">// })</span><br><br><span class="hljs-comment">// Promise 形式</span><br><span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {<br>  fs.readFile(<span class="hljs-string">'./resources/content.tx'</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> {<br>    <span class="hljs-comment">// 如果出错</span><br>    <span class="hljs-keyword">if</span> (err) reject(err)<br>    <span class="hljs-comment">// 如果成功</span><br>    resolve(data)<br>  })<br>})<br><span class="hljs-comment">// 调用then</span><br>p.then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> {<br>  <span class="hljs-built_in">console</span>.log(value.toString())<br>}, <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> {<br>  <span class="hljs-built_in">console</span>.log(reason)<br>})<br></code></pre></div></td></tr></tbody></table></figure><h2 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h2><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"page-header"</span>&gt;</span>Promise 封装 AJAX 操作<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"btn"</span>&gt;</span>点击发送 AJAX<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#btn'</span>)</span><br><span class="javascript">    btn.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><br><br><span class="javascript">      <span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {</span><br><span class="javascript">        <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest()</span><br><span class="javascript">        xhr.open(<span class="hljs-string">'GET'</span>, <span class="hljs-string">'https://api.apiopen.top/getJoe'</span>)</span><br>        xhr.send()<br><span class="javascript">        xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><br><span class="javascript">          <span class="hljs-keyword">if</span> (xhr.readyState === <span class="hljs-number">4</span>) {</span><br><span class="javascript">            <span class="hljs-keyword">if</span> (xhr.status &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.status &lt; <span class="hljs-number">300</span>) {</span><br>              resolve(xhr.response)<br><span class="javascript">            } <span class="hljs-keyword">else</span> {</span><br>              reject(xhr.status)<br>            }<br>          }<br>        }<br>      })<br><span class="javascript">      <span class="hljs-comment">// 调用then</span></span><br><span class="javascript">      p.then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> {</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(value)</span><br><span class="javascript">      }, <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> {</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.warn(reason)</span><br>      })<br>    })<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><h2 id="fs-readFile-封装"><a href="#fs-readFile-封装" class="headerlink" title="fs.readFile()封装"></a>fs.readFile()封装</h2><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment">封装一个函数 myReadFile 读取文件内容</span><br><span class="hljs-comment">参数：path 文件路径</span><br><span class="hljs-comment">返回：promise 对象</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myReadFile</span>(<span class="hljs-params">path</span>) </span>{<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {<br>    <span class="hljs-comment">// 读取文件</span><br>    <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>).readFile(path, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> {<br>      <span class="hljs-comment">// 判断</span><br>      <span class="hljs-keyword">if</span> (err) reject(err)<br>      <span class="hljs-comment">// 成功</span><br>      resolve(data)<br>    })<br>  })<br>}<br>myReadFile(<span class="hljs-string">'./resources/content.txt'</span>)<br>  .then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> {<br>    <span class="hljs-built_in">console</span>.log(value.toString())<br>  }, <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> {<br>    <span class="hljs-built_in">console</span>.log(reason)<br>  })<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// util.promisify 方法</span><br><span class="hljs-comment">// http://nodejs.cn/api/util.html#util_util_promisify_original</span><br><br><span class="hljs-keyword">const</span> util = <span class="hljs-built_in">require</span>(<span class="hljs-string">'util'</span>)<br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>)<br><span class="hljs-keyword">let</span> myReadFile = util.promisify(fs.readFile)<br>myReadFile(<span class="hljs-string">'./resources/content.txt'</span>)<br>  .then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> {<br>    <span class="hljs-built_in">console</span>.log(value.toString())<br>  })<br></code></pre></div></td></tr></tbody></table></figure><h2 id="AJAX-GET封装"><a href="#AJAX-GET封装" class="headerlink" title="AJAX GET封装"></a>AJAX GET封装</h2><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br>    /*<br>    封装一个函数 sendAJAX 发送 GET AJAX 请求<br>    参数：URL<br><span class="javascript">    返回结果：<span class="hljs-built_in">Promise</span>对象</span><br>    */<br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sendAJAX</span>(<span class="hljs-params">url</span>) </span>{</span><br><span class="javascript">      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {</span><br><span class="javascript">        <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest()</span><br><span class="javascript">        xhr.responseType = <span class="hljs-string">'json'</span></span><br><span class="javascript">        xhr.open(<span class="hljs-string">'GET'</span>, url)</span><br>        xhr.send()<br><span class="javascript">        xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><br><span class="javascript">          <span class="hljs-keyword">if</span> (xhr.readyState === <span class="hljs-number">4</span>) {</span><br><span class="javascript">            <span class="hljs-keyword">if</span> (xhr.status &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.status &lt; <span class="hljs-number">300</span>) {</span><br>              resolve(xhr.response)<br><span class="javascript">            } <span class="hljs-keyword">else</span> {</span><br>              reject(xhr.status)<br>            }<br>          }<br>        }<br>      })<br>    }<br><span class="javascript">    sendAJAX(<span class="hljs-string">'https://api.apiopen.top/getJoke'</span>)</span><br><span class="javascript">      .then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> {</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(value)</span><br><span class="javascript">      }, <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> {</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.warn(reason)</span><br>      })<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><h1 id="Promise方法"><a href="#Promise方法" class="headerlink" title="Promise方法"></a>Promise方法</h1><h2 id="Promise-构造函数"><a href="#Promise-构造函数" class="headerlink" title="Promise 构造函数"></a>Promise 构造函数</h2><p><code>Promise{executor}{}</code><br>executor 函数：执行器 {resolve, reject} =&gt; {}<br>resolve 函数：内部定义成功时调用函数 value =&gt; {}<br>reject 函数：内部定义失败时调用函数 reason =&gt; {}<br>说明：executor 会在 Promise 内部立即<strong>同步调用</strong>，异步操作在执行器中执行</p><h2 id="Promise-prototype-then"><a href="#Promise-prototype-then" class="headerlink" title="Promise.prototype.then"></a>Promise.prototype.then</h2><p><code>{onResolved, onRejected} =&gt; {}</code><br>onResolved 函数：成功的回调函数 (value) =&gt; {}<br>onRejected 函数：失败的回调函数 (reason) =&gt; {}<br>说明：value的成功回调和reason的失败回调返回一个新的promise对象</p><h2 id="Promise-prototype-catch"><a href="#Promise-prototype-catch" class="headerlink" title="Promise.prototype.catch"></a>Promise.prototype.catch</h2><p><code>onRejected =&gt; {}</code><br>onRejected 函数：失败的回调函数 (reason) =&gt; {}<br>说明：then()的语法糖，相当于：then(undefined, onRejected)</p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {<br>  <span class="hljs-comment">// 修改promise对象的状态</span><br>  reject(<span class="hljs-string">'error'</span>)<br>})<br><br>p.catch(<span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> {<br>  <span class="hljs-built_in">console</span>.log(reason)<br>})<br></code></pre></div></td></tr></tbody></table></figure><h2 id="Promise-resolve"><a href="#Promise-resolve" class="headerlink" title="Promise.resolve"></a>Promise.resolve</h2><p><code>(value) =&gt; {}</code><br>value：成功的数据或promise对象<br>说明：返回一个成功/失败的promise对象</p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 如果传入的参数为 非Promise类型的对象，则返回的结果为成功的promise对象</span><br><span class="hljs-comment">// 如果传入的参数为 Promise对象，则参数的结果决定了 resolve 的结果</span><br><br><span class="hljs-comment">// let p1 = Promise.resolve(332)</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">Promise {&lt;fulfilled&gt;: 332}</span><br><span class="hljs-comment">  __proto__: Promise</span><br><span class="hljs-comment">  [[PromiseState]]: "fulfilled"</span><br><span class="hljs-comment">  [[PromiseResult]]: 332</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">let</span> p2 = <span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {<br>  <span class="hljs-comment">// resolve('OK')</span><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  Promise {&lt;fulfilled&gt;: "OK"}</span><br><span class="hljs-comment">    __proto__: Promise</span><br><span class="hljs-comment">    [[PromiseState]]: "fulfilled"</span><br><span class="hljs-comment">    [[PromiseResult]]: "OK"</span><br><span class="hljs-comment">  */</span><br>  reject(<span class="hljs-string">'Error'</span>)<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  Promise {&lt;rejected&gt;: "Error"}</span><br><span class="hljs-comment">    __proto__: Promise</span><br><span class="hljs-comment">    [[PromiseState]]: "rejected"</span><br><span class="hljs-comment">    [[PromiseResult]]: "Error"</span><br><span class="hljs-comment">  */</span><br>}))<br><br><span class="hljs-comment">// console.log(p2)</span><br>p2.catch(<span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> {<br>  <span class="hljs-built_in">console</span>.log(reason)<br>})<br></code></pre></div></td></tr></tbody></table></figure><h2 id="Promise-reject"><a href="#Promise-reject" class="headerlink" title="Promise.reject"></a>Promise.reject</h2><p><code>(reason) =&gt; {}</code><br>value：失败的原因<br>说明：返回一个失败的promise对象</p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// let p = Promise.reject('123') //Promise&nbsp;{&lt;rejected&gt;: "123"}</span><br><span class="hljs-keyword">let</span> p2 = <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {<br>  resolve(<span class="hljs-string">'OK'</span>)<br>}))<br><span class="hljs-built_in">console</span>.log(p2) <span class="hljs-comment">//Promise&nbsp;{&lt;rejected&gt;: Promise}</span><br></code></pre></div></td></tr></tbody></table></figure><h2 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all"></a>Promise.all</h2><p><code>(promises) =&gt; {}</code><br>promises：包括n个promise的数组<br>说明：返回一个新的promise，只有所有的promise都成功才成功，只要有一个失败了就直接失败</p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {<br>  resolve(<span class="hljs-string">'OK'</span>)<br>})<br><span class="hljs-comment">// let p2 = Promise.resolve('Success')</span><br><span class="hljs-keyword">let</span> p2 = <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">'Error'</span>)<br><span class="hljs-keyword">let</span> p3 = <span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-string">'Yeah'</span>)<br><br><span class="hljs-keyword">const</span> result = <span class="hljs-built_in">Promise</span>.all([p1, p2, p3])<br><span class="hljs-built_in">console</span>.log(result)<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">全部成功，返回3个promise数组</span><br><span class="hljs-comment">Promise {&lt;pending&gt;}</span><br><span class="hljs-comment">  __proto__: Promise</span><br><span class="hljs-comment">  [[PromiseState]]: "fulfilled"</span><br><span class="hljs-comment">  [[PromiseResult]]: Array(3)</span><br><span class="hljs-comment">    0: "OK"</span><br><span class="hljs-comment">    1: "Success"</span><br><span class="hljs-comment">    2: "Yeah"</span><br><span class="hljs-comment">    length: 3</span><br><span class="hljs-comment">    __proto__: Array(0)</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">p2失败，返回p2的失败结果</span><br><span class="hljs-comment">Promise {&lt;pending&gt;}</span><br><span class="hljs-comment">  __proto__: Promise</span><br><span class="hljs-comment">  [[PromiseState]]: "rejected"</span><br><span class="hljs-comment">  [[PromiseResult]]: "Error"</span><br><span class="hljs-comment">*/</span><br></code></pre></div></td></tr></tbody></table></figure><h2 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race"></a>Promise.race</h2><p><code>(promises) =&gt; {}</code><br>promises：包括n个promise的数组<br>说明：返回一个新的promise，第一个完成的promise的结果状态就是最终的结果状态，不管结果本身是成功状态还是失败状态。</p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {<br>    resolve(<span class="hljs-string">'OK'</span>)<br>  }, <span class="hljs-number">1000</span>)<br>})<br><span class="hljs-keyword">let</span> p2 = <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-string">'Error'</span>)<br><span class="hljs-keyword">let</span> p3 = <span class="hljs-built_in">Promise</span>.resolve(<span class="hljs-string">'Yeah'</span>)<br><br><span class="hljs-keyword">const</span> result = <span class="hljs-built_in">Promise</span>.race([p1, p2, p3])<br><span class="hljs-built_in">console</span>.log(result)<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">返回p2的结果状态</span><br><span class="hljs-comment">Promise {&lt;pending&gt;}</span><br><span class="hljs-comment">  __proto__: Promise</span><br><span class="hljs-comment">  [[PromiseState]]: "rejected"</span><br><span class="hljs-comment">  [[PromiseResult]]: "Error"</span><br><span class="hljs-comment">*/</span><br></code></pre></div></td></tr></tbody></table></figure><h1 id="几个问题"><a href="#几个问题" class="headerlink" title="几个问题"></a>几个问题</h1><ol><li><p>如何改变promise的状态？</p><ol><li> resolve(value) pending =&gt; resolved</li><li> reject(reason) pending =&gt; rejected</li><li>抛出异常 pending =&gt; rejected<figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {<br>  <span class="hljs-comment">// resolve('OK')</span><br>  <span class="hljs-comment">// reject('Error')</span><br>  <span class="hljs-keyword">throw</span> <span class="hljs-string">'出问题了'</span><br>})<br><span class="hljs-built_in">console</span>.log(p)<br></code></pre></div></td></tr></tbody></table></figure><br></li></ol></li><li><p>一个promise指定多个成功/失败回调函数，都会调用吗？<br>当promise改变为对应状态时都会调用</p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {<br>  resolve(<span class="hljs-string">'OK'</span>)<br>})<br><br><span class="hljs-comment">// 指定回调 1</span><br>p.then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> {<br>  <span class="hljs-built_in">console</span>.log(value)<br>})<br><span class="hljs-comment">// 指定回调 2</span><br>p.then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> {<br>  alert(value)<br>})<br></code></pre></div></td></tr></tbody></table></figure><br></li><li><p>改变 promise 状态和指定回调函数谁先谁后?<br>(1) 都有可能, 正常情况下是先指定回调再改变状态【异步任务】, 但也可以先改状态再指定回调<br>(2) 如何先改状态再指定回调?<br>&nbsp;&nbsp;&nbsp;&nbsp;① 在执行器中直接调用 resolve()/reject()【同步任务】<br>&nbsp;&nbsp;&nbsp;&nbsp;② 延迟更长时间才调用 then()<br>(3) 什么时候才能得到数据（回调函数什么时候执行）?<br>&nbsp;&nbsp;&nbsp;&nbsp;① 如果先指定的回调, 那当状态发生改变时, 回调函数就会调用, 得到数据<br>&nbsp;&nbsp;&nbsp;&nbsp;② 如果先改变的状态, 那当指定回调时, 回调函数就会调用, 得到数据</p></li><li><p>promise.then()返回的新 promise 的结果状态由什么决定?<br>(1) 简单表达: 由 then()指定的回调函数执行的结果决定<br>(2) 详细表达:<br>&nbsp;&nbsp;&nbsp;&nbsp;① 如果抛出异常, 新 promise 变为 rejected, reason 为抛出的异常<br>&nbsp;&nbsp;&nbsp;&nbsp;② 如果返回的是非 promise 的任意值, 新 promise 变为 resolved, value 为返回的值<br>&nbsp;&nbsp;&nbsp;&nbsp;③ 如果返回的是另一个新 promise, 此 promise 的结果就会成为新 promise 的结果</p></li><li><p>promise 如何串连多个操作任务?<br>(1) promise 的 then()返回一个新的 promise, 可以生成 then()的链式调用<br>(2) 通过 then 的链式调用串连多个同步/异步任务</p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {<br>    resolve(<span class="hljs-string">'OK'</span>)<br>  }, <span class="hljs-number">1000</span>)<br>})<br><br>p.then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> {<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {<br>    resolve(<span class="hljs-string">"success"</span>)<br>  })<br>}).then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> {<br>  <span class="hljs-built_in">console</span>.log(value) <span class="hljs-comment">//success</span><br>}).then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> {<br>  <span class="hljs-built_in">console</span>.log(value) <span class="hljs-comment">//undefined</span><br>})<br></code></pre></div></td></tr></tbody></table></figure><br></li><li><p>promise 异常传透?<br>(1) 当使用 promise 的 then 链式调用时, 可以在最后指定失败的回调<br>(2) 前面任何操作出了异常, 都会传到最后失败的回调中处理</p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {<br>    resolve(<span class="hljs-string">'OK'</span>);<br>    <span class="hljs-comment">// reject('Err');</span><br>  }, <span class="hljs-number">1000</span>);<br>});<br><br>p.then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> {<br>  <span class="hljs-comment">// console.log(111);</span><br>  <span class="hljs-keyword">throw</span> <span class="hljs-string">'失败啦!'</span>;<br>}).then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> {<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">222</span>);<br>}).then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> {<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">333</span>);<br>}).catch(<span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> {<br>  <span class="hljs-built_in">console</span>.warn(reason); <span class="hljs-comment">//失败啦！</span><br>});<br></code></pre></div></td></tr></tbody></table></figure><br></li><li><p>中断 promise 链?<br>当使用 promise 的 then 链式调用时, 在中间中断, 不再调用后面的回调函数。<br>办法: 在回调函数中返回一个 pending 状态的 promise 对象</p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {<br>    resolve(<span class="hljs-string">'OK'</span>);<br>  }, <span class="hljs-number">1000</span>);<br>});<br><br>p.then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> {<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">111</span>);<br>  <span class="hljs-comment">//有且仅有一种方式</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">() =&gt;</span> { });<br>}).then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> {<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">222</span>);<br>}).then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> {<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">333</span>);<br>}).catch(<span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> {<br>  <span class="hljs-built_in">console</span>.warn(reason);<br>});<br></code></pre></div></td></tr></tbody></table></figure></li></ol><h1 id="自定义封装"><a href="#自定义封装" class="headerlink" title="自定义封装"></a>自定义封装</h1><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Promise</span> </span>{<br>  <span class="hljs-comment">// 构造方法</span><br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">executor</span>)</span> {<br>    <span class="hljs-built_in">this</span>.PromiseState = <span class="hljs-string">'pending'</span><br>    <span class="hljs-built_in">this</span>.PromiseResult = <span class="hljs-literal">null</span><br>    <span class="hljs-built_in">this</span>.callbacks = []<br>    <span class="hljs-comment">// 保存实例对象的 this 值</span><br>    <span class="hljs-keyword">const</span> self = <span class="hljs-built_in">this</span> <span class="hljs-comment">//self _this that</span><br><br>    <span class="hljs-comment">// resolve函数</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">resolve</span>(<span class="hljs-params">data</span>) </span>{<br>      <span class="hljs-comment">// 判断状态，只能更改一次</span><br>      <span class="hljs-keyword">if</span> (self.PromiseState !== <span class="hljs-string">'pending'</span>) <span class="hljs-keyword">return</span><br>      <span class="hljs-comment">// 1. 修改对象的状态(PromiseState)</span><br>      self.PromiseState = <span class="hljs-string">'fulfilled'</span><br>      <span class="hljs-comment">// 2. 修改对象结果值(PromiseResult)</span><br>      self.PromiseResult = data<br>      <span class="hljs-comment">// 调用成功的回调函数</span><br>      <span class="hljs-comment">// 在resolve中而不是then中执行回调，改变状态之后才能执行回调</span><br>      <span class="hljs-comment">// 多个回调</span><br>      <span class="hljs-comment">// then方法是异步执行，加一个定时器(2)</span><br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {<br>        self.callbacks.forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> {<br>          item.onResolved(data)<br>        })<br>      })<br>    }<br><br>    <span class="hljs-comment">// reject函数</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reject</span>(<span class="hljs-params">data</span>) </span>{<br>      <span class="hljs-keyword">if</span> (self.PromiseState !== <span class="hljs-string">'pending'</span>) <span class="hljs-keyword">return</span><br>      self.PromiseState = <span class="hljs-string">'rejected'</span><br>      self.PromiseResult = data<br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {<br>        self.callbacks.forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> {<br>          item.onRejected(data)<br>        })<br>      })<br>    }<br><br>    <span class="hljs-keyword">try</span> {<br>      <span class="hljs-comment">// 同步调用【执行器函数】</span><br>      executor(resolve, reject)<br>    } <span class="hljs-keyword">catch</span> (e) {<br>      <span class="hljs-comment">// 修改 promise 对象状态为 失败</span><br>      reject(e)<br>    }<br>  }<br><br>  <span class="hljs-comment">// then方法</span><br>  <span class="hljs-function"><span class="hljs-title">then</span>(<span class="hljs-params">onResolved, onRejected</span>)</span> {<br>    <span class="hljs-keyword">const</span> self = <span class="hljs-built_in">this</span><br>    <span class="hljs-comment">// 判断回调函数参数</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> onRejected !== <span class="hljs-string">'function'</span>) {<br>      onRejected = <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> {<br>        <span class="hljs-keyword">throw</span> reason<br>      }<br>    }<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> onResolved !== <span class="hljs-string">'function'</span>) {<br>      onResolved = <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> value<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {<br>      <span class="hljs-comment">//封装函数</span><br>      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">callback</span>(<span class="hljs-params">type</span>) </span>{<br>        <span class="hljs-keyword">try</span> {<br>          <span class="hljs-comment">//获取回调函数的执行结果</span><br>          <span class="hljs-keyword">let</span> result = type(self.PromiseResult)<br>          <span class="hljs-comment">//判断</span><br>          <span class="hljs-keyword">if</span> (result <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Promise</span>) {<br>            <span class="hljs-comment">//如果是 Promise 类型的对象</span><br>            result.then(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> {<br>              resolve(v)<br>            }, <span class="hljs-function"><span class="hljs-params">r</span> =&gt;</span> {<br>              reject(r)<br>            })<br>          } <span class="hljs-keyword">else</span> {<br>            <span class="hljs-comment">//结果的对象状态为『成功』</span><br>            resolve(result)<br>          }<br>        } <span class="hljs-keyword">catch</span> (e) {<br>          reject(e)<br>        }<br>      }<br>      <span class="hljs-comment">//调用回调函数  PromiseState</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.PromiseState === <span class="hljs-string">'fulfilled'</span>) {<br>        <span class="hljs-comment">// then方法是异步执行，加一个定时器(1)</span><br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {<br>          callback(onResolved)<br>        })<br>      }<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.PromiseState === <span class="hljs-string">'rejected'</span>) {<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {<br>          callback(onRejected)<br>        })<br>      }<br>      <span class="hljs-comment">//判断 pending 状态</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.PromiseState === <span class="hljs-string">'pending'</span>) {<br>        <span class="hljs-comment">//保存回调函数</span><br>        <span class="hljs-built_in">this</span>.callbacks.push({<br>          onResolved: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>            callback(onResolved)<br>          },<br>          onRejected: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>            callback(onRejected)<br>          }<br>        })<br>      }<br>    })<br>  }<br><br>  <span class="hljs-comment">// catch方法</span><br>  <span class="hljs-keyword">catch</span>(onRejected) {<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.then(<span class="hljs-literal">undefined</span>, onRejected)<br>  }<br><br>  <span class="hljs-comment">// 添加resolve方法</span><br>  <span class="hljs-comment">// 属于类，不属于实例对象</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-title">resolve</span>(<span class="hljs-params">value</span>)</span> {<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {<br>      <span class="hljs-keyword">if</span> (value <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Promise</span>) {<br>        value.then(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> {<br>          resolve(v)<br>        }, <span class="hljs-function"><span class="hljs-params">r</span> =&gt;</span> {<br>          reject(r)<br>        })<br>      } <span class="hljs-keyword">else</span> {<br>        resolve(value)<br>      }<br>    })<br>  }<br><br>  <span class="hljs-comment">// 添加reject方法</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-title">reject</span>(<span class="hljs-params">reason</span>)</span> {<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {<br>      reject(reason)<br>    })<br>  }<br><br>  <span class="hljs-comment">// 添加all方法</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-title">all</span>(<span class="hljs-params">promises</span>)</span> {<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {<br>      <span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span><br>      <span class="hljs-keyword">let</span> arr = []<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; promises.length; i++) {<br>        promises[i].then(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> {<br>          <span class="hljs-comment">// 得知对象的状态是成功</span><br>          count++<br>          arr[i] = v<br>          <span class="hljs-keyword">if</span> (count === promises.length) {<br>            <span class="hljs-comment">// 每个promise对象都成功才能调用resolve()修改状态</span><br>            resolve(arr)<br>          }<br>        }, <span class="hljs-function"><span class="hljs-params">r</span> =&gt;</span> {<br>          reject(r)<br>        })<br>      }<br>    })<br>  }<br><br>  <span class="hljs-comment">// 添加race方法</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-title">race</span>(<span class="hljs-params">promises</span>)</span> {<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; promises.length; i++) {<br>        promises[i].then(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> {<br>          resolve(v)<br>        }, <span class="hljs-function"><span class="hljs-params">r</span> =&gt;</span> {<br>          reject(r)<br>        })<br>      }<br>    })<br>  }<br>}<br></code></pre></div></td></tr></tbody></table></figure><h1 id="async-和-await"><a href="#async-和-await" class="headerlink" title="async 和 await"></a>async 和 await</h1><h2 id="async"><a href="#async" class="headerlink" title="async"></a>async</h2><ul><li>函数的返回值为 promise 对象</li><li>promise 对象的结果由 async 函数执行的返回值决定<figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 和then方法返回结果规则是一样的</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">main</span>(<span class="hljs-params"></span>) </span>{<br>  <span class="hljs-comment">// 1. 如果返回值是一个非Promise类型的对象</span><br>  <span class="hljs-comment">// return 123</span><br>  <span class="hljs-comment">// 2. 如果返回的是一个Promise对象</span><br>  <span class="hljs-comment">// return new Promise((resolve, reject) =&gt; {</span><br>  <span class="hljs-comment">//   resolve('OK')</span><br>  <span class="hljs-comment">//   reject('ERR')</span><br>  <span class="hljs-comment">// })</span><br>  <span class="hljs-comment">// 3. 抛出异常</span><br>  <span class="hljs-keyword">throw</span> <span class="hljs-string">'NO'</span><br>}<br><span class="hljs-keyword">let</span> result = main()<br><span class="hljs-built_in">console</span>.log(result)<br></code></pre></div></td></tr></tbody></table></figure></li></ul><h2 id="await"><a href="#await" class="headerlink" title="await"></a>await</h2><p>await 右侧的表达式一般为 promise 对象, 但也可以是其它的值</p><ul><li>如果表达式是 promise 对象, await 返回的是 promise 成功的值</li><li>如果表达式是其它值, 直接将此值作为 await 的返回值</li></ul><p>注意：await 必须写在 async 函数中, 但 async 函数中可以没有 await。<br>如果 await 的 promise 失败了, 就会抛出异常, 需要通过 try…catch 捕获处理。</p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">main</span>(<span class="hljs-params"></span>) </span>{<br>  <span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {<br>    <span class="hljs-comment">// resolve('OK')</span><br>    reject(<span class="hljs-string">'Error'</span>)<br>  })<br>  <span class="hljs-comment">//1. 右侧为promise的情况</span><br>  <span class="hljs-comment">// let res = await p</span><br>  <span class="hljs-comment">//2. 右侧为其他类型的数据</span><br>  <span class="hljs-comment">// let res2 = await 20</span><br>  <span class="hljs-comment">//3. 如果promise是失败的状态</span><br>  <span class="hljs-keyword">try</span> {<br>    <span class="hljs-keyword">let</span> res3 = <span class="hljs-keyword">await</span> p<br>  } <span class="hljs-keyword">catch</span> (e) {<br>    <span class="hljs-built_in">console</span>.log(e)<br>  }<br>}<br>main()<br></code></pre></div></td></tr></tbody></table></figure><h2 id="async与await结合"><a href="#async与await结合" class="headerlink" title="async与await结合"></a>async与await结合</h2><ul><li>读取文件<figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 读取 resource 1.html 2.html 3.html 文件内容</span><br><span class="hljs-comment">// 回调函数的方式</span><br>fs.readFile(<span class="hljs-string">'./resource/1.html'</span>, <span class="hljs-function">(<span class="hljs-params">err, data1</span>) =&gt;</span> {<br>  <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">throw</span> err<br>  fs.readFile(<span class="hljs-string">'./resource/2.html'</span>, <span class="hljs-function">(<span class="hljs-params">err, data2</span>) =&gt;</span> {<br>    <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">throw</span> err<br>    fs.readFile(<span class="hljs-string">'./resource/3.html'</span>, <span class="hljs-function">(<span class="hljs-params">err, data3</span>) =&gt;</span> {<br>      <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">throw</span> err<br>      <span class="hljs-built_in">console</span>.log(data1 + data2 + data3)<br>    })<br>  })<br>})<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>)<br><span class="hljs-keyword">const</span> util = <span class="hljs-built_in">require</span>(<span class="hljs-string">'util'</span>)<br><br><span class="hljs-keyword">const</span> myReadFile = util.promisify(fs.readFile)<br><br><span class="hljs-comment">//async 与 await</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">main</span>(<span class="hljs-params"></span>) </span>{<br>  <span class="hljs-keyword">try</span> {<br>    <span class="hljs-comment">//读取第一个文件的内容</span><br>    <span class="hljs-keyword">let</span> data1 = <span class="hljs-keyword">await</span> myReadFile(<span class="hljs-string">'./resource/1.html'</span>)<br>    <span class="hljs-keyword">let</span> data2 = <span class="hljs-keyword">await</span> myReadFile(<span class="hljs-string">'./resource/2.html'</span>)<br>    <span class="hljs-keyword">let</span> data3 = <span class="hljs-keyword">await</span> myReadFile(<span class="hljs-string">'./resource/3.html'</span>)<br>    <span class="hljs-built_in">console</span>.log(data1 + data2 + data3)<br>  } <span class="hljs-keyword">catch</span> (e) {<br>    <span class="hljs-built_in">console</span>.log(e)<br>  }<br>}<br><br>main()<br></code></pre></div></td></tr></tbody></table></figure></li><li>发送AJAX请求<figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"btn"</span>&gt;</span>点击获取段子<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sendAJAX</span>(<span class="hljs-params">url</span>) </span>{</span><br><span class="javascript">      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {</span><br><span class="javascript">        <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest</span><br><span class="javascript">        xhr.responseType = <span class="hljs-string">'json'</span></span><br><span class="javascript">        xhr.open(<span class="hljs-string">'GET'</span>, url)</span><br>        xhr.send()<br><span class="javascript">        xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><br><span class="javascript">          <span class="hljs-keyword">if</span> (xhr.readyState === <span class="hljs-number">4</span>) {</span><br><span class="javascript">            <span class="hljs-keyword">if</span> (xhr.status &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.status &lt; <span class="hljs-number">300</span>) {</span><br>              resolve(xhr.response)<br><span class="javascript">            } <span class="hljs-keyword">else</span> {</span><br>              reject(xhr.status)<br>            }<br>          }<br>        }<br>      })<br>    }<br><span class="javascript">    <span class="hljs-keyword">let</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#btn'</span>)</span><br><span class="javascript">    btn.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><br><span class="javascript">      <span class="hljs-keyword">let</span> duanzi = <span class="hljs-keyword">await</span> sendAJAX(<span class="hljs-string">'https://api.apiopen.top/getJoke'</span>)</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(duanzi)</span><br>    })<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure></li></ul><h1 id="run"><a href="#run" class="headerlink" title="run"></a>run</h1><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span>(<span class="hljs-params">generatorFunction</span>) </span>{<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {<br>    <span class="hljs-keyword">var</span> generator = generatorFunction()<br>    <span class="hljs-keyword">var</span> generated = generator.next()<br><br>    step()<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">step</span>(<span class="hljs-params"></span>) </span>{<br>      <span class="hljs-keyword">if</span> (!generated.done) {<br>        generated.value.then(<span class="hljs-function"><span class="hljs-params">val</span> =&gt;</span> {<br>          <span class="hljs-keyword">try</span> {<br>            generated = generator.next(val)<br>          } <span class="hljs-keyword">catch</span> (e) {<br>            reject(e)<br>            <span class="hljs-keyword">return</span><br>          }<br>          step()<br>        }, <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> {<br>          <span class="hljs-keyword">try</span> {<br>            generated = generator.throw(reason)<br>          } <span class="hljs-keyword">catch</span> (e) {<br>            reject(e)<br>            <span class="hljs-keyword">return</span><br>          }<br>          step()<br>        })<br>      } <span class="hljs-keyword">else</span> {<br>        resolve(generated.value)<br>      }<br>    }<br>  })<br>}<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 另一种写法</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span>(<span class="hljs-params">generatorFunc</span>) </span>{<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {<br>    <span class="hljs-keyword">var</span> generator = generatorFunc()<br>    <span class="hljs-keyword">var</span> gen = generator.next()<br><br>    step()<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">tick</span>(<span class="hljs-params">methodName, val</span>) </span>{<br>      gen = generator[methodName](val)<br>      step()<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">step</span>(<span class="hljs-params"></span>) </span>{<br>      <span class="hljs-keyword">if</span> (gen.done) {<br>        resolve(gen.value)<br>      } <span class="hljs-keyword">else</span> {<br>        gen.value.then(tick.bind(<span class="hljs-literal">null</span>, <span class="hljs-string">'next'</span>), tick.bind(<span class="hljs-literal">null</span>, <span class="hljs-string">'throw'</span>))<br>      }<br>    }<br>  })<br>}<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 简版</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span>(<span class="hljs-params">generatorFunc</span>) </span>{<br>  <span class="hljs-keyword">var</span> generator = generatorFunc()<br>  <span class="hljs-keyword">var</span> generated = generator.next()<br><br>  step()<br><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">step</span>(<span class="hljs-params"></span>) </span>{<br>    generated.value.then(<span class="hljs-function"><span class="hljs-params">val</span> =&gt;</span> {<br>      generated = generator.next(val)<br>      step()<br>    })<br>  }<br>}<br></code></pre></div></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>web前端学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>front-end</tag>
      
      <tag>Promise</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web前端学习笔记9——模块化</title>
    <link href="/posts/383ae588.html"/>
    <url>/posts/383ae588.html</url>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>在浏览器用script标签加载很多模块是不可行的。<br>JS语言里没有模块系统。</p><ul><li><p>为什么要模块系统？<br>模块化开发便于维护，也便于解耦。<br>不同功能模块的代码放在不同的文件及文件夹里甚至放在不同的软件包里。</p></li><li><p>实现好的模块系统在浏览器中实际上不可用<br>因为浏览器如果还一个一个加载模块文件，就太慢了。<br>从网络上加载大量的小文件总体速度是很慢的，而在所有模块加载完成之前，模块系统是不会开始执行入口模块的代码的，进而相当于不执行任何模块代码，也就是页面中的功能都不可用。<br>视模块数量、依赖关系以及网络速度，这个不可用的时间可能很久，甚至可能长达10秒以上，所以需要将所有的模块打包成一整个文件。<br>一个10M的文件比1000个10k的文件下载速度快。</p></li><li><p>打包原理即为浏览器中异步加载模块的基本原理<br>从入口文件开始，加载并缓存所有模块的依赖，等所有的依赖都加载完成的时候，构建好的对象其实就是打包结果的一部分，将其跟require函数一起输出为一个文件，即为打包结果。</p></li></ul><h1 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h1><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><ul><li>暴露模块<br><code>module.exports = value</code><br><code>exports.xxx = value</code><br>暴露的模块本质是 exports 对象</li><li>引入模块<br><code>require(xxx)</code><br>第三方模块：xxx为模块名<br>自定义模块：xxx为模块文件路径</li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>服务端实现：<a href="https://nodejs.org/">Node.js</a></p><ul><li><p>创建项目结构</p><figure class="highlight md"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs md">|-modules<br>  |-module1.js<br>  |-module2.js<br>  |-module3.js<br>|-app.js<br>|-package.json<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># package.json 生成</span><br>npm init<br><span class="hljs-comment"># 引入 uniq </span><br>npm install uniq<br></code></pre></div></td></tr></tbody></table></figure></li><li><p>代码</p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// module1.js 文件</span><br><span class="hljs-comment">// module.exports = value 暴露一个对象</span><br><span class="hljs-built_in">module</span>.exports = {<br>  msg:<span class="hljs-string">'module1'</span>,<br>  <span class="hljs-function"><span class="hljs-title">foo</span>(<span class="hljs-params"></span>)</span>{<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.msg)<br>  }<br>}<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// module2.js 文件</span><br><span class="hljs-comment">// 暴露一个函数 module.exports = function(){}</span><br><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'module2'</span>)<br>}<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// module3.js 文件</span><br><span class="hljs-comment">// exports.xxx = value</span><br><span class="hljs-built_in">exports</span>.foo = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'foo() module3'</span>)<br>}<br><br><span class="hljs-built_in">exports</span>.bar = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'bar() module3'</span>)<br>}<br><br><span class="hljs-built_in">exports</span>.arr = [<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">11</span>]<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 将其它模块汇集到主模块</span><br><span class="hljs-keyword">let</span> uniq = <span class="hljs-built_in">require</span>(<span class="hljs-string">'uniq'</span>)<br><br><span class="hljs-keyword">let</span> module1 = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./modules/module1'</span>)<br><span class="hljs-keyword">let</span> module2 = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./modules/module2'</span>)<br><span class="hljs-keyword">let</span> module3 = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./modules/module3'</span>)<br><br>module1.foo()<br>module2()<br><br>module3.foo()<br>module3.bar()<br><br><span class="hljs-keyword">let</span> result = uniq(module3.arr)<br><span class="hljs-built_in">console</span>.log(result)<br></code></pre></div></td></tr></tbody></table></figure></li><li><p>运行结果</p><figure class="highlight md"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs md">module1<br>module2<br>foo() module3<br>bar() module3<br>[ 1, 11, 2, 3, 4, 5 ]<br></code></pre></div></td></tr></tbody></table></figure></li></ul><hr><p>浏览器实现：<a href="http://browserify.org/">Browserify</a></p><ul><li><p>创建项目结构</p><figure class="highlight md"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs md">|-js<br>  |-dist //打包生成文件的目录<br>  |-src //源码所在的目录<br><span class="hljs-code">    |-module1.js</span><br><span class="hljs-code">    |-module2.js</span><br><span class="hljs-code">    |-module3.js</span><br><span class="hljs-code">    |-app.js //应用主源文件</span><br><span class="hljs-code">|-index.html</span><br><span class="hljs-code">|-package.json</span><br></code></pre></div></td></tr></tbody></table></figure></li><li><p>下载 browserify</p><figure class="highlight bash"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 全局</span><br>npm install browserify -g<br><span class="hljs-comment"># 局部</span><br>npm install browserify --save-dev<br><span class="hljs-comment"># --save、-S参数意思是把模块的版本信息保存到 dependencies（生产环境依赖）中，</span><br><span class="hljs-comment"># 即 package.json 文件的 dependencies 字段中；</span><br><span class="hljs-comment"># --save-dev、-D参数意思是把模块版本信息保存到 devDependencies（开发环境依赖）中</span><br><span class="hljs-comment"># 即 package.json 文件的 devDependencies 字段中。</span><br></code></pre></div></td></tr></tbody></table></figure><p>下载成功时：</p><figure class="highlight"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">"dependencies": {<br>  "uniq": "^1.0.1"<br>}<br>"devDependencies": {<br>  "browserify": "^17.0.0"<br>}<br></code></pre></div></td></tr></tbody></table></figure></li><li><p>代码<br>app.js, module1.js, module2.js, module3.js 和上面的一样</p></li><li><p>打包处理 js<br><code>browserify js/src/app.js -o js/dist/build.js</code><br><code>-o</code> output，输出。它之前为原始路径，之后为处理之后的路径。</p></li><li><p>页面引入<br>在 index.html 中引入打包处理之后的文件<br><code>&lt;script type="text/javascript" src="./js/dist/build.js"&gt;&lt;/script&gt;</code></p></li></ul><h1 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h1><p>Asynchronous Module Definition(异步模块定义)<br>专门用于浏览器端, 模块的加载是异步的。</p><h2 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h2><ul><li>定义暴露模块<figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//定义没有依赖的模块</span><br>define(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{<br>  <span class="hljs-keyword">return</span> 模块<br>})<br><span class="hljs-comment">//定义有依赖的模块</span><br>define([<span class="hljs-string">'module1'</span>, <span class="hljs-string">'module2'</span>], <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">m1, m2</span>)</span>{<br>  <span class="hljs-keyword">return</span> 模块<br>})<br></code></pre></div></td></tr></tbody></table></figure></li><li>引用使用模块<figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">require</span>([<span class="hljs-string">'module1'</span>, <span class="hljs-string">'module2'</span>], <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">m1, m2</span>)</span>{<br>  使用m1/m2<br>})<br></code></pre></div></td></tr></tbody></table></figure></li></ul><h2 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h2><h3 id="未使用AMD"><a href="#未使用AMD" class="headerlink" title="未使用AMD"></a>未使用AMD</h3><ul><li>创建项目结构<figure class="highlight md"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs md">|-js<br>  |-alerter.js<br>  |-dataService.js<br>|-app.js<br>|-test.html<br></code></pre></div></td></tr></tbody></table></figure></li><li>代码<figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// alerter.js</span><br><span class="hljs-comment">// 定义一个有依赖的模块</span><br>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-built_in">window</span>, dataService</span>) </span>{<br>  <span class="hljs-keyword">let</span> msg = <span class="hljs-string">'alerter.js'</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">showMsg</span>(<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-built_in">console</span>.log(msg, dataService.getName())<br>  }<br>  <span class="hljs-built_in">window</span>.alerter = { showMsg }<br>})(<span class="hljs-built_in">window</span>, dataService)<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// dataService.js</span><br><span class="hljs-comment">// 定义一个没有依赖模块</span><br>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-built_in">window</span></span>) </span>{<br>  <span class="hljs-keyword">let</span> name = <span class="hljs-string">'dataService.js'</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getName</span>(<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-keyword">return</span> name<br>  }<br>  <span class="hljs-built_in">window</span>.dataService = { getName }<br>})(<span class="hljs-built_in">window</span>)<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// app.js</span><br>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">alerter</span>) </span>{<br>  alerter.showMsg()<br>})(alerter)<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- test.html 里的 script --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"./js/dataService.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"./js/alerter.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"./app.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure></li><li>运行结果<figure class="highlight md"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs md">alerter.js dataService.js<br></code></pre></div></td></tr></tbody></table></figure></li></ul><h3 id="使用AMD"><a href="#使用AMD" class="headerlink" title="使用AMD"></a>使用AMD</h3><p><a href="http://101.132.137.99/home.html">Require.js</a></p><ul><li>创建项目结构<figure class="highlight md"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs md">-js <br> |-libs <br>   |-angular.js <br>   |-jquery.js<br>   |-require.js <br> |-modules <br>   |-alerter.js <br>   |-dataService.js <br> |-main.js|<br>-index.html<br></code></pre></div></td></tr></tbody></table></figure></li><li>代码<br>require.js, -jquery.js, require.js 里分别引用对应文件<figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// dataService.js</span><br><span class="hljs-comment">// 定义没有依赖的模块</span><br>define(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>  <span class="hljs-keyword">let</span> name = <span class="hljs-string">'dataService.js'</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getName</span>(<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-keyword">return</span> name<br>  }<br>  <span class="hljs-comment">// 暴露模块</span><br>  <span class="hljs-keyword">return</span> { getName }<br>})<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// alerter.js</span><br><span class="hljs-comment">// 定义有依赖的模块</span><br>define([<span class="hljs-string">'dS'</span>, <span class="hljs-string">'jquery'</span>], <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">dataService, $</span>) </span>{<br>  <span class="hljs-keyword">let</span> msg = <span class="hljs-string">'alerter.js'</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">showMsg</span>(<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-built_in">console</span>.log(msg, dataService.getName())<br>  }<br>  $(<span class="hljs-string">'body'</span>).css(<span class="hljs-string">'background'</span>, <span class="hljs-string">'lightblue'</span>)<br>  <span class="hljs-comment">// 暴露模块</span><br>  <span class="hljs-keyword">return</span> { showMsg }<br>})<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// main.js</span><br>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>  requirejs.config({<br>    <span class="hljs-comment">// baseUrl: '', //基本路径</span><br>    paths: {  <span class="hljs-comment">//配置路径</span><br>      dS: <span class="hljs-string">'./modules/dataService'</span>, <span class="hljs-comment">//路径不用加后缀名</span><br>      alerter: <span class="hljs-string">'./modules/alerter'</span>,<br>      jquery: <span class="hljs-string">'./libs/jquery'</span>,<br>      angular: <span class="hljs-string">'./libs/angular'</span><br>    },<br>    shim: { <span class="hljs-comment">//angular 不支持，单独配置</span><br>      angular: {<br>        <span class="hljs-built_in">exports</span>: <span class="hljs-string">'angular'</span><br>      }<br>    }<br>  });<br><br>  requirejs([<span class="hljs-string">'alerter'</span>, <span class="hljs-string">'angular'</span>], <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">alerter, angular</span>) </span>{<br>    alerter.showMsg()<br>    <span class="hljs-built_in">console</span>.log(angular)<br>  })<br>})()<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- index.html 里的 script --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">data-main</span>=<span class="hljs-string">"js/main.js"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"js/libs/require.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure></li><li>运行结果<figure class="highlight md"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs md">&lt;!-- 背景为淡蓝色 --&gt;<br>alerter.js dataService.js<br>{$interpolateMinErr: ƒ, element: ƒ, bootstrap: ƒ, copy: ƒ, extend: ƒ, …}<br></code></pre></div></td></tr></tbody></table></figure></li></ul><h1 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h1><p>Common Module Definition(通用模块定义)<br>专门用于浏览器端, 模块的加载是异步的。<br>模块使用时才会加载执行。</p><h2 id="基本语法-2"><a href="#基本语法-2" class="headerlink" title="基本语法"></a>基本语法</h2><ul><li>定义暴露模块<figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//定义没有依赖的模块</span><br>define(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-built_in">require</span>, <span class="hljs-built_in">exports</span>, <span class="hljs-built_in">module</span></span>)</span>{<br>  <span class="hljs-built_in">exports</span>.xxx = value<br>  <span class="hljs-built_in">module</span>.exports = value<br>})<br><br><span class="hljs-comment">//定义有依赖的模块</span><br>define(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-built_in">require</span>, <span class="hljs-built_in">exports</span>, <span class="hljs-built_in">module</span></span>)</span>{<br>  <span class="hljs-comment">//引入依赖模块(同步)</span><br>  <span class="hljs-keyword">var</span> module2 = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./module2'</span>)<br>  <span class="hljs-comment">//引入依赖模块(异步)</span><br>    <span class="hljs-built_in">require</span>.async(<span class="hljs-string">'./module3'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">m3</span>) </span>{<br>      <br>    })<br>  <span class="hljs-comment">//暴露模块</span><br>  <span class="hljs-built_in">exports</span>.xxx = value<br>})<br></code></pre></div></td></tr></tbody></table></figure></li><li>引入使用模块<figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">define(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-built_in">require</span></span>) </span>{<br>  <span class="hljs-keyword">var</span> m1 = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./module1'</span>)<br>  <span class="hljs-keyword">var</span> m4 = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./module4'</span>)<br>  m1.show()<br>  m4.show()<br>})<br></code></pre></div></td></tr></tbody></table></figure></li></ul><h2 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h2><p><a href="https://seajs.github.io/seajs/docs/">Sea.js</a></p><ul><li>创建项目结构<figure class="highlight md"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs md">|-js<br>  |-libs<br><span class="hljs-code">    |-sea.js</span><br><span class="hljs-code">  |-modules</span><br><span class="hljs-code">    |-module1.js</span><br><span class="hljs-code">    |-module2.js</span><br><span class="hljs-code">    |-module3.js</span><br><span class="hljs-code">    |-module4.js</span><br><span class="hljs-code">    |-main.js</span><br><span class="hljs-code">|-index.html</span><br></code></pre></div></td></tr></tbody></table></figure></li><li>代码<figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// module1.js</span><br><span class="hljs-comment">// 定义没有依赖的模块</span><br>define(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-built_in">require</span>, <span class="hljs-built_in">exports</span>, <span class="hljs-built_in">module</span></span>) </span>{<br>  <span class="hljs-keyword">let</span> msg = <span class="hljs-string">'module1'</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-keyword">return</span> msg<br>  }<br>  <span class="hljs-comment">// 暴露模块</span><br>  <span class="hljs-built_in">module</span>.exports = { foo }<br>})<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// module2.js</span><br>define(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-built_in">require</span>, <span class="hljs-built_in">exports</span>, <span class="hljs-built_in">module</span></span>) </span>{<br>  <span class="hljs-keyword">let</span> msg = <span class="hljs-string">'module2'</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bar</span>(<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-built_in">console</span>.log(msg)<br>  }<br>  <span class="hljs-built_in">module</span>.exports = bar<br>})<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// module3.js</span><br>define(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-built_in">require</span>, <span class="hljs-built_in">exports</span>, <span class="hljs-built_in">module</span></span>) </span>{<br>  <span class="hljs-keyword">let</span> data = <span class="hljs-string">'module3'</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun</span>(<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-built_in">console</span>.log(data)<br>  }<br>  <span class="hljs-built_in">exports</span>.module3 = { fun }<br>})<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// module4.js</span><br>define(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-built_in">require</span>, <span class="hljs-built_in">exports</span>, <span class="hljs-built_in">module</span></span>) </span>{<br>  <span class="hljs-keyword">let</span> msg = <span class="hljs-string">'module4'</span><br>  <span class="hljs-comment">// 同步引入</span><br>  <span class="hljs-keyword">let</span> module2 = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./module2'</span>)<br>  module2()<br>  <span class="hljs-comment">// 异步引入</span><br>  <span class="hljs-built_in">require</span>.async(<span class="hljs-string">'./module3'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">module3</span>) </span>{<br>    module3.module3.fun()<br>  })<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun2</span>(<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-built_in">console</span>.log(msg)<br>  }<br>  <span class="hljs-built_in">exports</span>.fun2 = fun2<br>})<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- index.html 里的 script --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">'text/javascript'</span> <span class="hljs-attr">src</span>=<span class="hljs-string">'js/libs/sea.js'</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">'text/javascript'</span>&gt;</span><br><span class="javascript">    seajs.use(<span class="hljs-string">'./js/modules/main.js'</span>);</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure></li><li>运行结果<figure class="highlight md"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs md">module1<br>module2<br>module4<br>module3<br></code></pre></div></td></tr></tbody></table></figure>module3 为异步引入，主程序执行完后执行</li></ul><h1 id="ES6-Module"><a href="#ES6-Module" class="headerlink" title="ES6 Module"></a>ES6 Module</h1><p>依赖模块需要编译打包处理</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ul><li>导出模块 export</li><li>引入模块 import</li></ul><h2 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h2><ul><li><p>创建项目结构</p><figure class="highlight md"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs md">|-js<br>  |-src<br><span class="hljs-code">    |-module1.js</span><br><span class="hljs-code">    |-module2.js</span><br><span class="hljs-code">    |-module3.js</span><br><span class="hljs-code">    |-main.js</span><br><span class="hljs-code">|-index.html</span><br><span class="hljs-code">|-package.json</span><br><span class="hljs-code">|-.babelrc</span><br></code></pre></div></td></tr></tbody></table></figure></li><li><p>准备工作<br>使用 <a href="https://www.babeljs.cn/repl">Babel</a> 将ES6编译为ES5代码</p><ol><li>定义package.json文件<figure class="highlight json"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">{<br>  <span class="hljs-attr">"name"</span> : <span class="hljs-string">"es6-babel-browserify"</span>,<br>  <span class="hljs-attr">"version"</span> : <span class="hljs-string">"1.0.0"</span><br>}<br></code></pre></div></td></tr></tbody></table></figure></li><li>安装 babel-cli, babel-preset-es2015<figure class="highlight bash"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># cli: command line interface 命令行接口</span><br><span class="hljs-comment"># ！！！一定要在管理员权限下安装</span><br>npm install babel-cli browserify -g<br><span class="hljs-comment"># preset 预设（将es6转换成es5的所有插件打包）</span><br>npm install babel-preset-es2015 --save-dev <br></code></pre></div></td></tr></tbody></table></figure></li><li>定义.babelrc文件<br>rc 文件（run control 运行时控制文件）<figure class="highlight json"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">{<br>  <span class="hljs-attr">"presets"</span>: [<span class="hljs-string">"es2015"</span>]<br>}<br></code></pre></div></td></tr></tbody></table></figure></li><li>安装 jQuery<figure class="highlight bash"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 安装 jQuery 1.xxx 的最新版本</span><br>npm install jquery@1<br></code></pre></div></td></tr></tbody></table></figure></li></ol></li><li><p>代码</p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// module1.js</span><br><span class="hljs-comment">// 暴露模块 分别暴露</span><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>{<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'foo() module1'</span>)<br>}<br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bar</span>(<span class="hljs-params"></span>) </span>{<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'bar() module1'</span>)<br>}<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// module2.js</span><br><span class="hljs-comment">// 统一暴露</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun</span>(<span class="hljs-params"></span>) </span>{<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'fun() module2'</span>)<br>}<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun2</span>(<span class="hljs-params"></span>) </span>{<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'fun2() module2'</span>)<br>}<br><span class="hljs-keyword">export</span> { fun, fun2 }<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// module3.js</span><br><span class="hljs-comment">// 默认暴露 </span><br><span class="hljs-comment">// 可以暴露任意数据类型，暴露什么数据接收到的就是什么数据</span><br><span class="hljs-comment">// export default value</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {<br>  msg: <span class="hljs-string">'默认暴露'</span>,<br>  <span class="hljs-function"><span class="hljs-title">foo</span>(<span class="hljs-params"></span>)</span> {<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.msg)<br>  }<br>}<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// main.js</span><br><span class="hljs-comment">// 引入其他的模块</span><br><span class="hljs-comment">// 语法：import xxx from '路径'</span><br><span class="hljs-keyword">import</span> $ <span class="hljs-keyword">from</span> <span class="hljs-string">'jquery'</span><br><span class="hljs-keyword">import</span> { foo, bar } <span class="hljs-keyword">from</span> <span class="hljs-string">'./module1'</span><br><span class="hljs-keyword">import</span> { fun, fun2 } <span class="hljs-keyword">from</span> <span class="hljs-string">'./module2'</span><br><span class="hljs-keyword">import</span> module3 <span class="hljs-keyword">from</span> <span class="hljs-string">'./module3'</span><br><br>$(<span class="hljs-string">'body'</span>).css(<span class="hljs-string">'background'</span>, <span class="hljs-string">'lightblue'</span>)<br>foo()<br>bar()<br>fun()<br>fun2()<br>module3.foo()<br></code></pre></div></td></tr></tbody></table></figure></li><li><p>转换打包</p><figure class="highlight bash"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 使用Babel将ES6编译为ES5代码(但包含CommonJS语法)</span><br>babel js/src -d js/build<br><span class="hljs-comment"># 使用Browserify编译js</span><br>browserify js/build/main.js -o js/dist/bundle.js<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- index.html 里的 script --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">'text/javascript'</span> <span class="hljs-attr">src</span>=<span class="hljs-string">'js/dist/bundle.js'</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure></li><li><p>结果</p><figure class="highlight md"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs md">&lt;!-- 背景为淡蓝色 --&gt;<br>foo() module1<br>bar() module1<br>fun() module2<br>fun2() module2<br></code></pre></div></td></tr></tbody></table></figure></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>每个模块有自己的作用域内执行<br>通过import创建的变量相当于const创建，所以不能单独放在等号左边<br>通过import创建的变量会跟其引入的来源绑定，来源变量发生变化，引入的变量也发生变化</p><div class="hljs code-wrapper"><pre><code class="js">// 导入其它模块的默认导出import xxx from './xxx.js'// 导入俱名导出import { a, b as bb , c as cc} from './x.js'// 同时导入默认及俱名导出import a, { b, c, d } from './mod.js'// 创建默认导出export default [1, 2, 3, 4]// 创建俱名导出export var a = 1export var b = 2var c = 3var d = 4export { c, d }//将foo.js的所有导出导入到foo变量import * as foo from './foo.js'// foo.default 为默认导出// foo.xxx 为俱名导出// 且都为getter setter，但set是无效的//将a.js的所有导出从当前文件再导出export * from './a.js'export * from './b.js'import xx from yy + '.js'</code></pre></div><p>所有的导入导出语句都必须出现在模块文件的最外层，即不能放入任何代码块，如if，函数，循环<br>所有导入的模块名称必须是静态的，不能有任何运算</p>]]></content>
    
    
    <categories>
      
      <category>web前端学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>front-end</tag>
      
      <tag>JS Modules</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web前端学习笔记8——AJAX</title>
    <link href="/posts/a885f819.html"/>
    <url>/posts/a885f819.html</url>
    
    <content type="html"><![CDATA[<h1 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>AJAX 全称为 Asynchronous JavaScript And XML，就是异步的 JS 和 XML。<br>通过 AJAX 可以在浏览器中向服务器发送异步请求，最大的优势：无刷新获取数据。<br>AJAX 不是新的编程语言，而是一种将现有的标准组合在一起使用的新方式。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>优点<br>可以无需刷新页面而与服务器端进行通信<br>允许根据用户事件来更新部分页面内容</li><li>缺点<br>没有浏览历史，不能回退<br>存在跨域问题(同源)<br>SEO 不友好</li></ul><h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h1><h2 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h2><figure class="highlight md"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs md">行      POST  /s?ie=utf-8  HTTP/1.1 <br>头      Host: atguigu.com<br><span class="hljs-code">        Cookie: name=guigu</span><br><span class="hljs-code">        Content-type: application/x-www-form-urlencoded</span><br><span class="hljs-code">        User-Agent: chrome 83</span><br><span class="hljs-code">空行</span><br><span class="hljs-code">体      username=admin&amp;password=admin</span><br></code></pre></div></td></tr></tbody></table></figure><p>在 Chrome 浏览器中，<br>Headers =&gt; Request Headers 查看请求报文行、头<br>Headers =&gt; From Data 查看请求体</p><h2 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h2><figure class="highlight md"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs md">行      HTTP/1.1  200  OK<br>头      Content-Type: text/html;charset=utf-8<br><span class="hljs-code">        Content-length: 2048</span><br><span class="hljs-code">        Content-encoding: gzip</span><br><span class="hljs-code">空行    </span><br><span class="hljs-code">体      &lt;html&gt;</span><br><span class="hljs-code">            &lt;head&gt;</span><br><span class="hljs-code">            &lt;/head&gt;</span><br><span class="hljs-code">            &lt;body&gt;</span><br><span class="hljs-code">                &lt;h1&gt;XXX&lt;/h1&gt;</span><br><span class="hljs-code">            &lt;/body&gt;</span><br><span class="hljs-code">        &lt;/html&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><p>Headers =&gt; Response Headers 查看响应行、头<br>Response 查看响应体</p><h1 id="原生方法"><a href="#原生方法" class="headerlink" title="原生方法"></a>原生方法</h1><h2 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h2><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>)<br><span class="hljs-keyword">const</span> app = express()<br>app.get(<span class="hljs-string">'/server'</span>, <span class="hljs-function">(<span class="hljs-params">request, response</span>) =&gt;</span> {<br>  <span class="hljs-comment">// 设置响应头，设置允许跨域</span><br>  response.setHeader(<span class="hljs-string">'Access-control-Allow-Origin'</span>, <span class="hljs-string">'*'</span>)<br>  <span class="hljs-comment">// 设置响应体</span><br>  response.send(<span class="hljs-string">'Hello Ajax'</span>)<br>})<br><br>app.listen(<span class="hljs-number">8000</span>, <span class="hljs-function">() =&gt;</span> {<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"服务已经启动，8000端口监听中......"</span>)<br>})<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>AJAX GET 请求<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css">    <span class="hljs-selector-id">#result</span> {</span><br>      width: 200px;<br>      height: 100px;<br>      border: solid 1px red;<br>    }<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>点击发送请求<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"result"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-comment">// 获取button元素</span></span><br><span class="javascript">    <span class="hljs-keyword">const</span> btn = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">'button'</span>)[<span class="hljs-number">0</span>]</span><br><span class="javascript">    <span class="hljs-keyword">const</span> result = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'result'</span>)</span><br><span class="javascript">    <span class="hljs-comment">// 绑定事件</span></span><br><span class="javascript">    btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><br><span class="javascript">      <span class="hljs-comment">// 1.创建对象</span></span><br><span class="javascript">      <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest()</span><br><span class="javascript">      <span class="hljs-comment">// 2.初始化 设置请求方法和url</span></span><br><span class="javascript">      xhr.open(<span class="hljs-string">'GET'</span>, <span class="hljs-string">'http://127.0.0.1:8000/server'</span>)</span><br><span class="javascript">      <span class="hljs-comment">// 3.发送</span></span><br>      xhr.send()<br><span class="javascript">      <span class="hljs-comment">// 4.事件绑定 处理服务端返回的结果</span></span><br><span class="javascript">      xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><br><span class="javascript">        <span class="hljs-comment">// 判断服务端返回了所有的结果</span></span><br><span class="javascript">        <span class="hljs-keyword">if</span> (xhr.readyState == <span class="hljs-number">4</span>) {</span><br><span class="javascript">          <span class="hljs-comment">// 判断响应状态码 200 404 403 401 500</span></span><br><span class="javascript">          <span class="hljs-comment">// 2xx 成功</span></span><br><span class="javascript">          <span class="hljs-keyword">if</span> (xhr.status &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.status &lt; <span class="hljs-number">300</span>) {</span><br><span class="javascript">            <span class="hljs-comment">// 处理结果 行 头 空行 体</span></span><br><span class="javascript">            <span class="hljs-comment">// 1.响应行</span></span><br><span class="javascript">            <span class="hljs-comment">// console.log(xhr.status)  //状态码</span></span><br><span class="javascript">            <span class="hljs-comment">// console.log(xhr.statusText)  //状态字符串</span></span><br><span class="javascript">            <span class="hljs-comment">// console.log(xhr.getAllResponseHeaders())  //所有响应头</span></span><br><span class="javascript">            <span class="hljs-comment">// console.log(xhr.response)  //响应体</span></span><br><br><span class="javascript">            <span class="hljs-comment">// 设置result文本</span></span><br><span class="javascript">            <span class="hljs-comment">// 可以实现不刷新页面直接获取响应体</span></span><br>            result.innerHTML = xhr.response<br>          }<br>        }<br>      }<br>    }<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><ul><li>设置请求参数<br>直接在url后以?开始加上，如上述代码url参数可改成<code>http://127.0.0.1:8000/server?a=100&amp;b=200&amp;c=300</code></li></ul><h2 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h2><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>)<br><span class="hljs-keyword">const</span> app = express()<br><br>app.post(<span class="hljs-string">'/server'</span>, <span class="hljs-function">(<span class="hljs-params">request, response</span>) =&gt;</span> {<br>  <span class="hljs-comment">// 设置响应头，设置允许跨域</span><br>  response.setHeader(<span class="hljs-string">'Access-control-Allow-Origin'</span>, <span class="hljs-string">'*'</span>)<br>  <span class="hljs-comment">// 设置响应体</span><br>  response.send(<span class="hljs-string">'Hello Ajax POST'</span>)<br>})<br><br>app.listen(<span class="hljs-number">8000</span>, <span class="hljs-function">() =&gt;</span> {<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"服务已经启动，8000端口监听中......"</span>)<br>})<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>AJAX POST 请求<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css">    <span class="hljs-selector-id">#result</span> {</span><br>      width: 200px;<br>      height: 100px;<br>      border: solid 1px red;<br>    }<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 把鼠标放在div上时，发送post请求，结果在div中显示 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"result"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> result = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'result'</span>)</span><br><span class="javascript">    result.addEventListener(<span class="hljs-string">'mouseover'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><br><span class="javascript">      <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest()</span><br><span class="javascript">      xhr.open(<span class="hljs-string">'POST'</span>, <span class="hljs-string">'http://127.0.0.1:8000/server'</span>)</span><br><span class="javascript">      <span class="hljs-comment">// 设置请求头</span></span><br><span class="javascript">      xhr.setRequestHeader(<span class="hljs-string">'Content-Type'</span>, <span class="hljs-string">'application/x-www-form-urlencoded'</span>)</span><br><span class="javascript">      xhr.send(<span class="hljs-string">'a=100&amp;b=200&amp;c=300'</span>)</span><br><span class="javascript">      xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><br><span class="javascript">        <span class="hljs-keyword">if</span> (xhr.readyState == <span class="hljs-number">4</span>) {</span><br><span class="javascript">          <span class="hljs-keyword">if</span> (xhr.status &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.status &lt; <span class="hljs-number">300</span>) {</span><br>            result.innerHTML = xhr.response<br>          }<br>        }<br>      }<br>    })<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><ul><li>设置请求参数<br>在<code>xhr.send()</code>里面添加，格式灵活，不限于’a=100&amp;b=200’的样式。</li><li>设置请求头<br>在<code>xhr.setRequestHeader()</code>里设置<br>若要自定义请求头如<code>xhr.setRequestHeader('name', 'fehek')</code>，需要在server.js里面添加响应头，新建一个app.all函数（可以接收任意类型的请求），在里面添加<code>response.setHeader('Access-control-Allow-Headers', '*')</code></li></ul><h2 id="JSON响应"><a href="#JSON响应" class="headerlink" title="JSON响应"></a>JSON响应</h2><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>)<br><span class="hljs-keyword">const</span> app = express()<br><br>app.all(<span class="hljs-string">'/json-server'</span>, <span class="hljs-function">(<span class="hljs-params">request, response</span>) =&gt;</span> {<br>  <span class="hljs-comment">// 设置响应头，设置允许跨域</span><br>  response.setHeader(<span class="hljs-string">'Access-control-Allow-Origin'</span>, <span class="hljs-string">'*'</span>)<br>  <span class="hljs-comment">// 响应头</span><br>  response.setHeader(<span class="hljs-string">'Access-control-Allow-Headers'</span>, <span class="hljs-string">'*'</span>)<br>  <span class="hljs-comment">// 响应一个数据</span><br>  <span class="hljs-keyword">const</span> data = {<br>    name: <span class="hljs-string">'fehek'</span><br>  }<br>  <span class="hljs-comment">// 对对象进行字符串转换</span><br>  <span class="hljs-keyword">let</span> str = <span class="hljs-built_in">JSON</span>.stringify(data)<br>  <span class="hljs-comment">// 设置响应体</span><br>  response.send(str)<br>})<br><br>app.listen(<span class="hljs-number">8000</span>, <span class="hljs-function">() =&gt;</span> {<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"服务已经启动，8000端口监听中......"</span>)<br>})<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>JSON响应<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css">    <span class="hljs-selector-id">#result</span> {</span><br>      width: 200px;<br>      height: 100px;<br>      border: solid 1px red;<br>    }<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"result"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> result = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'result'</span>)</span><br><span class="javascript">    <span class="hljs-built_in">window</span>.onkeydown = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><br><span class="javascript">      <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest()</span><br><span class="javascript">      xhr.responseType = <span class="hljs-string">'json'</span>  <span class="hljs-comment">// 2.自动转换</span></span><br><span class="javascript">      xhr.open(<span class="hljs-string">'GET'</span>, <span class="hljs-string">'http://127.0.0.1:8000/json-server'</span>)</span><br>      xhr.send()<br><span class="javascript">      xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><br><span class="javascript">        <span class="hljs-keyword">if</span> (xhr.readyState == <span class="hljs-number">4</span>) {</span><br><span class="javascript">          <span class="hljs-keyword">if</span> (xhr.status &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.status &lt; <span class="hljs-number">300</span>) {</span><br><span class="javascript">            <span class="hljs-comment">// 1.手动对数据转化</span></span><br><span class="javascript">            <span class="hljs-comment">// let data = JSON.parse(xhr.response)</span></span><br><span class="javascript">            <span class="hljs-comment">// console.log(data)</span></span><br><span class="javascript">            <span class="hljs-comment">// result.innerHTML = data.name</span></span><br><br><span class="javascript">            <span class="hljs-comment">// 2.自动转换</span></span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(xhr.response)</span><br>            result.innerHTML = xhr.response.name<br>          }<br>        }<br>      }<br>    }<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><h2 id="IE缓存问题"><a href="#IE缓存问题" class="headerlink" title="IE缓存问题"></a>IE缓存问题</h2><p>IE在实现ajax时，会优先以缓存的结果展现<br>解决方法：在请求中加一个时间戳，这样每次实际发送的请求都会不一样<br>如<code>xhr.open('GET', 'http://127.0.0.1:8000/ie?t=' + Date.now())</code></p><h2 id="请求超时"><a href="#请求超时" class="headerlink" title="请求超时"></a>请求超时</h2><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>)<br><span class="hljs-keyword">const</span> app = express()<br><br>app.get(<span class="hljs-string">'/delay'</span>, <span class="hljs-function">(<span class="hljs-params">request, response</span>) =&gt;</span> {<br>  <span class="hljs-comment">// 设置响应头，设置允许跨域</span><br>  response.setHeader(<span class="hljs-string">'Access-control-Allow-Origin'</span>, <span class="hljs-string">'*'</span>)<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {<br>    response.send(<span class="hljs-string">'延时响应'</span>)<br>  }, <span class="hljs-number">3000</span>)<br>})<br><br>app.listen(<span class="hljs-number">8000</span>, <span class="hljs-function">() =&gt;</span> {<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"服务已经启动，8000端口监听中......"</span>)<br>})<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">btn.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>  <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest()<br>  <span class="hljs-comment">// 超时设置（2s）</span><br>  xhr.timeout = <span class="hljs-number">2000</span><br>  <span class="hljs-comment">// 超时回溯</span><br>  xhr.ontimeout = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>    alert(<span class="hljs-string">"网络异常，请稍后重试"</span>)<br>  }<br>  <span class="hljs-comment">// 网络异常回溯</span><br>  xhr.onerror = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>    alert(<span class="hljs-string">"你的网络似乎出了一些问题"</span>)<br>  }<br>  xhr.open(<span class="hljs-string">'GET'</span>, <span class="hljs-string">'http://127.0.0.1:8000/delay'</span>)<br>  xhr.send()<br>  xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-keyword">if</span> (xhr.readyState == <span class="hljs-number">4</span>) {<br>      <span class="hljs-keyword">if</span> (xhr.status &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.status &lt; <span class="hljs-number">300</span>) {<br>        result.innerHTML = xhr.response<br>      }<br>    }<br>  }<br>})<br></code></pre></div></td></tr></tbody></table></figure><h2 id="取消请求"><a href="#取消请求" class="headerlink" title="取消请求"></a>取消请求</h2><p>调用abort</p><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>点击发送<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>点击取消<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> btns = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">'button'</span>)</span><br><span class="javascript">    <span class="hljs-keyword">let</span> xhr = <span class="hljs-literal">null</span></span><br><br><span class="javascript">    btns[<span class="hljs-number">0</span>].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><br><span class="javascript">      xhr = <span class="hljs-keyword">new</span> XMLHttpRequest()</span><br><span class="javascript">      xhr.open(<span class="hljs-string">'GET'</span>, <span class="hljs-string">'http://127.0.0.1:8000/delay'</span>)</span><br>      xhr.send()<br>    }<br><br><span class="javascript">    <span class="hljs-comment">// abort</span></span><br><span class="javascript">    btns[<span class="hljs-number">1</span>].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><br>      xhr.abort()<br>    }<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><h2 id="重复请求"><a href="#重复请求" class="headerlink" title="重复请求"></a>重复请求</h2><p>若重复发送相同请求，取消之前的请求，实现最新的请求</p><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>点击发送<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> btn = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">'button'</span>)[<span class="hljs-number">0</span>]</span><br><span class="javascript">    <span class="hljs-keyword">let</span> xhr = <span class="hljs-literal">null</span></span><br><span class="javascript">    <span class="hljs-comment">// 标识变量，是否正在发送ajax请求</span></span><br><span class="javascript">    <span class="hljs-keyword">let</span> isSending = <span class="hljs-literal">false</span></span><br><br><span class="javascript">    btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><br><span class="javascript">      <span class="hljs-comment">// 判断标识变量</span></span><br><span class="javascript">      <span class="hljs-comment">// 如果正在发送，则取消该请求，创建一个新的请求</span></span><br><span class="javascript">      <span class="hljs-keyword">if</span> (isSending) xhr.abort()</span><br><span class="javascript">      xhr = <span class="hljs-keyword">new</span> XMLHttpRequest()</span><br><span class="javascript">      <span class="hljs-comment">// 修改 标识变量的值</span></span><br><span class="javascript">      isSending = <span class="hljs-literal">true</span></span><br><span class="javascript">      xhr.open(<span class="hljs-string">'GET'</span>, <span class="hljs-string">'http://127.0.0.1:8000/delay'</span>)</span><br>      xhr.send()<br><span class="javascript">      xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><br><span class="javascript">        <span class="hljs-keyword">if</span> (xhr.readyState == <span class="hljs-number">4</span>) {</span><br><span class="javascript">          isSending = <span class="hljs-literal">false</span></span><br>        }<br>      }<br>    }<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><h1 id="其它方法"><a href="#其它方法" class="headerlink" title="其它方法"></a>其它方法</h1><h2 id="JQuery发送AJAX"><a href="#JQuery发送AJAX" class="headerlink" title="JQuery发送AJAX"></a>JQuery发送AJAX</h2><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>)<br><span class="hljs-keyword">const</span> app = express()<br><br>app.all(<span class="hljs-string">'/jQuery-server'</span>, <span class="hljs-function">(<span class="hljs-params">request, response</span>) =&gt;</span> {<br>  <span class="hljs-comment">// 设置响应头，设置允许跨域</span><br>  response.setHeader(<span class="hljs-string">'Access-control-Allow-Origin'</span>, <span class="hljs-string">'*'</span>)<br>  <span class="hljs-comment">// 设置响应头，允许自定义请求头</span><br>  response.setHeader(<span class="hljs-string">'Access-control-Allow-Headers'</span>, <span class="hljs-string">'*'</span>)<br>  <span class="hljs-comment">// response.send('Hello jQuery AJAX')</span><br>  <span class="hljs-keyword">const</span> data = { <span class="hljs-attr">name</span>: <span class="hljs-string">'fehek'</span> }<br>  response.send(<span class="hljs-built_in">JSON</span>.stringify(data))<br>})<br><br>app.listen(<span class="hljs-number">8000</span>, <span class="hljs-function">() =&gt;</span> {<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"服务已经启动，8000端口监听中......"</span>)<br>})<br><br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>jQuery 发送 AJAX 请求<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.bootcdn.net/ajax/libs/jquery/3.5.1/jquery.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"page-header"</span>&gt;</span>jQuery发送AJAX请求<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>GET<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>POST<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>通用型方法ajax<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    $(<span class="hljs-string">'button'</span>).eq(<span class="hljs-number">0</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><br><span class="javascript">      $.get(<span class="hljs-string">'http://127.0.0.1:8000/jQuery-server'</span>, { <span class="hljs-attr">a</span>: <span class="hljs-number">100</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">200</span> }, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>{</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(data)</span><br><span class="javascript">      }, <span class="hljs-string">'json'</span>)  <span class="hljs-comment">//输出对象</span></span><br>    })<br><span class="javascript">    $(<span class="hljs-string">'button'</span>).eq(<span class="hljs-number">1</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><br><span class="javascript">      $.post(<span class="hljs-string">'http://127.0.0.1:8000/jQuery-server'</span>, { <span class="hljs-attr">a</span>: <span class="hljs-number">100</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">200</span> }, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>{</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(data)  <span class="hljs-comment">//输出字符串</span></span><br>      })<br>    })<br><span class="javascript">    $(<span class="hljs-string">'button'</span>).eq(<span class="hljs-number">2</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><br><span class="javascript">      $.ajax({</span><br><span class="javascript">        <span class="hljs-comment">// url</span></span><br><span class="javascript">        url: <span class="hljs-string">'http://127.0.0.1:8000/jQuery-server'</span>,</span><br><span class="javascript">        <span class="hljs-comment">// 参数</span></span><br>        data: { a: 100, b: 200 },<br><span class="javascript">        <span class="hljs-comment">// 请求类型</span></span><br><span class="javascript">        type: <span class="hljs-string">'GET'</span>,</span><br><span class="javascript">        <span class="hljs-comment">// 响应体结果</span></span><br><span class="javascript">        dataType: <span class="hljs-string">'json'</span>,</span><br><span class="javascript">        <span class="hljs-comment">// 成功的回调</span></span><br><span class="javascript">        success: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>{</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(data)</span><br>        },<br><span class="javascript">        <span class="hljs-comment">// 超时时间</span></span><br>        timeout: 2000,<br><span class="javascript">        <span class="hljs-comment">// 失败的回调</span></span><br><span class="javascript">        error: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><br><span class="javascript">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'ERROR!'</span>)</span><br>        },<br><span class="javascript">        <span class="hljs-comment">// 头信息</span></span><br>        headers: {<br>          c: 300,<br>          d: 400<br>        }<br>      })<br>    })<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><h2 id="axios发送AJAX"><a href="#axios发送AJAX" class="headerlink" title="axios发送AJAX"></a>axios发送AJAX</h2><p><a href="https://github.com/axios/axios">axios</a></p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>)<br><span class="hljs-keyword">const</span> app = express()<br><br>app.all(<span class="hljs-string">'/axios-server'</span>, <span class="hljs-function">(<span class="hljs-params">request, response</span>) =&gt;</span> {<br>  <span class="hljs-comment">// 设置响应头，设置允许跨域</span><br>  response.setHeader(<span class="hljs-string">'Access-control-Allow-Origin'</span>, <span class="hljs-string">'*'</span>)<br>  <span class="hljs-comment">// 设置响应头，允许自定义请求头</span><br>  response.setHeader(<span class="hljs-string">'Access-control-Allow-Headers'</span>, <span class="hljs-string">'*'</span>)<br>  <span class="hljs-comment">// response.send('Hello jQuery AJAX')</span><br>  <span class="hljs-keyword">const</span> data = { <span class="hljs-attr">name</span>: <span class="hljs-string">'fehek'</span> }<br>  response.send(<span class="hljs-built_in">JSON</span>.stringify(data))<br>})<br><br>app.listen(<span class="hljs-number">8000</span>, <span class="hljs-function">() =&gt;</span> {<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"服务已经启动，8000端口监听中......"</span>)<br>})<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>axios 发送 AJAX 请求<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.bootcdn.net/ajax/libs/axios/0.21.1/axios.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>GET<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>POST<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>通用型方法ajax<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> btns = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">'button'</span>)</span><br><span class="javascript">    <span class="hljs-comment">// 配置 baseURL</span></span><br><span class="javascript">    axios.defaults.baseURL = <span class="hljs-string">'http://127.0.0.1:8000'</span></span><br><br><span class="javascript">    btns[<span class="hljs-number">0</span>].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><br><span class="javascript">      <span class="hljs-comment">// GET 请求</span></span><br><span class="javascript">      axios.get(<span class="hljs-string">'/axios-server'</span>, {</span><br><span class="javascript">        <span class="hljs-comment">// url 参数</span></span><br>        params: {<br>          id: 100,<br>          level: 5<br>        },<br><span class="javascript">        <span class="hljs-comment">// 请求头信息</span></span><br>        headers: {<br><span class="javascript">          name: <span class="hljs-string">'fehek'</span>,</span><br>          age: 21<br>        }<br><span class="javascript">      }).then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> {</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(value)</span><br>      })<br>    }<br><br><span class="javascript">    btns[<span class="hljs-number">1</span>].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><br><span class="javascript">      <span class="hljs-comment">// POST 请求</span></span><br><span class="javascript">      <span class="hljs-comment">//第一个参数是url，第二个参数是请求体，第三个参数是其它配置</span></span><br><span class="javascript">      axios.post(<span class="hljs-string">'/axios-server'</span>, {</span><br><span class="javascript">        <span class="hljs-comment">// 请求体</span></span><br><span class="javascript">        username: <span class="hljs-string">'admin'</span>,</span><br><span class="javascript">        password: <span class="hljs-string">'admin'</span></span><br>      }, {<br><span class="javascript">        <span class="hljs-comment">// url 参数</span></span><br>        params: {<br>          id: 100,<br>          level: 5<br>        },<br><span class="javascript">        <span class="hljs-comment">// 请求头信息</span></span><br>        headers: {<br>          height: 170,<br>          weight: 170,<br>        }<br>      })<br>    }<br><br><span class="javascript">    btns[<span class="hljs-number">2</span>].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><br>      axios({<br><span class="javascript">        <span class="hljs-comment">// 请求方法</span></span><br><span class="javascript">        method: <span class="hljs-string">'POST'</span>,</span><br><span class="javascript">        <span class="hljs-comment">// url</span></span><br><span class="javascript">        url: <span class="hljs-string">'/axios-server'</span>,</span><br><span class="javascript">        <span class="hljs-comment">// url 参数</span></span><br>        params: {<br>          id: 100,<br>          level: 5<br>        },<br><span class="javascript">        <span class="hljs-comment">// 头信息</span></span><br>        headers: {<br>          a: 100,<br>          b: 200<br>        },<br><span class="javascript">        <span class="hljs-comment">// 请求体参数</span></span><br>        data: {<br><span class="javascript">          username: <span class="hljs-string">'admin'</span>,</span><br><span class="javascript">          password: <span class="hljs-string">'admin'</span></span><br>        }<br><span class="javascript">      }).then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> {</span><br><span class="javascript">        <span class="hljs-comment">// 响应状态码</span></span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(response.status)</span><br><span class="javascript">        <span class="hljs-comment">// 响应状态字符串</span></span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(response.statusText)</span><br><span class="javascript">        <span class="hljs-comment">// 响应头信息</span></span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(response.headers)</span><br><span class="javascript">        <span class="hljs-comment">// 响应体</span></span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(response.data)</span><br>      })<br>    }<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><h2 id="fetch发送AJAX"><a href="#fetch发送AJAX" class="headerlink" title="fetch发送AJAX"></a>fetch发送AJAX</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WindowOrWorkerGlobalScope/fetch">fetch</a></p><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>fetch 发送 AJAXA 请求<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>AJAX请求<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'button'</span>);</span><br><span class="javascript">    btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><br><span class="javascript">      fetch(<span class="hljs-string">'http://127.0.0.1:8000/fetch-server?id=10'</span>, {</span><br><span class="javascript">        <span class="hljs-comment">//请求方法</span></span><br><span class="javascript">        method: <span class="hljs-string">'POST'</span>,</span><br><span class="javascript">        <span class="hljs-comment">//请求头</span></span><br>        headers: {<br><span class="javascript">          name: <span class="hljs-string">'fehek'</span></span><br>        },<br><span class="javascript">        <span class="hljs-comment">//请求体</span></span><br><span class="javascript">        body: <span class="hljs-string">'username=admin&amp;password=admin'</span></span><br><span class="javascript">      }).then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> {</span><br><span class="javascript">        <span class="hljs-comment">// return response.text()</span></span><br><span class="javascript">        <span class="hljs-keyword">return</span> response.json()</span><br><span class="javascript">      }).then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> {</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(response)</span><br>      })<br>    }<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><h1 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h1><p>同源：协议、域名、端口号必须完全相同。<br>违背同源策略就是跨域。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><p>JSONP(JSON with Padding)是一个非官方的跨域解决方案，只支持 get 请求。<br>在网页有一些标签天生具有跨域能力，比如：img，link，iframe，script。JSONP 就是利用 script 标签的跨域能力来发送请求的。</p><ul><li>原生实现</li></ul><ol><li>动态的创建一个 script 标签<br><code>var script = document.createElement("script")</code></li><li>设置 script 的 src，设置回调函数<figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">script.src = <span class="hljs-string">"http://localhost:3000/testAJAX?callback=abc"</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">abc</span>(<span class="hljs-params">data</span>) </span>{<br>  alert(data.name)<br>}<br></code></pre></div></td></tr></tbody></table></figure></li><li>将 script 添加到 body 中<br><code>document.body.appendChild(script)</code></li><li>服务器中路由的处理<figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">router.get(<span class="hljs-string">"/testAJAX"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>{<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"收到请求"</span>);<br>  <span class="hljs-keyword">var</span> callback = req.query.callback;<br>  <span class="hljs-keyword">var</span> obj = {<br>    name: <span class="hljs-string">"fehek"</span>,<br>    id: <span class="hljs-number">100</span><br>  }<br>  res.send(callback + <span class="hljs-string">"("</span> + <span class="hljs-built_in">JSON</span>.stringify(obj) + <span class="hljs-string">")"</span>);<br>})<br></code></pre></div></td></tr></tbody></table></figure></li></ol><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS">CORS</a><br>CORS(Cross-Origin Resource Sharing)，跨域资源共享。<br>CORS 是官方的跨域解决方案，它的特点是不需要在客户端做任何特殊的操作，完全在服务器中进行处理，支持 get 和 post 请求。</p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 设置响应头，来允许跨域请求</span><br><span class="hljs-comment">//res.set("Access-Control-Allow-Origin","http://127.0.0.1:3000");</span><br>res.set(<span class="hljs-string">"Access-Control-Allow-Origin"</span>,<span class="hljs-string">"*"</span>)<br>res.set(<span class="hljs-string">"Access-Control-Allow-Headers"</span>,<span class="hljs-string">"*"</span>)<br>res.set(<span class="hljs-string">"Access-Control-Allow-Method"</span>,<span class="hljs-string">"*"</span>)<br></code></pre></div></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>web前端学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>front-end</tag>
      
      <tag>AJAX</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web前端学习笔记7——计算机网络</title>
    <link href="/posts/71c437b1.html"/>
    <url>/posts/71c437b1.html</url>
    
    <content type="html"><![CDATA[<h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><table><thead><tr><th align="center">名称</th><th align="center">英语</th><th align="center">范围</th><th align="center">区域</th></tr></thead><tbody><tr><td align="center">广域网</td><td align="center">WAN(Wide Area NetWork)</td><td align="center">几十到几千公里</td><td align="center">跨省、跨国</td></tr><tr><td align="center">城域网</td><td align="center">MAN(Metro Area NetWork)</td><td align="center">5KM-50KM</td><td align="center">城市间</td></tr><tr><td align="center">局域网</td><td align="center">LAN(Local Area NetWork)</td><td align="center">1KM以内</td><td align="center">城区内</td></tr></tbody></table><h1 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h1><ul><li>层次结构设计的基本原则：<br>各层之间是相互独立的<br>每一层要有足够的灵活性<br>各层之间完全解耦</li></ul><table><thead><tr><th align="left">OSI 七层模型</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">应用层</td><td align="left">为计算机用户提供接口和服务</td></tr><tr><td align="left">表示层</td><td align="left">数据处理（编码解码、加密解密等）</td></tr><tr><td align="left">会话层</td><td align="left">管理（建立、维护、重连）通信会话</td></tr><tr><td align="left">传输层</td><td align="left">管理端到端的通信连接</td></tr><tr><td align="left">网络层</td><td align="left">数据路由（决定数据在网络的路径）</td></tr><tr><td align="left">数据链路层</td><td align="left">管理相邻节点之间的数据通信</td></tr><tr><td align="left">物理层</td><td align="left">数据通信的光电物理特性</td></tr></tbody></table><p>OSI最终并没有成为广为使用的标准模型</p><table><thead><tr><th align="left">TCP/IP 四层模型</th><th align="left">协议</th></tr></thead><tbody><tr><td align="left">应用层</td><td align="left">HTTP/FTP/SMTP/POP3…</td></tr><tr><td align="left">传输层</td><td align="left">TCP/UDP</td></tr><tr><td align="left">网络层</td><td align="left">IP/ICMP</td></tr><tr><td align="left">网络接口层</td><td align="left">Ethernet/ARP/RARP/PPP…</td></tr></tbody></table><p><img src="/image/post/IP%E6%A8%A1%E5%9E%8B.png" alt="IP模型"></p><h1 id="网络接口层"><a href="#网络接口层" class="headerlink" title="网络接口层"></a>网络接口层</h1><h2 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h2><p><strong>性能指标</strong></p><ul><li><p>为什么拉的 100M 光纤，测试峰值只有12M/s?<br>网络常用单位为 Mbps，bps = bit/s<br>100M/s = 100Mbps = 100Mbit/s<br>100Mbit/s = (100/8)MB/s = 12.5MB/s</p></li><li><p>时延<br>发送时延 = 数据长度(bit) / 发送速率(bit/s)[受限于计算机网卡]<br>传播时延 = 传输路径距离 / 传播速率(bit/s)[受限于传播介质]<br>排队时延：数据包在网络设备中等待被处理的时间<br>处理时延：数据包到达设备或者目的机器被处理所需要的时间<br>总时延 = 发送时延 + 传播时延 + 排队时延 + 处理时延</p></li><li><p>往返时间RTT(Route-Trip Time)<br>数据报文在端到端通信中的来回一次的时间<br>通常使用 ping 命令查看 RTT</p></li></ul><h2 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h2><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><ol><li><p>封装成帧<br>“帧”是数据链路层数据的基本单位<br>发送端在网络层的一段数据前后添加特定标记形成“帧”<br>接收端根据前后特定标记识别出“帧”<br><br>帧首部(SOH) | IP数据报（“帧”的数据）| 帧尾部(EOT)<br>帧首部和尾部是特定的控制字符（特定比特流）<br>SOH: 00000001<br>EOT: 00000100</p></li><li><p>透明传输<br>控制字符在帧数据中，要当做不存在去处理<br><br>数据里面恰好有这些比特流怎么办？<br>在前面加一个转义字符(ESC)</p></li><li><p>差错检测</p></li></ol><ul><li>奇偶校验码：出现偶数个错误，检测不到错误</li><li>循环冗余校验码CRC：一种根据传输或保存的数据而产生固定位数校验码的方法，检测数据传输或者保存后可能出现的错误生成的数字计算出来并且附加到数据后面。<br>CRC的错误检测能力与位串的阶数r有关<br>数据链路层只进行数据的检测，不进行纠正<br>CRC可校验位串：<ol><li>选择一个用于校验的多项式G(x)，并在数据尾部添加r个0</li><li>将添加r个0后的数据，使用模“2”除法除以多项式的位串</li><li>得到的余数填充在原数据r个0的位置得到可校验的位串<br>模“2”除法：是二进制下的除法；与算术除法类似，但除法不借位，实际是“异或”操作</li></ol></li></ul><p>e.g. 使用CRC计算101001的可校验位串<br>G(x) = x<sup>3</sup> + x<sup>2</sup> + 1<br>G(x) = 1 * x<sup>3</sup> + 1 * x<sup>2</sup> + 0 * x + 1<br>=&gt; 二进制位串：1101，最高阶3 =&gt; 原来的数尾部添加3个0，101001000<br>101001000 模“2”除法除以 1101 =&gt; 得到余数 001<br>余数填充在最后3位，101001000 =&gt; 可校验位串101001001<br>接收端接收的数据除以G(x)的位串（101001001 / 1101），余数为 0 则没有出错</p><h3 id="MTU"><a href="#MTU" class="headerlink" title="MTU"></a>MTU</h3><p>最大传输单元MTU(Maximum Transmission Unit)<br>数据链路层的数据帧也不是无限大的，数据帧长度受MTU限制<br>数据帧过大或过小都会影响传输的效率，以太网MTU一般为1500字节</p><p>路径MTU：路径MTU由链路中MTU的最小值决定（木桶效应）</p><h3 id="MAC地址"><a href="#MAC地址" class="headerlink" title="MAC地址"></a>MAC地址</h3><p>MAC地址（物理地址、硬件地址）<br>每一个设备都拥有唯一的MAC地址<br>MAC地址共48位，使用十六进制表示<br>查看计算机的MAC地址：<code>ipconfig /all</code>，例 68-07-15-6F-54-F0</p><h3 id="以太网协议"><a href="#以太网协议" class="headerlink" title="以太网协议"></a>以太网协议</h3><p>以太网(Ethernet)是一种使用广泛的<strong>局域网</strong>技术<br>以太网是一种应用于数据链路层的协议<br>使用以太网可以完成<strong>相邻设备</strong>的数据帧传输</p><table><thead><tr><th align="center">目的地址</th><th align="center">源地址</th><th align="center">类型</th><th align="center">帧数据</th><th align="center">CRC</th></tr></thead><tbody><tr><td align="center">6</td><td align="center">6</td><td align="center">2</td><td align="center">46~1500</td><td align="center">4</td></tr></tbody></table><p>目标地址和源地址都是MAC地址，48位即6字节</p><p>MAC地址会映射到具体接口，例如下面的MAC地址表</p><table><thead><tr><th align="center">MAC地址</th><th align="center">硬件接口</th></tr></thead><tbody><tr><td align="center">68-07-15-6F-54-F0</td><td align="center">接口1</td></tr><tr><td align="center">68-07-15-6F-54-F1</td><td align="center">接口2</td></tr><tr><td align="center">68-07-15-6F-54-F2</td><td align="center">接口4</td></tr><tr><td align="center">…</td><td align="center">…</td></tr></tbody></table><p>A设备通过网卡发出数据帧<br>数据帧达到路由器，路由器取出前6字节<br>路由器匹配MAC地址表，找到对应的网络接口<br>路由器往该网络接口发送数据帧</p><p>E(路由器)检查MAC地址表，发现没有C的信息<br>E将广播A的数据包到除A以外的端口<br>E将受到来自B、C的回应，并将地址记录</p><p>它能实现相邻物理节点传输。<br>但是怎么跨设备传输呢？需要网络层才能解决。</p><h1 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h1><h2 id="IP协议相关"><a href="#IP协议相关" class="headerlink" title="IP协议相关"></a>IP协议相关</h2><p>IP协议使得复杂的实际网络变为一个虚拟互连的网络<br>IP协议使得网络层可以屏蔽底层细节而专注网络层的数据转发<br>IP协议<strong>解决了在虚拟网络中数据报传输路径的问题</strong></p><h3 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h3><p>IP地址长度为32位，常分成4个8位<br>IP地址常使用点分十进制来表示(0~255 . 0~255 . 0~255 . 0~255)，最多可以表示2<sup>32</sup> = 4294961296个IP地址</p><h3 id="IP协议"><a href="#IP协议" class="headerlink" title="IP协议"></a>IP协议</h3><p><img src="/image/post/IP%E5%8D%8F%E8%AE%AE.png"></p><ul><li>版本：占4位，指的是IP协议的版本，通信双方的版本必须一致，当前主流版本是4，即IPv4，也有IPv6</li><li>首部位长度：占4位，最大数值为15，单位是32位字（4个字节），IP首部最大长度为15 * 4 = 60字节</li><li>服务类型（TOS）：表示当前的数据包是高优先级的，还是低优先级的。数据包是按照 TOS 被分配到3个波段（band0、band1、band2）里面的。</li><li>总长度：占16位，最大数值为65535，表示的是IP数据总长度（IP首部+IP数据）<br>数据在数据链路层中的传输受最大传输单元 MTU 的限制，而 MTU 一般为为 1500 个字节，如果 IP 数据报的长度高于 MTU 的话，数据链路层将会把 IP 数据报进行 分片，即拆分成多个数据帧进行传输。</li><li>标识：协议内部自身使用，不需要关注。</li><li>标志：占3位，目前只有两位是有意义的，表示标识是否进行分片。</li><li>片偏移：占 13 位，如果发生了分片，这里将会记录当前的数据帧保存的是第几个偏移的 IP 数据。</li><li>TTL：占8位，表明IP数据报文在网络中的寿命，每经过一个设备，TTL减1，当TTL=0时，网络设备必须丢弃该报文。<br>当 IP 报文在网络中找不到终点的时候，避免 IP 数据在网络中无限进行传输，消耗带宽。</li><li>协议：占8位，表明 IP 数据所携带的具体数据是什么协议的。<table><thead><tr><th align="center">协议名</th><th align="center">ICMP</th><th align="center">IGMP</th><th align="center"><strong>IP</strong></th><th align="center">TCP</th><th align="center">UDP</th><th align="center">OSPF</th><th align="center">…</th></tr></thead><tbody><tr><td align="center">字段值</td><td align="center">1</td><td align="center">2</td><td align="center"><strong>4</strong></td><td align="center">6</td><td align="center">17</td><td align="center">89</td><td align="center">…</td></tr></tbody></table></li><li>首部校验和：占16位，校验 IP 首部是否有错，如果出错会进行丢弃。</li><li>源 IP 地址：发送 IP 数据报文的 IP 地址。</li><li>目的 IP 地址：数据报到达的 IP 的地址。</li></ul><h3 id="IP地址的转发"><a href="#IP地址的转发" class="headerlink" title="IP地址的转发"></a>IP地址的转发</h3><ul><li><p>路由表<br>不同于 MAC 地址表是由一组一组的 MAC 地址与硬件接口组成的，路由表是由一组一组的 目的 IP 地址与 下一跳的 IP 地址组成的。<br>计算机或者路由器都拥有路由表。</p><table><thead><tr><th align="center">目的IP地址</th><th align="center">下一跳IP地址</th></tr></thead><tbody><tr><td align="center">IP1</td><td align="center">IP4</td></tr><tr><td align="center">IP2</td><td align="center">IP5</td></tr><tr><td align="center">IP3</td><td align="center">IP6</td></tr><tr><td align="center">…</td><td align="center">…</td></tr></tbody></table></li><li><p>逐跳(hop-by-hop)：数据是从目的设备传输到下一个网络1，又从下一个网络1传输到路由器，又从路由器跳到下一个网络2，所以是一跳一跳，即 hop-by-hop。</p></li><li><p>MAC 地址与 IP 地址最大的区别</p></li></ul><ol><li>数据帧每一跳的 MAC 地址都在变化，而IP 数据报每一跳的 IP 地址始终不变。</li><li>IP 地址具有远程定位功能，而 MAC 地址更像是身份证号，它的唯一性是为了组网时可以不用担心不同的网卡在一个网络里会产生冲突，从硬件角度保证不同的网卡有不同的标识。</li><li>相比于 IP 地址，MAC 地址的通信范围比较小，局限在一个子网里。例如：从 192.168.0.1/24 访问 192.168.0.9/24 是可以用 MAC 地址的。</li></ol><h3 id="子网划分"><a href="#子网划分" class="headerlink" title="子网划分"></a>子网划分</h3><p><img src="/image/post/%E5%88%86%E7%B1%BB%E7%9A%84IP%E5%9C%B0%E5%9D%80.png"></p><table><thead><tr><th align="center">-</th><th align="center">最小网络号</th><th align="center">最大网络号</th><th align="center">子网数量</th><th align="center">最小主机号</th><th align="center">最大主机号</th><th align="center">主机数量</th></tr></thead><tbody><tr><td align="center">A</td><td align="center">1</td><td align="center">127(01111111)</td><td align="center">2<sup>7</sup> - 2</td><td align="center">0.0.1</td><td align="center">255.255.254</td><td align="center">2<sup>24</sup> - 2</td></tr><tr><td align="center">B</td><td align="center">128.1</td><td align="center">191.255</td><td align="center">2<sup>14</sup> - 1</td><td align="center">0.1</td><td align="center">255.254</td><td align="center">2<sup>16</sup> - 2</td></tr><tr><td align="center">C</td><td align="center">192.0.1</td><td align="center">223.255.255</td><td align="center">2<sup>21</sup> - 1</td><td align="center">1</td><td align="center">254</td><td align="center">2<sup>8</sup> - 2</td></tr></tbody></table><ul><li><p>特殊的主机号<br>主机号全0表示当前网络段，不可分配为特定主机<br>主机号为全1表示广播地址，向当前网络段所有主机发消息</p></li><li><p>特殊的网络号<br>A类地址网络段全0(00000000)表示特殊网络<br>A类地址网络段后7位全1(01111111:127)表示回环地址<br>B类地址网络段(10000000.00000000:128.0)是不可使用的<br>C类地址网络段(192.0.0)是不可使用的<br><br>本地回环地址(Loopback Address)：127.0.0.1，不属于任何一个有类别地址类。它代表设备的本地虚拟接口，所以默认被看作是永远不会废弃的接口。在 Windwos 操作系统中也有相似的定义，所以一般在安装网卡前就可以 ping 通这个本地回环地址。一般都会用来检查本地网络协议、基本数据接口等是否是正常的。</p></li><li><p>分类地址的补充<br>D 类地址：1110…..<br>E 类地址：1111…..<br>它们都仅用作特殊用途。</p></li></ul><p><img src="/image/post/%E5%AD%90%E7%BD%91.png"></p><ul><li><p>子网掩码<br>IP &amp; 子网掩码 = 该 IP 对应的子网号<br>与 IP 地址一样，都是32位。<br>由连续的1和连续的0组成。<br>某一个子网的子网掩码具备网络号位数个连续的1。</p></li><li><p>无分类编址 CIDR<br><img src="/image/post/CIDR.png"><br>CIDR 中没有 A、B、C 类网络号和子网划分的概念。<br>CIDR 将 网络前缀 相同的 IP 地址称为一个 CIDR 地址块。<br>网络前缀是任意位数的。<br>相比原来子网划分更加灵活。<br>CIDR 使用了斜线记法，例如：193.10.10.129/25 表示网络号为 25 位，主机号为 7位</p></li></ul><h2 id="ARP与RARP"><a href="#ARP与RARP" class="headerlink" title="ARP与RARP"></a>ARP与RARP</h2><h3 id="ARP"><a href="#ARP" class="headerlink" title="ARP"></a>ARP</h3><p>地址解析协议（Address Resolution Protocol）<br>网络层IP32位地址 ——ARP协议——&gt; 数据链路层MAC48位地址</p><ul><li>ARP缓存表</li></ul><table><thead><tr><th align="center">IP地址</th><th align="center">MAC地址</th></tr></thead><tbody><tr><td align="center">192.168.01.01</td><td align="center">0d-56-33-50-fc-98</td></tr><tr><td align="center">259.1.1.3</td><td align="center">01-00-5e-39-ff-fa-7f</td></tr></tbody></table><p>ARP缓存表是ARP协议和RARP协议运行的关键<br>ARP缓存表缓存了IP地址到硬件地址之间的映射关系<br>ARP缓存表中的记录并不是永久有效的，有一定的期限<br>查看ARP缓存表<code>arp -a</code></p><table><thead><tr><th align="center">类型<br>0806</th><th align="center">APR请求/应答</th><th align="center">PAD</th></tr></thead><tbody><tr><td align="center">2</td><td align="center">28</td><td align="center">18</td></tr></tbody></table><h3 id="RARP"><a href="#RARP" class="headerlink" title="RARP"></a>RARP</h3><p>逆地址解析协议（Reverse Address Resolution Protocol）<br>数据链路层MAC48位地址 ——RARP协议——&gt; 网络层IP32位地址</p><table><thead><tr><th align="center">类型<br>8035</th><th align="center">RAPR请求/应答</th><th align="center">PAD</th></tr></thead><tbody><tr><td align="center">2</td><td align="center">28</td><td align="center">18</td></tr></tbody></table><h2 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a>NAT</h2><p>网络地址转换，NAT(Network Address Translation)</p><ul><li>内网地址：内部机构使用，避免与外网地址重复<br>A 类：10.0.0.0~10.255.255.255（支持千万数量级设备）。<br>B 类：172.16.0.0~172.31.255.255（支持百万数据级设备）。<br>C 类：192.168.0.0~192.168.255.255（支持万数量级设备）。</li><li>外网地址：全球范围使用，全球公网唯一</li></ul><p>可以将设备内网地址和端口号转换为外网地址与端口号<br>由于同时转换了 Port ，即进行了 端口映射，NAT 也可称为 NA(P)T</p><h2 id="ICMP"><a href="#ICMP" class="headerlink" title="ICMP"></a>ICMP</h2><p>网络控制报文协议，ICMP(Internet Control Message Protocol)<br>主要用于辅助 IP 协议发送与接收数据，它可以报告错误信息或异常情况。</p><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p><img src="/image/post/ICMP.png"><br>ICMP 协议被封装在 IP 数据报的数据之中，其也分为 报文首部与报文数据。如果需要使用 ICMP 协议，则需要在 IP 协议首部的8位协议中写入1，以表明 IP 数据所携带的具体数据是 ICMP 协议的。</p><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><p><img src="/image/post/ICMP%E5%B7%AE%E9%94%99%E6%8A%A5%E5%91%8A%E6%8A%A5%E6%96%87.png" alt="ICMP差错报告报文"><br><img src="/image/post/ICMP%E8%AF%A2%E9%97%AE%E6%8A%A5%E6%96%87.png" alt="ICMP询问报文"></p><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ul><li>Ping 应用</li></ul><ol><li>Ping 回环地址 127.0.0.1，不通，说明计算机使用的协议栈有问题，需要重装系统或协议栈。</li><li>Ping 网关地址（路由地址），内网 ping 192.168.0.1/ 192.168.1.1，通，说明本机到路由器的地址是通的。不通，则说明 WIFI、网线是有问题的。</li><li>Ping 远端地址不通，则说明家中到 ISP 的网络之间是有故障的。这个时候就要从电信、联通、移动等 ISP 来排查问题了。</li></ol><ul><li>Traceoute 应用<br>用于探测 IP 数据报在网络中走过的路径。<br>巧妙地应用了 ICMP 终点不可达差错报文与 TTL 机制，为了探测 IP 数据报文走过的路径，它会发送一个 UDP 数据包。将 TTL 设置为1，一旦遇到一个路由器，它就会牺牲了。接着返回一个 ICMP 包，就是网络差错包，类型是时间超时，这样就能知道一个路由器有多远。</li></ul><h1 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h1><p>在传输层重点解决的是两个设备它们直接是如何进行通信的。</p><h2 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h2><ul><li>进程与进程的通信<br>不同于在单个操作系统内使用的进程间通信（Unix 域套接字、共享内存），网络通信可以跨设备、跨网络进行通信。</li><li>端口的概念<br>使用端口来标记不同的网络进程。<br>端口使用16比特位表示（0~65535）。<table><thead><tr><th align="center">FTP</th><th align="center">HTTP</th><th align="center">HTTPS</th><th align="center">DNS</th><th align="center">TELNET</th></tr></thead><tbody><tr><td align="center">21</td><td align="center">80</td><td align="center">443</td><td align="center">53</td><td align="center">23</td></tr></tbody></table></li></ul><h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><p>用户数据报协议，UDP(User Datagram Protocol)<br>不会对数据报进行任何的处理，即不合并，也不拆分数据<br><img src="/image/post/UDP.png"></p><ul><li>报文结构<br><img src="/image/post/UDP%E6%8A%A5%E6%96%87%E7%BB%93%E6%9E%84.png"><br>UDP 长度最小值为 8， 即仅包括 UDP 首部。<br>校验和是用来检测 UDP 的数据报在传输过程中是否出错。</li><li>UDP 是无连接协议<br>UDP 不能保证可靠的交付数据<br>UDP 是面向报文传输的<br>UDP 没有拥塞控制<br>UDP 的首部开销很小</li></ul><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><h3 id="TCP协议详解"><a href="#TCP协议详解" class="headerlink" title="TCP协议详解"></a>TCP协议详解</h3><ul><li>TCP 是面向连接的协议<br>TCP 的一个连接有两端（点对点通信）<br>TCP 提供可靠的传输服务<br>TCP 协议提供全双工的通信<br>TCP 是面向字节流的协议</li></ul><p><img src="/image/post/TCP.png"></p><ul><li><p>序号<br>0 ~ 2<sup>32</sup> - 1，一个字节一个序号，数据首字节序号</p></li><li><p>确认号<br>0 ~ 2<sup>32</sup> - 1，一个字节一个序号，期望收到数据的首字节序号<br>确认号为N，则表示 N - 1 序号的数据都已经收到</p></li><li><p>数据偏移<br>占4位：0 ~ 15，单位为：32字 =&gt; 首部范围为20~60字节<br>数据偏移首部的距离，因为 TCP 选项的大小是不确定的，所以需要此数据项</p></li><li><p>TCP标记<br>占6位，每位都有不同的含义</p><table><thead><tr><th align="left">标记</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">URG</td><td align="left">Urgent紧急位，URG = 1,表示紧急数据</td></tr><tr><td align="left">ACK</td><td align="left">Acknowledgement确认位，ACK = 1，确认号才生效</td></tr><tr><td align="left">PSH</td><td align="left">Push推送位，PSH = 1，表示需要尽快地把数据交付给应用层</td></tr><tr><td align="left">RST</td><td align="left">Reset重置位，RST = 1，重新建立连接</td></tr><tr><td align="left">SYN</td><td align="left">Synchronization同步位，SYN = 1表示连接请求报文</td></tr><tr><td align="left">FIN</td><td align="left">Finish终止位，FIN = 1表示释放连接</td></tr></tbody></table></li><li><p>窗口<br>占16位：0 ~ 2 ^ 16 - 1<br>窗口指明允许对方发送的数据量。例如：确认号为501，窗口为1000，那么可以接收序号的范围为 501 ~ 1000。</p></li><li><p>紧急指针<br>紧急数据（URG = 1）<br>指定紧急数据在报文中的位置</p></li><li><p>TCP选项<br>最多40字节<br>支持未来的扩展</p></li></ul><h3 id="可靠传输"><a href="#可靠传输" class="headerlink" title="可靠传输"></a>可靠传输</h3><ul><li>停止等待协议<br><img src="/image/post/%E5%81%9C%E6%AD%A2%E7%AD%89%E5%BE%85%E5%8D%8F%E8%AE%AE_%E6%97%A0%E5%B7%AE%E9%94%99.png"><br><img src="/image/post/%E5%81%9C%E6%AD%A2%E7%AD%89%E5%BE%85%E9%87%8D%E4%BC%A0_%E5%8F%91%E9%80%81%E4%B8%A2%E5%A4%B1.png" alt="发送的消息在路上丢失了"><br><img src="/image/post/%E5%81%9C%E6%AD%A2%E7%AD%89%E5%BE%85%E9%87%8D%E4%BC%A0_%E7%A1%AE%E8%AE%A4%E4%B8%A2%E5%A4%B1.png" alt="确认的消息在路上丢失了"><br><img src="/image/post/%E5%81%9C%E6%AD%A2%E7%AD%89%E5%BE%85%E9%87%8D%E4%BC%A0_%E7%A1%AE%E8%AE%A4%E5%BE%88%E4%B9%85.png"><br>以上情况都通过超时重传来保证可靠传输<br>超时定时器：每发送一个消息，都需要设置一个定时器<ul><li>停止等待协议是最简单的可靠传输协议</li><li>停止等待协议对信道的利用效率不高</li></ul></li><li>连续ARQ协议<br>ARQ（Automatic Repeat Request，自动重传请求协议）<ul><li>累计确认<br><img src="/image/post/%E8%BF%9E%E7%BB%ADARQ_%E7%B4%AF%E8%AE%A1%E7%A1%AE%E8%AE%A4.png"><br>只要我收到第5个消息的确认了，就表示第 1 ~ 5 个消息接收方都收到了。</li><li>滑动窗口<br><img src="/image/post/%E8%BF%9E%E7%BB%ADARQ_%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3.png"><br>窗口中的数据都可以发送。<br>通过移动窗口的方式来标识没有接收到确认的消息。<br>采用了累积确认的方式，并不需要对每一个消息都进行确认。</li></ul></li><li>TCP 的可靠传输基于连续 ARQ 协议。<br>TCP 的滑动窗口以字节为单位。<br><img src="/image/post/TCP_%E5%8F%AF%E9%9D%A0%E4%BC%A0%E8%BE%93.png"></li><li>TCP协议的选择重传<br><img src="/image/post/TCP_%E9%80%89%E6%8B%A9%E9%87%8D%E4%BC%A0.png"><br>选择重传需要指定需要重传的字节<br>每一个字节都有唯一的32位序号（4字节）<br>要重传的数据是存储在“TCP 选项”中，其中最多只能存储 10 个序号，即 5 个范围段的信息。<br>选择重传的是一个信息边界，即一段字节流，例如：传送 1000 ~ 1200，2000 ~ 3000 这个范围内的信息。</li></ul><h3 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h3><p>流量控制指的是让发送方发送速率不要太快。TCP 使用了滑动窗口来实现流量控制。</p><ul><li>滑动窗口<br>接收方可以调整滑动窗口的大小来控制发送方发送数据的效率。<br>当接收方将 rwnd 从0调整为1000并将这个信息发送给发送方时，消息丢失了，会导致发送方和接收方都会等待，形成一个死锁局面。</li><li>坚持定时器<br>坚持定时器是使用滑动窗口进行流量控制的时候设置的。<br>当接收到窗口为0的消息，则启动坚持定时器。<br>坚持定时器每隔一段时间发送一个窗口探测报文。</li></ul><h1 id="网络攻击"><a href="#网络攻击" class="headerlink" title="网络攻击"></a>网络攻击</h1><p>XSS CSRF SQL Inject</p>]]></content>
    
    
    <categories>
      
      <category>web前端学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>front-end</tag>
      
      <tag>Computer Networks</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web前端学习笔记6.5——JS简例</title>
    <link href="/posts/7e41b4b8.html"/>
    <url>/posts/7e41b4b8.html</url>
    
    <content type="html"><![CDATA[<h1 id="搜索栏"><a href="#搜索栏" class="headerlink" title="搜索栏"></a>搜索栏</h1><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>    input {<br><span class="css">      <span class="hljs-selector-tag">color</span>: <span class="hljs-selector-id">#999</span></span><br>    }<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"手机"</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-comment">// 1.获取元素</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> text = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'input'</span>)</span><br><span class="javascript">    <span class="hljs-comment">// 2.注册事件 获得焦点事件 onfocus</span></span><br><span class="javascript">    text.onfocus = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><br><span class="javascript">      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.value === <span class="hljs-string">'手机'</span>) {</span><br><span class="javascript">        <span class="hljs-built_in">this</span>.value = <span class="hljs-string">''</span></span><br>      }<br><span class="javascript">      <span class="hljs-comment">// 获得焦点需要把文本框里的颜色变深</span></span><br><span class="javascript">      <span class="hljs-built_in">this</span>.style.color = <span class="hljs-string">'#333'</span></span><br>    }<br><span class="javascript">    <span class="hljs-comment">// 3.注册事件 失去焦点事件 onblur</span></span><br><span class="javascript">    text.onblur = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><br><span class="javascript">      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.value === <span class="hljs-string">''</span>) {</span><br><span class="javascript">        <span class="hljs-built_in">this</span>.value = <span class="hljs-string">'手机'</span></span><br>      }<br><span class="javascript">      <span class="hljs-comment">// 失去焦点需要把文本框里的颜色变深</span></span><br><span class="javascript">      <span class="hljs-built_in">this</span>.style.color = <span class="hljs-string">'#999'</span></span><br>    }<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>web前端学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>front-end</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web前端学习笔记6——DOM、BOM</title>
    <link href="/posts/df82c88f.html"/>
    <url>/posts/df82c88f.html</url>
    
    <content type="html"><![CDATA[<h1 id="DOM简介"><a href="#DOM简介" class="headerlink" title="DOM简介"></a>DOM简介</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>文件对象模型（Document Object Model），是W3C组织推荐的可扩展标记语言（HTML或XML）的标准编程接口。<br>通过DOM接口可以改变网页的内容、结构和样式。</p><h2 id="DOM树"><a href="#DOM树" class="headerlink" title="DOM树"></a>DOM树</h2><p>文档：一个页面就就是一个文档，DOM中使用document表示<br>元素：页面中所有标签都是元素，DOM中使用element表示<br>节点：网页中所有内容都是节点（标签、属性、文本、注释等），DOM中使用node表示<br>DOM把以上内容都看做是对象</p><h1 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h1><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/getElementById">document.getElementById()</a>：根据ID获取<br>参数是大小写敏感的字符串，返回的是一个元素对象；<br>console.dir 打印返回的元素对象，更好的查看里面的属性和方法。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/getElementsByTagName">document.getElementsByTagName()</a>：根据标签名获取<br>返回带有指定标签名的对象的集合，以伪数组的形式存储；<br>如果页面中只有一个元素，返回的还是伪数组的形式；<br>如果页面中没有这个元素，返回的是空的伪数组的形式；<br>想要操作里面的元素就需要遍历；<br>还可以获取某个元素（父元素）内部所有指定标签名的子元素，父元素必须是单个对象（必须指明是哪一个元素对象），获取时不包括父元素自己<br><code>element.getElementsByTagName('标签名')</code></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/getElementsByClassName">document.getElementsByClassName()</a>：根据类名返回元素对象集合</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/querySelector">document.querySelector()</a>：根据指定选择器返回第一个元素对象，里面的选择器需要加符号（.box #nav)</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/querySelectorAll">document.querySelector()</a>：根据指定选择器返回所有元素对象集合</li><li>doucment.body：获取body元素<br>document.documentElement：获取html元素</li></ul><h2 id="事件基础"><a href="#事件基础" class="headerlink" title="事件基础"></a>事件基础</h2><p>事件由三部分组成，事件源、事件类型、事件处理程序，也称为事件三要素<br>事件源：事件被触发的对象 谁 按钮<br>事件类型：如何触发 什么事件 比如鼠标点击(onclick)还是鼠标经过还是键盘按下<br>事件处理程序：通过一个函数赋值的方式完成</p><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">botton</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"btn"</span>&gt;</span>CLICK<span class="hljs-tag">&lt;/<span class="hljs-name">botton</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'btn'</span>);</span><br><span class="javascript">    btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><br><span class="javascript">      alert(<span class="hljs-string">'Boom!!!!'</span>);</span><br>    }<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><p>执行事件的步骤：<br>获取事件源，注册事件（绑定事件），添加事件处理程序（采取函数赋值形式）</p><table><thead><tr><th align="left">鼠标事件</th><th align="left">触发条件</th></tr></thead><tbody><tr><td align="left">onclick</td><td align="left">鼠标点击左键触发</td></tr><tr><td align="left">onmouseenter</td><td align="left">当鼠标移入某元素时触发</td></tr><tr><td align="left">onmouseleave</td><td align="left">当鼠标移出某元素时触发</td></tr><tr><td align="left">onmouseover</td><td align="left">鼠标经过触发，移入和移出其子元素时也会触发</td></tr><tr><td align="left">onmouseout</td><td align="left">鼠标离开触发，移入和移出其子元素时也会触发</td></tr><tr><td align="left">onmousemove</td><td align="left">鼠标移动触发，即使在其子元素上也会触发</td></tr><tr><td align="left">onfocus</td><td align="left">获得鼠标焦点触发</td></tr><tr><td align="left">onblur</td><td align="left">失去鼠标焦点触发</td></tr><tr><td align="left">onmouseup</td><td align="left">鼠标弹起触发</td></tr><tr><td align="left">onmousedown</td><td align="left">鼠标按下触发</td></tr></tbody></table><h1 id="操作元素"><a href="#操作元素" class="headerlink" title="操作元素"></a>操作元素</h1><ul><li><p>改变元素内容<br>element.innerText：不识别html标签，去掉空格和换行<br>element.innerHTML：识别html标签，保留空格和换行</p><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>显示当前时间<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>TIME<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-comment">// 点击按钮，div里面的文字发生变化</span></span><br><span class="javascript">    <span class="hljs-comment">// 1.获取元素</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'button'</span>);</span><br><span class="javascript">    <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'div'</span>);</span><br><span class="javascript">    <span class="hljs-comment">// 2.注册事件</span></span><br><span class="javascript">    btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><br><span class="javascript">      <span class="hljs-comment">// div.innerHTML = '2021 - 1 - 12'</span></span><br><span class="javascript">      <span class="hljs-keyword">var</span> myDate = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();</span><br>      div.innerHTML = myDate.toLocaleString()<br>    }<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure></li><li><p>改变元素属性<br>src,href,id,alt,title等</p><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>    img {<br>      width: 200px;<br>    }<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"cat"</span>&gt;</span>猫<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"dog"</span>&gt;</span>狗<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.mos.cms.futurecdn.net/VSy6kJDNq2pSXsCzb6cvYF-1024-80.jpg.webp"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">""</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"猫"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-comment">// 修改元素属性 src</span></span><br><span class="javascript">    <span class="hljs-comment">// 1.获取元素</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> cat = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'cat'</span>);</span><br><span class="javascript">    <span class="hljs-keyword">var</span> dog = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'dog'</span>);</span><br><span class="javascript">    <span class="hljs-keyword">var</span> img = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'img'</span>);</span><br><span class="javascript">    <span class="hljs-comment">// 2.注册事件 处理程序</span></span><br><span class="javascript">    dog.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><br><span class="javascript">      img.src = <span class="hljs-string">'https://cdn.pixabay.com/photo/2020/03/31/19/20/dog-4988985_1280.jpg'</span></span><br><span class="javascript">      img.title = <span class="hljs-string">'狗'</span></span><br>    }<br><span class="javascript">    cat.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><br><span class="javascript">      img.src = <span class="hljs-string">'https://cdn.mos.cms.futurecdn.net/VSy6kJDNq2pSXsCzb6cvYF-1024-80.jpg.webp'</span></span><br><span class="javascript">      img.title = <span class="hljs-string">'猫'</span></span><br>    }<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure></li><li><p>改变表单属性<br>type,value,checked,selected,disabled</p><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"输入内容"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-comment">// 1.获取元素</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'button'</span>)</span><br><span class="javascript">    <span class="hljs-keyword">var</span> input = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'input'</span>)</span><br><span class="javascript">    btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><br><span class="javascript">      <span class="hljs-comment">// input.innerHTML = '点击了' </span></span><br><span class="javascript">      <span class="hljs-comment">// 这个是普通盒子比如 div 标签里的内容</span></span><br><span class="javascript">      <span class="hljs-comment">// 表单里面的值 文字内容是通过 value 来修改的</span></span><br><span class="javascript">      input.value = <span class="hljs-string">'被点击了'</span></span><br><span class="javascript">      <span class="hljs-comment">// 表单被禁用，不能再点击</span></span><br><span class="javascript">      <span class="hljs-comment">// btn.disabled = true</span></span><br><span class="javascript">      <span class="hljs-built_in">this</span>.disabled = <span class="hljs-literal">true</span></span><br><span class="javascript">      <span class="hljs-comment">// this指向的是事件函数的调用者</span></span><br>    }<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure></li><li><p>改变样式属性</p></li></ul><ol><li>element.style     行内样式操作<br>里面的样式采取驼峰命名法，如fontSize、backgroundColor<br>修改的是行内样式，css权重比较高<br>如果样式比较少或者功能简单的情况下使用</li><li>element.className 类名样式操作<br>适合于样式较多或者功能复制的情况<br>会直接更改元素的类名，会覆盖原先的类名<br><code>this.className = '直接填写被修改后的类名'</code><br>如果想要保留原先的类名，可以使用多类名选择器<br><code>e.g. this.className = 'first change'</code></li></ol><h1 id="被动事件"><a href="#被动事件" class="headerlink" title="被动事件"></a>被动事件</h1><p>某些的事件的默认会影响用户体验，从用户的角度，希望默认行为是即刻触发的<br>但是浏览器需要先调用事件处理函数，在确认事件处理函数没有调用 preventDefault后<br>才能执行默认行为，但执行函数需要时间，就让会默认的发生更晚一些，让用户感觉到延迟。<br>更多时候，处理函数并没有调用 preventDefault，但浏览器还是要等到函数运行完才能滚动<br>于是有了passive事件，在事件绑定时，就告知浏览器，该事件处理函数不会调用 preventDefault<br>这样，浏览器可以在运行函数的同时，就直接开始默认行为的执行，消除了这个延迟。</p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">'mousewheel'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>{<br>    e.preventDefault() <br>}, {<br>    passive: <span class="hljs-literal">false</span><span class="hljs-comment">//本事件处理函数是否会调用 preventDefault, true代表不会</span><br>})<br></code></pre></div></td></tr></tbody></table></figure><h1 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h1><p>base64:<br>  将任意比特序列编码为可打印字符。</p><p>Data URL:</p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">data:mimetype;charset;base64,XXXXXXXXXXXXXXXX;<br>data:mimetype;charset,XXXXXXXXXXXXXXXX;<br>data:text/html,<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;<br></code></pre></div></td></tr></tbody></table></figure><p>  将url对应的数据编码进url本身，往往会用base64编码数据</p><p>数据将会变大为原来的1.3333倍；<br>少了网络传输的过程，但没有了缓存；<br>多了编码与解码的过程（编码可以只有一次，解码一般是多次）；<br>所以，对于小文件来说比较适用。</p><h1 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h1><p>原始类型，不参与自动类型转换，常用作唯一性对比，以及做为对象的属性（可以用来实现私有属性）</p>]]></content>
    
    
    <categories>
      
      <category>web前端学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>front-end</tag>
      
      <tag>JavaScript</tag>
      
      <tag>DOM</tag>
      
      <tag>BOM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常见的算法题2</title>
    <link href="/posts/44151e2d.html"/>
    <url>/posts/44151e2d.html</url>
    
    <content type="html"><![CDATA[<h1 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h1><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> reverseList = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">head</span>) </span>{<br>    <span class="hljs-keyword">let</span> prev = <span class="hljs-literal">null</span><br>    <span class="hljs-keyword">let</span> curr = head<br>    <span class="hljs-keyword">while</span> (curr) {<br>      <span class="hljs-keyword">let</span> tmp = curr.next<br>      curr.next = prev<br>      prev = curr<br>      curr = tmp<br>    }<br>    <span class="hljs-keyword">return</span> prev<br>};<br></code></pre></div></td></tr></tbody></table></figure><h1 id="反转位置-m-到-n-的链表"><a href="#反转位置-m-到-n-的链表" class="headerlink" title="反转位置 m 到 n 的链表"></a>反转位置 m 到 n 的链表</h1><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> reverseBetween = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">head, m, n</span>) </span>{<br>  <span class="hljs-keyword">let</span> curr = head<br>  <span class="hljs-keyword">let</span> next = head<br>  <span class="hljs-keyword">let</span> prev = <span class="hljs-literal">null</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; m; i++){<br>    prev = curr<br>    curr = curr.next<br>  }<br><br>  <span class="hljs-keyword">let</span> prev2 = prev<br>  <span class="hljs-keyword">let</span> curr2 = curr<br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = m; i &lt;= n; i++){<br>    next = curr.next<br>    curr.next = prev<br>    prev = curr<br>    curr = next<br>  }<br>  <span class="hljs-keyword">if</span>(prev2 != <span class="hljs-literal">null</span>){<br>    prev2.next = prev<br>  }<span class="hljs-keyword">else</span>{<br>    head = prev<br>  }<br>  curr2.next = curr<br>  <span class="hljs-keyword">return</span> head<br>};<br></code></pre></div></td></tr></tbody></table></figure><h1 id="两两交换链表中的节点"><a href="#两两交换链表中的节点" class="headerlink" title="两两交换链表中的节点"></a>两两交换链表中的节点</h1><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> swapPairs = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">head</span>) </span>{<br>  <span class="hljs-keyword">let</span> dummy = <span class="hljs-keyword">new</span> ListNode()<br>  dummy.next = head<br>  <span class="hljs-keyword">let</span> p = dummy<br>  <span class="hljs-keyword">while</span>(p.next &amp;&amp; p.next.next){<br>    <span class="hljs-keyword">let</span> n1 = p.next<br>    <span class="hljs-keyword">let</span> n2 = p.next.next<br>    p.next = n2<br>    n1.next = n2.next<br>    n2.next = n1<br>    p = n1<br>  }<br>  <span class="hljs-keyword">return</span> dummy.next<br>}<br></code></pre></div></td></tr></tbody></table></figure><h1 id="二叉树的所有节点"><a href="#二叉树的所有节点" class="headerlink" title="二叉树的所有节点"></a>二叉树的所有节点</h1><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> binaryTreePaths = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">root</span>) </span>{<br>  <span class="hljs-keyword">let</span> res = []<br>  <span class="hljs-keyword">let</span> createPath = <span class="hljs-function">(<span class="hljs-params">root, path</span>) =&gt;</span>{<br>    <span class="hljs-keyword">if</span>(root){<br>      <span class="hljs-keyword">if</span>(!root.left &amp;&amp; !root.right){<br>        path += root.val<br>        res.push(path)<br>      }<span class="hljs-keyword">else</span>{<br>        path += root.val + <span class="hljs-string">'-&gt;'</span><br>        createPath(root.left, path)<br>        createPath(root.right, path)<br>      }<br>    }<br>  }<br>  createPath(root, <span class="hljs-string">''</span>)<br>  <span class="hljs-keyword">return</span> res <br>};<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> binaryTreePaths = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">startNode, history = <span class="hljs-string">''</span>, result = []</span>) </span>{<br>  <span class="hljs-keyword">if</span> (startNode) {<br>    <span class="hljs-keyword">if</span> (startNode.left == <span class="hljs-literal">null</span> &amp;&amp; startNode.right == <span class="hljs-literal">null</span>) {<br>      result.push(history + startNode.val)<br>      <span class="hljs-keyword">return</span> result<br>    }<br>    binaryTreePaths(startNode.left, history + startNode.val + <span class="hljs-string">'-&gt;'</span>, result)<br>    binaryTreePaths(startNode.right, history + startNode.val + <span class="hljs-string">'-&gt;'</span>, result)<br>  }<br>  <span class="hljs-keyword">return</span> result<br>}<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 可以停止的遍历函数，action返回false的时候遍历过程停止</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">traverse</span>(<span class="hljs-params">root, action</span>) </span>{<br>    <span class="hljs-keyword">if</span> (root) {<br>        <span class="hljs-keyword">if</span> (traverse(root.left, action) === <span class="hljs-literal">false</span>){<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        }<br>        <span class="hljs-keyword">if</span> (action(root) === <span class="hljs-literal">false</span>) {<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        }<br>        <span class="hljs-keyword">if</span> (traverse(root.right, action) === <span class="hljs-literal">false</span>) {<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        }<br>    }<br>}<br></code></pre></div></td></tr></tbody></table></figure><h1 id="二叉树的层级遍历"><a href="#二叉树的层级遍历" class="headerlink" title="二叉树的层级遍历"></a>二叉树的层级遍历</h1><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> levelOrder = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">root</span>) </span>{<br>  <span class="hljs-keyword">if</span>(!root) <span class="hljs-keyword">return</span> []<br>  <span class="hljs-keyword">let</span> queue = [root]<br>  <span class="hljs-keyword">let</span> res = []<br>  <span class="hljs-keyword">while</span>(queue.length &gt; <span class="hljs-number">0</span>){<br>    <span class="hljs-keyword">let</span> arr = []<br>    <span class="hljs-keyword">let</span> len = queue.length<br>    <span class="hljs-keyword">while</span>(len--){<br>      <span class="hljs-keyword">let</span> node = queue.shift()<br>      arr.push(node.val)<br>      <span class="hljs-keyword">if</span>(node.left) queue.push(node.left)<br>      <span class="hljs-keyword">if</span>(node.right) queue.push(node.right)<br>    }<br>    res.push(arr)<br>  }<br>  <span class="hljs-keyword">return</span> res<br>};<br></code></pre></div></td></tr></tbody></table></figure><h1 id="构造一个向量函数"><a href="#构造一个向量函数" class="headerlink" title="构造一个向量函数"></a>构造一个向量函数</h1><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Vector</span>(<span class="hljs-params">x, y</span>) </span>{<br>  <span class="hljs-built_in">this</span>.x = x<br>  <span class="hljs-built_in">this</span>.y = y<br>}<br><br>Vector.prototype.plus = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">v</span>) </span>{<br>  <span class="hljs-keyword">var</span> x = <span class="hljs-built_in">this</span>.x + v.x<br>  <span class="hljs-keyword">var</span> y = <span class="hljs-built_in">this</span>.y + v.y<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Vector(x, y)<br>}<br><br>Vector.prototype.minus = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">v</span>) </span>{<br>  <span class="hljs-keyword">var</span> x = <span class="hljs-built_in">this</span>.x - v.x<br>  <span class="hljs-keyword">var</span> y = <span class="hljs-built_in">this</span>.y - v.y<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Vector(x, y)<br>}<br><br><span class="hljs-comment">// length是一个属性</span><br><span class="hljs-built_in">Object</span>.defineProperty(Vector.prototype, <span class="hljs-string">'length'</span>, {<br>  get: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-keyword">var</span> x = <span class="hljs-built_in">this</span>.x<br>    <span class="hljs-keyword">var</span> y = <span class="hljs-built_in">this</span>.y<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.sqrt(x * x + y * y)<br>  }<br>})<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">Vector.prototype = {<br>  plus (v) {<br>    <span class="hljs-keyword">var</span> x = <span class="hljs-built_in">this</span>.x + v.x<br>    <span class="hljs-keyword">var</span> y = <span class="hljs-built_in">this</span>.y + v.y<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Vector(x, y)<br>  },<br>  minus (v) {<br>    <span class="hljs-keyword">var</span> x = <span class="hljs-built_in">this</span>.x - v.x<br>    <span class="hljs-keyword">var</span> y = <span class="hljs-built_in">this</span>.y - v.y<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Vector(x, y)<br>  },<br>  get length () {<br>    <span class="hljs-keyword">var</span> x = <span class="hljs-built_in">this</span>.x<br>    <span class="hljs-keyword">var</span> y = <span class="hljs-built_in">this</span>.y<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.sqrt(x * x + y * y)<br>  }<br>}<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 使属性不可枚举</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Vector</span>(<span class="hljs-params">x, y</span>) </span>{<br>  <span class="hljs-built_in">this</span>.x = x<br>  <span class="hljs-built_in">this</span>.y = y<br>}<br><span class="hljs-built_in">Object</span>.defineProperties(Vector.prototype, {<br>  plus: {<br>    value: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">v</span>) </span>{<br>      <span class="hljs-keyword">var</span> x = <span class="hljs-built_in">this</span>.x + v.x<br>      <span class="hljs-keyword">var</span> y = <span class="hljs-built_in">this</span>.y + v.y<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Vector(x, y)<br>    }<br>  },<br>  minus: {<br>    value: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">v</span>) </span>{<br>      <span class="hljs-keyword">var</span> x = <span class="hljs-built_in">this</span>.x - v.x<br>      <span class="hljs-keyword">var</span> y = <span class="hljs-built_in">this</span>.y - v.y<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Vector(x, y)<br>    }<br>  },<br>  length: {<br>    get: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>      <span class="hljs-keyword">var</span> x = <span class="hljs-built_in">this</span>.x<br>      <span class="hljs-keyword">var</span> y = <span class="hljs-built_in">this</span>.y<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.sqrt(x * x + y * y)<br>    }<br>  }<br>})<br></code></pre></div></td></tr></tbody></table></figure><h1 id="构造一个复数类"><a href="#构造一个复数类" class="headerlink" title="构造一个复数类"></a>构造一个复数类</h1><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Complex</span>(<span class="hljs-params">real, imag</span>) </span>{<br>  <span class="hljs-built_in">this</span>.real = real<br>  <span class="hljs-built_in">this</span>.imag = imag<br>}<br><br><span class="hljs-comment">// 静态方法</span><br>Complex.from = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">complexStr</span>) </span>{<br>  <span class="hljs-keyword">let</span> real<br>  <span class="hljs-keyword">let</span> imag<br>  <span class="hljs-keyword">if</span> (complexStr.includes(<span class="hljs-string">'+'</span>)) {<br>    <span class="hljs-keyword">let</span> parts = complexStr.split(<span class="hljs-string">'+'</span>)<br>    real = <span class="hljs-built_in">parseFloat</span>(parts[<span class="hljs-number">0</span>])<br>    imag = <span class="hljs-built_in">parseFloat</span>(parts[<span class="hljs-number">1</span>])<br>  } <span class="hljs-keyword">else</span> {<br>    <span class="hljs-keyword">let</span> parts = complexStr.split(<span class="hljs-string">'-'</span>)<br>    <span class="hljs-keyword">if</span> (parts.length == <span class="hljs-number">2</span>) {<br>      real = <span class="hljs-built_in">parseFloat</span>(parts[<span class="hljs-number">0</span>])<br>      imag = -<span class="hljs-built_in">parseFloat</span>(parts[<span class="hljs-number">1</span>])<br>    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (parts.length == <span class="hljs-number">3</span>) {<br>      real = -<span class="hljs-built_in">parseFloat</span>(parts[<span class="hljs-number">1</span>])<br>      imag = -<span class="hljs-built_in">parseFloat</span>(parts[<span class="hljs-number">2</span>])<br>    }<br>  }<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Complex(real, imag)<br>}<br><br>Complex.isEqual = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>{<br>  <span class="hljs-keyword">return</span> a.real == b.real &amp;&amp; a.imag == b.imag<br>}<br><br><span class="hljs-comment">// 实例方法</span><br>Complex.prototype.plus = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">c</span>) </span>{<br>  <span class="hljs-keyword">var</span> real = <span class="hljs-built_in">this</span>.real + c.real<br>  <span class="hljs-keyword">var</span> imag = <span class="hljs-built_in">this</span>.imag + c.imag<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Complex(real, imag)<br>}<br>Complex.prototype.minus = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">c</span>) </span>{<br>  <span class="hljs-keyword">var</span> real = <span class="hljs-built_in">this</span>.real - c.real<br>  <span class="hljs-keyword">var</span> imag = <span class="hljs-built_in">this</span>.imag - c.imag<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Complex(real, imag)<br>}<br><br>Complex.prototype.multiple = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">c</span>) </span>{<br>  <span class="hljs-keyword">var</span> real = <span class="hljs-built_in">this</span>.real * c.real - <span class="hljs-built_in">this</span>.imag * c.imag<br>  <span class="hljs-keyword">var</span> imag = <span class="hljs-built_in">this</span>.real * c.imag + <span class="hljs-built_in">this</span>.imag * c.real<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Complex(real, imag)<br>}<br>Complex.prototype.division = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">c</span>) </span>{<br>  <span class="hljs-keyword">var</span> helper = <span class="hljs-keyword">new</span> Complex(c.real, -c.imag)<br>  <span class="hljs-keyword">var</span> m = helper.multiple(c)<br>  <span class="hljs-keyword">var</span> z = helper.multiple(<span class="hljs-built_in">this</span>)<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Complex(z.real / m.real, z.imag / m.real)<br>}<br><br>Complex.prototype.division2 = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">c</span>) </span>{<br>  <span class="hljs-keyword">var</span> a = c.real<br>  <span class="hljs-keyword">var</span> b = -c.imag<br>  <span class="hljs-keyword">var</span> m = a * a + b * b<br>  <span class="hljs-keyword">var</span> real = <span class="hljs-built_in">this</span>.real * a - <span class="hljs-built_in">this</span>.imag * b<br>  <span class="hljs-keyword">var</span> imag = <span class="hljs-built_in">this</span>.real * b + <span class="hljs-built_in">this</span>.imag * a<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Complex(real / m, imag / m)<br>}<br><br>Complex.prototype.toString = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.imag &lt; <span class="hljs-number">0</span>) {<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">'('</span> + <span class="hljs-built_in">this</span>.real + <span class="hljs-string">''</span> + <span class="hljs-built_in">this</span>.imag + <span class="hljs-string">'i)'</span><br>  }<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">'('</span> + <span class="hljs-built_in">this</span>.real + <span class="hljs-string">'+'</span> + <span class="hljs-built_in">this</span>.imag + <span class="hljs-string">'i)'</span><br>}<br></code></pre></div></td></tr></tbody></table></figure><h1 id="构造一个Set类"><a href="#构造一个Set类" class="headerlink" title="构造一个Set类"></a>构造一个Set类</h1><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// Set其实是一个特殊的Map，其中所有的元素都映射到自己</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">MySet</span>(<span class="hljs-params">initialValues</span>) </span>{<br>  <span class="hljs-built_in">this</span>._elements = []  <span class="hljs-comment">// 用下划线开头的属性表示这个属性是私有属性，不希望从外部访问</span><br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; initialValues.length; i++) {<br>    <span class="hljs-built_in">this</span>.add(initialValues[i])<br>  }<br>}<br><br>MySet.prototype.add = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">val</span>) </span>{<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>._elements.includes(val)) {<br>    <span class="hljs-built_in">this</span>._elements.push(val)<br>  }<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span><br>}<br>MySet.prototype.delete = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">val</span>) </span>{<br>  <span class="hljs-keyword">if</span> (val !== val) {<span class="hljs-comment">// val is NaN</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">this</span>._elements.length; i++) {<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>._elements[i] !== <span class="hljs-built_in">this</span>._elements[i]) {<br>        <span class="hljs-built_in">this</span>._elements.splice(i, <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>      }<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>  }<br>  <span class="hljs-keyword">var</span> idx = <span class="hljs-built_in">this</span>._elements.indexOf(val)<br>  <span class="hljs-keyword">if</span> (idx &gt;= <span class="hljs-number">0</span>) {<br>    <span class="hljs-built_in">this</span>._elements.splice(idx, <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>  }<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>}<br>MySet.prototype.has = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">val</span>) </span>{<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>._elements.includes(val)<br>}<br>MySet.prototype.clear = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>  <span class="hljs-built_in">this</span>._elements.length = <span class="hljs-number">0</span><br>  <span class="hljs-comment">// this._elements.splice(0, this._elements.length)</span><br>  <span class="hljs-comment">// this._elements = []</span><br>}<br><span class="hljs-built_in">Object</span>.defineProperty(MySet.prototype, <span class="hljs-string">'size'</span>, {<br>  get: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>._elements.length<br>  }<br>})<br></code></pre></div></td></tr></tbody></table></figure><h1 id="构造一个Map类"><a href="#构造一个Map类" class="headerlink" title="构造一个Map类"></a>构造一个Map类</h1><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">MyMap</span>(<span class="hljs-params">initialMaps = []</span>) </span>{<br>  <span class="hljs-built_in">this</span>._keys = []<br>  <span class="hljs-built_in">this</span>._vals = []<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; initialMaps.length; i++) {<br>    <span class="hljs-keyword">var</span> map = initialMaps[i]<br>    <span class="hljs-built_in">this</span>.set(map[<span class="hljs-number">0</span>], map[<span class="hljs-number">1</span>])<br>  }<br>}<br><br>MyMap.prototype.forEach = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">iterator</span>) </span>{<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">this</span>.size; i++) {<br>    iterator(<span class="hljs-built_in">this</span>._vals[i], <span class="hljs-built_in">this</span>._keys[i], <span class="hljs-built_in">this</span>)<br>  }<br>}<br><span class="hljs-comment">// 返回key在_keys中的下标，支持key为NaN</span><br>MyMap.prototype._keyIdx = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">key</span>) </span>{<br>  <span class="hljs-keyword">if</span> (key !== key) {<br>    <span class="hljs-comment">// 找出满足条件的元素的下标，找不到返回-1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>._keys.findIndex(<span class="hljs-function"><span class="hljs-params">it</span> =&gt;</span> it !== it)<br>  }<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>._keys.indexOf(key)<br>  <span class="hljs-comment">// return this._keys.indexOf(it =&gt; it === it)</span><br>}<br>MyMap.prototype.set = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">key, val</span>) </span>{<br>  <span class="hljs-keyword">var</span> idx = <span class="hljs-built_in">this</span>._keyIdx(key)<br>  <span class="hljs-keyword">if</span> (idx &gt;= <span class="hljs-number">0</span>) {<br>    <span class="hljs-built_in">this</span>._vals[idx] = val<br>  } <span class="hljs-keyword">else</span> {<br>    <span class="hljs-built_in">this</span>._keys.push(key)<br>    <span class="hljs-built_in">this</span>._vals.push(val)<br>  }<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span><br>}<br>MyMap.prototype.get = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">key</span>) </span>{<br>  <span class="hljs-keyword">var</span> idx = <span class="hljs-built_in">this</span>._keyIdx(key)<br>  <span class="hljs-keyword">if</span> (idx &gt;= <span class="hljs-number">0</span>) {<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>._vals[idx]<br>  } <span class="hljs-keyword">else</span> {<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span><br>  }<br>}<br>MyMap.prototype.has = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">key</span>) </span>{<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>._keys.includes(key)<br>}<br>MyMap.prototype.delete = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">key</span>) </span>{<br>  <span class="hljs-keyword">var</span> idx = <span class="hljs-built_in">this</span>._keyIdx(key)<br>  <span class="hljs-keyword">if</span> (idx &gt;= <span class="hljs-number">0</span>) {<br>    <span class="hljs-built_in">this</span>._keys.splice(idx, <span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">this</span>._vals.splice(idx, <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>  } <span class="hljs-keyword">else</span> {<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>  }<br>}<br>MyMap.prototype.clear = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>  <span class="hljs-built_in">this</span>._keys.length = <span class="hljs-number">0</span><br>  <span class="hljs-built_in">this</span>._vals.length = <span class="hljs-number">0</span><br>}<br><span class="hljs-built_in">Object</span>.defineProperty(MyMap.prototype, <span class="hljs-string">'size'</span>, {<br>  get: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>._keys.length<br>  }<br>})<br></code></pre></div></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>web前端学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>front-end</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web前端学习笔记5——JS其它</title>
    <link href="/posts/468b9935.html"/>
    <url>/posts/468b9935.html</url>
    
    <content type="html"><![CDATA[<h1 id="语言类型"><a href="#语言类型" class="headerlink" title="语言类型"></a>语言类型</h1><p>静态类型：所有变量及表达式的类型都是确定的（java，c，c++，typescript）<br>动态类型：变量的类型不确定（js，python，ruby）<br>强类型：不会做自动类型转换的语言（python）<br>弱类型：会做自动类型转换的语言（java，c，js，ts）</p><h1 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h1><p>Unicode 和 UTF-8 之间的转换关系表 ( x 字符表示码点占据的位 )</p><table><thead><tr><th align="center">bit</th><th align="center">字节数</th><th align="left">形式</th></tr></thead><tbody><tr><td align="center">7</td><td align="center">1</td><td align="left">0xxxxxxx</td></tr><tr><td align="center">11</td><td align="center">2</td><td align="left">110xxxxx 10xxxxxx</td></tr><tr><td align="center">16</td><td align="center">3</td><td align="left">1110xxxx 10xxxxxx 10xxxxxx</td></tr><tr><td align="center">21</td><td align="center">4</td><td align="left">11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</td></tr><tr><td align="center">26</td><td align="center">5</td><td align="left">111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx</td></tr><tr><td align="center">31</td><td align="center">6</td><td align="left">1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx</td></tr></tbody></table><h1 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h1><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toString">Object.prototype.toString()</a>：返回一个表示该对象的字符串。<ul><li>toString() 是 Object 的原型方法，调用该方法，默认返回当前对象的 [[Class]] 。这是一个内部属性，其格式为 [object Xxx] ，其中 Xxx 就是对象的类型。</li><li>对于 Object 对象，直接调用 toString()  就能返回 [object Object] 。而对于其他对象，则需要通过 call / apply 来调用才能返回正确的类型信息。</li></ul></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">Object</span>.prototype.toString.call(<span class="hljs-string">''</span>)            <span class="hljs-comment">// [object String]</span><br><span class="hljs-built_in">Object</span>.prototype.toString.call(<span class="hljs-number">1</span>)             <span class="hljs-comment">// [object Number]</span><br><span class="hljs-built_in">Object</span>.prototype.toString.call(<span class="hljs-literal">true</span>)          <span class="hljs-comment">// [object Boolean]</span><br><span class="hljs-built_in">Object</span>.prototype.toString.call(<span class="hljs-built_in">Symbol</span>())      <span class="hljs-comment">// [object Symbol]</span><br><span class="hljs-built_in">Object</span>.prototype.toString.call(<span class="hljs-literal">undefined</span>)     <span class="hljs-comment">// [object Undefined]</span><br><span class="hljs-built_in">Object</span>.prototype.toString.call(<span class="hljs-literal">null</span>)          <span class="hljs-comment">// [object Null]</span><br><span class="hljs-built_in">Object</span>.prototype.toString.call(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Function</span>()) <span class="hljs-comment">// [object Function]</span><br><span class="hljs-built_in">Object</span>.prototype.toString.call(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>())     <span class="hljs-comment">// [object Date]</span><br><span class="hljs-built_in">Object</span>.prototype.toString.call([])            <span class="hljs-comment">// [object Array]</span><br><span class="hljs-built_in">Object</span>.prototype.toString.call(<span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>())   <span class="hljs-comment">// [object RegExp]</span><br><span class="hljs-built_in">Object</span>.prototype.toString.call(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>())    <span class="hljs-comment">// [object Error]</span><br><span class="hljs-built_in">Object</span>.prototype.toString.call(<span class="hljs-built_in">document</span>)      <span class="hljs-comment">// [object HTMLDocument]</span><br><span class="hljs-built_in">Object</span>.prototype.toString.call(<span class="hljs-built_in">window</span>)        <span class="hljs-comment">// [object global] window 是全局对象 global 的引用</span><br></code></pre></div></td></tr></tbody></table></figure><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create">Object.create()</a>：创建一个新对象，使用现有的对象来提供新创建的对象的__proto__。</li></ul><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">Object.defineProperty()</a>：直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">Object</span>.defineProperty(obj, <span class="hljs-string">'baz'</span>, {<br>  value: <span class="hljs-number">11</span>,            <br>  enumerable: <span class="hljs-literal">false</span>,    <span class="hljs-comment">// 是否可枚举（在for in中出现）</span><br>  writable: <span class="hljs-literal">true</span>,       <span class="hljs-comment">// 是否可修改（写入）</span><br>  configurable: <span class="hljs-literal">false</span>,  <span class="hljs-comment">// 是否可以重新定义（可配置）</span><br>})<br></code></pre></div></td></tr></tbody></table></figure><h1 id="this"><a href="#this" class="headerlink" title="this"></a>this</h1><ul><li>this相当于函数的一个隐藏参数，通过函数的不同调用方式确定，而非直接传递<ul><li>一个函数以函数的形式调用：f()，即从一个“变量名”里读出来，其内部的this为window</li><li>一个函数以对象方法的形式调用：foo.bar.obj.f()，即从一个对象中读出并立刻调用，其内部的this为这个对象</li><li>函数当成构造函数调用：new f()，即前面调用前面加new，其内部的this为一个新对象，这个对象以函数的prototype属性为原型。</li><li>函数被call或apply，即 foo.bar.f.call(obj1, a, b), foo.bar.f.apply(obj1, [ a, b ])，函数内部的this为给call或apply传入的第一个参数</li><li>箭头函数里this不再是隐含参数，而是相当于普通变量，直接向外层查找，类似于“词法作用域”</li><li>函数被绑定后，this不再可变，即，f2 = f.bind(obj2), f2.call(obj3)，f2的调用还是相当于f的this为obj2。但当把f2当构造函数调用时，this的绑定会失效，new f2()时f内部的this为一个新的对象，且其原型为f.prototype<figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bind</span>(<span class="hljs-params">f, thisArg, ...fixedArgs</span>) </span>{<br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">...args</span>) </span>{<br>    <span class="hljs-keyword">return</span> f.call(thisArg, ...fixedArgs, ...args)<br>  }<br>}<br></code></pre></div></td></tr></tbody></table></figure></li></ul></li><li>原型(__proto__)与原型属性(prototype)<ul><li>每个值（除null与undefined）都有一个原型。<ul><li>可以通过Object.getPrototypeOf(val)获取到val的原型</li><li>也可以通过val.__proto__获取到其原型</li></ul></li><li>原型本身也是一个对象，它自身也会有原型，直到Object.prototype</li><li>原型属性指的是函数上的一个名为prototype的属性，注意并不是函数的原型，函数的原型是f.__proto__，f.prototype一般称为原型属性，是用来做为该函数的实例的原型而用的。<ul><li>即 var a = new f()，a的原型(a.__proto__)为f的原型属性(f.prototype)</li></ul></li><li>每种类型的值都有自身的构造函数，所以同一类型的值之间是共享原型的，即它们构造函数的原型属性。<ul><li>数值的构造函数为Number</li><li>字符串的构造函数为String</li><li>布尔值的构造函数为Boolean</li><li>数组的构造函数为Array</li><li>对象的构造函数为Object</li><li>函数的构造函数为Function</li><li>undefined和null不是对象，没有构造函数，也没有原型<ul><li>但typeof null为“object”，这属于js设计上的失误。<ul><li>原因在于，java中，一个变量如果要指向一个对象，但声明时指向的对象还不确定，会让这个变量指向null，用做对象的占位值。</li></ul></li></ul></li><li>所以各构造函数的原型属性上都有为自身类型专门设计的方法。</li></ul></li></ul></li><li>构造函数<ul><li>当用new调用一个函数时，该函数可称做为构造函数</li><li>构造函数内部的this为一个新对象，这个对象的原型是该构造函数的原型属性</li><li>如果构造函数不返回一个对象类型的值，则this就会是这个new调用的求值结果<ul><li>如果返回一个对象类型的值，则该对象会成为new调用的求值结果</li></ul></li><li>函数的prototype属性会自动指向一个有一个属性的对象，该属性名为constructor，指向函数自己。<ul><li>所以可以通过任何值的constructor属性获知其构造函数。</li></ul></li></ul></li><li>对象的杂项<ul><li>属性的可枚举性：指属性会不会在for in循环中出出<ul><li>普通属性都是会的，如果想要创建不可枚举的属性，需要通过Object.defineProperty(obj,propName, 属性描述符)</li></ul></li><li>属性是否自有属性（对应于属性来源于原型链），可以通过obj.hasOwnProperty判断<ul><li>考虑到这个函数可能被覆盖，所以用Object.prototype.hasOwnProperty.call(obj, properyName)</li></ul></li><li>为对象增加属性永远增加在自有属性上，不会增加到原型上。修改也不会。</li><li>Object.create(proto，初始属性的属性描述符集合)</li><li>属性描述符<ul><li>一个用来描述属性的特性的对象：<ul><li>{<br>value: 设置这个属性的值<br>writable: 设置这个属性是否可修改<br>enumerable: 设置这个属性是否可枚举<br>configurable: 设置这个属性是否可重新定义<br>}</li></ul></li></ul></li></ul></li></ul><h1 id="call-apply-bind"><a href="#call-apply-bind" class="headerlink" title="call, apply, bind"></a>call, apply, bind</h1><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call">Function.prototype.call()</a></p><ul><li>使用一个指定的 this 值和单独给出的一个或多个参数来调用一个函数。</li><li>语法：<code>function.call(thisArg, arg1, arg2, ...)</code></li></ul></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply">Function.prototype.apply()</a></p><ul><li>使用一个指定的 this 值和一个数组（或类数组对象）提供的参数。</li><li>语法：<code>function.apply(thisArg, [argsArray])</code></li><li>区别：call() 方法的作用和 apply() 方法类似，区别就是 call() 方法接受的是参数列表，而 apply() 方法接受的是一个参数数组。</li></ul></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind">Function.prototype.bind()</a></p><ul><li>创建一个<strong>新函数</strong>，在 bind() 被调用时，这个新函数的 this 被指定为 bind() 的第一个参数，而其余参数将作为新函数的参数，供调用时使用。</li><li>语法：<code>function.bind(thisArg[, arg1[, arg2[, ...]]])</code></li></ul></li></ul><h1 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h1><ul><li>堆（Heap）是一种特别的完全二叉树。<br>父节点的值恒小于等于子节点的值，此堆称为最小堆。<br>父节点的值恒大于等于子节点的值，此堆称为最大堆。</li><li>堆支持两种操作<ul><li>往堆里增加一个元素【log(n)】<br>先将新元素放入堆的末尾，然后至底向上调整以维护堆的性质</li><li>从堆顶删除并返回元素【log(n)】<br>先将堆顶元素删除，将堆尾元素放入堆顶，然后至顶向下调整以维护堆的性质</li></ul></li><li>将一个随机分布的数组就地调整成一个堆<br>方法一：将结点顺序从前往后以每个结点开始至底向上调整即可【不会低于n*log(n)】<br>方法二：从后往前，认为遇到的结点的两个子树都是正确的堆，然后向下调整【log(n)】</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 假定ary是一个合法的堆</span><br><span class="hljs-comment">// pop函数删除堆顶的元素并维护堆的性质</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">pop</span>(<span class="hljs-params">ary</span>)</span>{<br>  <span class="hljs-keyword">if</span>(ary.length == <span class="hljs-number">0</span>){<br>    <span class="hljs-keyword">return</span><br>  }<br>  <span class="hljs-keyword">if</span>(ary.length == <span class="hljs-number">1</span>){<br>    <span class="hljs-keyword">return</span> ary.pop()<br>  }<br>  <span class="hljs-keyword">var</span> result = ary[<span class="hljs-number">0</span>]<br>  ary[<span class="hljs-number">0</span>] = ary.pop()<br>  heapDown(ary, <span class="hljs-number">0</span>)<br>  <span class="hljs-keyword">return</span> result<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">push</span>(<span class="hljs-params">ary, val</span>)</span>{<br>  ary.push(val)<br>  heapUp(ary, ary.length -<span class="hljs-number">1</span>)<br>  <span class="hljs-keyword">return</span> ary<br>}<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">swap</span>(<span class="hljs-params">ary, i, j</span>)</span>{<br>  <span class="hljs-keyword">var</span> t = ary[i]<br>  ary[i] = ary[j]<br>  ary[j] = t<br>  <span class="hljs-keyword">return</span> ary<br>}<br><br><span class="hljs-comment">// 从堆的pos位置开始执行至顶向下的堆调整</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">heapDown</span>(<span class="hljs-params">ary, pos</span>)</span>{<br>  <span class="hljs-keyword">var</span> leftIdx = pos * <span class="hljs-number">2</span> + <span class="hljs-number">1</span><br>  <span class="hljs-keyword">var</span> rightIdx = pos * <span class="hljs-number">2</span> + <span class="hljs-number">2</span><br>  <span class="hljs-keyword">var</span> maxIdx = pos<br>  <span class="hljs-keyword">var</span> len = ary.length<br>  <span class="hljs-keyword">if</span>(leftIdx &lt; len &amp;&amp; ary[leftIdx] &gt; ary[[maxIdx]){<br>    maxIdx = leftIdx<br>  }<br>  <span class="hljs-keyword">if</span>(rightIdx &lt; len &amp;&amp; ary[leftIdx] &lt; ary[[maxIdx]){<br>    maxIdx = rightIdx<br>  }<br>  <span class="hljs-keyword">if</span>(pos !== maxIdx){<br>    swap(ary, pos, maxIdx)<br>    heapDown(ary, maxIdx)<br>  }<br>}<br><br><span class="hljs-comment">// 不使用递归</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">heapDown2</span>(<span class="hljs-params">ary, pos</span>)</span>{<br>  <span class="hljs-keyword">var</span> len = ary.length<br>  <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>){<br>    <span class="hljs-keyword">var</span> leftIdx = pos * <span class="hljs-number">2</span> + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">var</span> rightIdx = pos * <span class="hljs-number">2</span> + <span class="hljs-number">2</span><br>    <span class="hljs-keyword">var</span> maxIdx = pos<br>    <span class="hljs-keyword">if</span>(leftIdx &lt; len &amp;&amp; ary[leftIdx] &gt; ary[maxIdx]){<br>      maxIdx = leftIdx<br>    }<br>    <span class="hljs-keyword">if</span>(rightIdx &lt; len &amp;&amp; ary[leftIdx] &lt; ary[maxIdx]){<br>      maxIdx = rightIdx<br>    }<br>    <span class="hljs-keyword">if</span>(pos !== maxIdx){<br>      swap(ary, pos, maxIdx)<br>      pos = maxIdx<br>    }<span class="hljs-keyword">else</span>{<br>      <span class="hljs-keyword">break</span><br>    }<br>  }<br>}<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 从堆的pos位置开始执行至底向上的堆调整</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">heapUp</span>(<span class="hljs-params">ary, pos</span>)</span>{<br>  <span class="hljs-keyword">var</span> pIdx = (pos - <span class="hljs-number">1</span>) &gt;&gt; <span class="hljs-number">1</span>  <span class="hljs-comment">// 父结点的位置</span><br>  <span class="hljs-keyword">if</span>(pos &gt;= <span class="hljs-number">0</span> &amp;&amp; ary[pos] &gt; ary[pIdx]){<br>    swap(ary, pos, pIdx)<br>    heapUp(ary, pIdx)<br>  }<br>}<br><br><span class="hljs-comment">// 非递归写法</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">heapUp2</span>(<span class="hljs-params">ary, pos</span>)</span>{<br>  <span class="hljs-keyword">while</span>(pos &gt; <span class="hljs-number">0</span>){<br>    <span class="hljs-keyword">var</span> pIdx = (pos - <span class="hljs-number">1</span>) &gt;&gt; <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span>(ary[pos] &gt; ary[pIdx]){<br>      swap(ary, pos, pIdx)<br>      pos = pIdx<br>    }<span class="hljs-keyword">else</span>{<br>      <span class="hljs-keyword">break</span><br>    }<br>  }<br>}<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 将一个不是堆的数组，就地调整成一个满足堆性质的数组</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">heapify</span>(<span class="hljs-params">ary</span>)</span>{<br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = (ary.length - <span class="hljs-number">1</span>) &gt;&gt; <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--){<br>    heapDown(ary, i)<br>  }<br>  <span class="hljs-keyword">return</span> ary<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">heapify2</span>(<span class="hljs-params">ary</span>)</span>{<br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt; ary.length; i++){<br>    heapUp(ary, i)<br>  }<br>  <span class="hljs-keyword">return</span> ary<br>}<br></code></pre></div></td></tr></tbody></table></figure><p>写入原型属性</p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">PriorityQueue</span>(<span class="hljs-params">initial = []</span>)</span>{<br>  <span class="hljs-built_in">this</span>._elements = [...initial]  <span class="hljs-comment">//用来保存堆中的元素</span><br>  <span class="hljs-built_in">this</span>._heapify()<br>}<br><br>PriorityQueue.prototype._heapify = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">heapify</span>(<span class="hljs-params"></span>)</span>{<br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = (<span class="hljs-built_in">this</span>._elements.length - <span class="hljs-number">1</span>) &gt;&gt; <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--){<br>    <span class="hljs-built_in">this</span>._heapDown(i)<br>  }<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span><br>}<br><br>PriorityQueue.prototype.push = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">val</span>)</span>{<br>  <span class="hljs-built_in">this</span>._elements.push(val)<br>  <span class="hljs-built_in">this</span>._heapUp(<span class="hljs-built_in">this</span>._elements.length - <span class="hljs-number">1</span>)<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span><br>}<br><br>PriorityQueue.prototype.pop = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">val</span>)</span>{<br>  <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>._elements.length &lt; <span class="hljs-number">2</span>){<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>._elements.pop()<br>  }<br>  <span class="hljs-keyword">var</span> result = <span class="hljs-built_in">this</span>._elements[<span class="hljs-number">0</span>]<br>  <span class="hljs-built_in">this</span>._elements[<span class="hljs-number">0</span>] = <span class="hljs-built_in">this</span>._elements.pop()<br>  <span class="hljs-built_in">this</span>._heapDown(<span class="hljs-number">0</span>)<br>  <span class="hljs-keyword">return</span> result<br>}<br><br><span class="hljs-comment">// 查看堆顶的元素</span><br>PriorityQueue.prototype.peek = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>._elements[<span class="hljs-number">0</span>]<br>}<br><br>PriorityQueue.prototype._swap = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">i, j</span>)</span>{<br>  <span class="hljs-keyword">var</span> t = <span class="hljs-built_in">this</span>._elements[i]<br>  <span class="hljs-built_in">this</span>._elements[i] = <span class="hljs-built_in">this</span>._elements[j]<br>  <span class="hljs-built_in">this</span>._elements = t<br>}<br><br>PriorityQueue.prototype._heapDown = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">pos</span>)</span>{<br>  <span class="hljs-keyword">var</span> leftIdx = pos * <span class="hljs-number">2</span> + <span class="hljs-number">1</span><br>  <span class="hljs-keyword">var</span> rightIdx = pos * <span class="hljs-number">2</span> + <span class="hljs-number">2</span><br>  <span class="hljs-keyword">var</span> maxIdx = pos<br>  <span class="hljs-keyword">var</span> ary = <span class="hljs-built_in">this</span>._elements<br>  <span class="hljs-keyword">var</span> len = ary.length<br>  <span class="hljs-keyword">if</span>(leftIdx &lt; len &amp;&amp; ary[leftIdx] &gt; ary[[maxIdx]){<br>    maxIdx = leftIdx<br>  }<br>  <span class="hljs-keyword">if</span>(rightIdx &lt; len &amp;&amp; ary[leftIdx] &lt; ary[[maxIdx]){<br>    maxIdx = rightIdx<br>  }<br>  <span class="hljs-keyword">if</span>(pos !== maxIdx){<br>    <span class="hljs-built_in">this</span>._swap(pos, maxIdx)<br>    <span class="hljs-built_in">this</span>._heapDown(maxIdx)<br>  }<br>}<br><br>PriorityQueue.prototype._heapUp = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">pos</span>)</span>{<br>  <span class="hljs-keyword">var</span> ary = <span class="hljs-built_in">this</span>._elements<br>  <span class="hljs-keyword">var</span> pIdx = (pos - <span class="hljs-number">1</span>) &gt;&gt; <span class="hljs-number">1</span><br>  <span class="hljs-keyword">if</span>(pos &gt;= <span class="hljs-number">0</span> &amp;&amp; ary[pos] &gt; ary[pIdx]){<br>    <span class="hljs-built_in">this</span>._swap(pos, pIdx)<br>    <span class="hljs-built_in">this</span>._heapUp(pIdx)<br>  }<br>}<br></code></pre></div></td></tr></tbody></table></figure><p>排序</p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 增加heapDown的结束条件</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">heapDown</span>(<span class="hljs-params">ary, pos,stopIdx = ary.length</span>)</span>{<br>  <span class="hljs-keyword">var</span> leftIdx = pos * <span class="hljs-number">2</span> + <span class="hljs-number">1</span><br>  <span class="hljs-keyword">var</span> rightIdx = pos * <span class="hljs-number">2</span> + <span class="hljs-number">2</span><br>  <span class="hljs-keyword">var</span> maxIdx = pos<br>  <span class="hljs-keyword">if</span>(leftIdx &lt; stopIdx &amp;&amp; ary[leftIdx] &gt; ary[[maxIdx]){<br>    maxIdx = leftIdx<br>  }<br>  <span class="hljs-keyword">if</span>(rightIdx &lt; stopIdx &amp;&amp; ary[leftIdx] &lt; ary[[maxIdx]){<br>    maxIdx = rightIdx<br>  }<br>  <span class="hljs-keyword">if</span>(pos !== maxIdx){<br>    swap(ary, pos, maxIdx)<br>    heapDown(ary, maxIdx, stopIdx)<br>  }<br>}<br><br><span class="hljs-comment">// 建立一个新数组排序</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">heapSort</span>(<span class="hljs-params">ary</span>)</span>{<br>  <span class="hljs-keyword">var</span> p = <span class="hljs-keyword">new</span> PriorityQueue()<br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> item <span class="hljs-keyword">of</span> ary){<br>    p.push(item)<br>  }<br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = ary.length - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--){<br>    ary[i] = p.pop()<br>  }<br>  <span class="hljs-keyword">return</span> ary<br>}<br><br><span class="hljs-comment">// 就地排序</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">heapSort2</span>(<span class="hljs-params">ary</span>)</span>{<br>  heapify(ary)<br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = ary.length - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">1</span>; i--){<br>    swap(ary, i, <span class="hljs-number">0</span>)<br>    heapDown(ary, <span class="hljs-number">0</span>, i)<br>  }<br>  <span class="hljs-keyword">return</span> ary<br>}<br></code></pre></div></td></tr></tbody></table></figure><h1 id="排序算法的稳定性"><a href="#排序算法的稳定性" class="headerlink" title="排序算法的稳定性"></a>排序算法的稳定性</h1><p>指排序算法在排序前后是否会改变相同元素的相对位置。<br>不改变相同元素的相对位置，则为稳定的排序算法，反之则为不稳定的排序算法。<br>排序稳定性用在类似成绩单排序的多优先级排序的场景中。</p><p>冒泡排序：稳定<br>选择排序：不稳定<br>插入排序：稳定<br>BST排序：稳定<br>归并排序：稳定<br>快速排序：不稳定<br>堆排序：不稳定</p><h1 id="class实现"><a href="#class实现" class="headerlink" title="class实现"></a>class实现</h1><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 被调用时必须要加new，原型上的方法默认不能被枚举</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PriorityQueue</span></span>{<br>  <span class="hljs-comment">// 构造函数</span><br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">predicate = it =&gt; it, initial = []</span>)</span>{<br>  <span class="hljs-built_in">this</span>._predicate() = predicate<br>  <span class="hljs-built_in">this</span>._elements = [...initial]<br>  <span class="hljs-built_in">this</span>._heapify()<br>  }<br><br>  <span class="hljs-comment">// 静态方法，PriorityQueue.heapify()，用PriorityQueue.xxx调用</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-title">heapify</span>(<span class="hljs-params"></span>)</span>{<br><br>  }<br>  <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-title">from</span>(<span class="hljs-params">ary</span>)</span>{<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> PriorityQueue(<span class="hljs-function"><span class="hljs-params">it</span> =&gt;</span> it, ary)<br>  }<br><br>  <span class="hljs-comment">// 实例方法，PriorityQueue.prototype._heapify()</span><br>  <span class="hljs-function"><span class="hljs-title">_heapify</span>(<span class="hljs-params"></span>)</span>{<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = (<span class="hljs-built_in">this</span>._elements.length - <span class="hljs-number">1</span>) &gt;&gt; <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--){<br>      <span class="hljs-built_in">this</span>._heapDown(i)<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span><br>  }<br>  <span class="hljs-function"><span class="hljs-title">push</span>(<span class="hljs-params">val</span>)</span>{<br>    <span class="hljs-built_in">this</span>._elements.push(val)<br>    <span class="hljs-built_in">this</span>._heapUp(<span class="hljs-built_in">this</span>._elements.length - <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span><br>  }<br>  <span class="hljs-keyword">get</span> <span class="hljs-title">size</span>(){<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>._elements.length<br>  }<br>  <span class="hljs-keyword">set</span> <span class="hljs-title">size</span>(<span class="hljs-params">val</span>){<br><br>  }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PriorityQueue</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Array</span></span>{  <span class="hljs-comment">//继承</span><br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span>{<br><br>  }<br>  <span class="hljs-function"><span class="hljs-title">push</span>(<span class="hljs-params">val</span>)</span>{<br>  <span class="hljs-built_in">super</span>() <span class="hljs-comment">//父类，Array.call(this)</span><br>  <span class="hljs-built_in">super</span>.push(val)<br>  <span class="hljs-built_in">this</span>.push(val)  <span class="hljs-comment">//写法错误</span><br>  }<br>  <span class="hljs-function"><span class="hljs-title">poll</span>(<span class="hljs-params">val</span>)</span>{<br>  <span class="hljs-built_in">this</span>.push()  <span class="hljs-comment">//不同名称才能用this</span><br>  }<br>}<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>{<br>  #a = <span class="hljs-number">8</span>  <span class="hljs-comment">//A.a禁止访问</span><br>  b = <span class="hljs-number">9</span>  <span class="hljs-comment">//可以直接写在前面</span><br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span>{<br>  <span class="hljs-built_in">this</span>.b = <span class="hljs-number">9</span><br>  }<br>  <span class="hljs-function"><span class="hljs-title">getA</span>(<span class="hljs-params"></span>)</span>{<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.#a  <span class="hljs-comment">//内部可以访问</span><br>  }<br>}<br></code></pre></div></td></tr></tbody></table></figure><h1 id="处理错误"><a href="#处理错误" class="headerlink" title="处理错误"></a>处理错误</h1><h2 id="重试"><a href="#重试" class="headerlink" title="重试"></a>重试</h2><p>假设有一个函数 primitiveMulitiply，在50%的情况下将两个数相乘，在另外50%的情况下会触发 MultiplicatorUnitFailure 类型的异常。编写一个函数，调用这个容易出错的函数，不断尝试直到调用成功并返回结果为止。<br>确保只处理你期望的异常。【选自 JavaScript编程精解（第2版）P115】</p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MultiplicatorUnitFailure</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Error</span> </span>{<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">msg</span>)</span> {<br>    <span class="hljs-built_in">super</span>(msg)<br>  }<br>}<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">primitiveMultiply</span>(<span class="hljs-params">a, b</span>) </span>{<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Math</span>.random() &lt; <span class="hljs-number">0.5</span>) {<br>    <span class="hljs-keyword">return</span> a * b<br>  } <span class="hljs-keyword">else</span> {<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> MultiplicatorUnitFailure()<br>  }<br>}<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">multiply</span>(<span class="hljs-params">a, b</span>) </span>{<br>  <span class="hljs-keyword">for</span> (; ;) {<br>    <span class="hljs-keyword">try</span> {<br>      <span class="hljs-keyword">var</span> result = primitiveMultiply(a, b)<br>      <span class="hljs-keyword">return</span> result<br>    } <span class="hljs-keyword">catch</span> (e) {<br>      <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> MultiplicatorUnitFailure) {<br>        <span class="hljs-keyword">continue</span><br>      } <span class="hljs-keyword">else</span> {<br>        <span class="hljs-keyword">throw</span> e<br>      }<br>    }<br>  }<br>}<br><br><span class="hljs-comment">// primitiveMultiply(a, b) 会有50 % 的几率失败</span><br><span class="hljs-comment">// multiply(a, b) 在尝试失败时会重新尝试直至成功</span><br></code></pre></div></td></tr></tbody></table></figure><h2 id="上锁的箱子"><a href="#上锁的箱子" class="headerlink" title="上锁的箱子"></a>上锁的箱子</h2><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> box = {<br>  locked: <span class="hljs-literal">true</span>;<br>  unlock: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{ <span class="hljs-built_in">this</span>.locked = <span class="hljs-literal">false</span>; },<br>  lock: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{ <span class="hljs-built_in">this</span>.locked = <span class="hljs-literal">true</span>; },<br>  _content: [],<br>  <span class="hljs-keyword">get</span> <span class="hljs-title">content</span>(){<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.locked) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">"locked!"</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>._content;<br>  }<br>};<br></code></pre></div></td></tr></tbody></table></figure><p>这是一个带锁的箱子。其中存放了一个数组，但只有在箱子被解锁时，才可以访问数组，不允许直接访问 _content 属性。<br>编写一个名为 withBoxContent 的函数，接受一个函数类型的参数，其作用是解锁箱子，执行该函数，无论是正常返回还是抛出异常，在 withBoxContent 函数返回前都必须锁上箱子。【选自 JavaScript编程精解（第2版）P115】</p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">withBoxUnlocked</span>(<span class="hljs-params">f</span>)</span>{<br>  <span class="hljs-keyword">try</span>{<br>    box.unlock()<br>    <span class="hljs-keyword">return</span> f(box.content)<br>  }<span class="hljs-keyword">finally</span>{<br>    box.lock()<br>  }<br>}<br><br>withBoxContent(<span class="hljs-function">(<span class="hljs-params">content</span>) =&gt;</span> {<br>  <span class="hljs-comment">// do something with content</span><br>})<br></code></pre></div></td></tr></tbody></table></figure><p><strong>类似python with语句的高阶函数</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">With</span>(<span class="hljs-params">...args</span>) </span>{<span class="hljs-comment">//rest parameter</span><br>  <span class="hljs-keyword">var</span> f = args.pop()<br>  <span class="hljs-keyword">try</span> {<br>    f(...args)<br>  } <span class="hljs-keyword">finally</span> {<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> arg <span class="hljs-keyword">of</span> args) {<br>      arg.close()<br>    }<br>  }<br>}<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight py"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py"><span class="hljs-comment"># python with 语句</span><br>With(open('a.txt'), open('b.txt'), (a, b) =&gt; {<br>   <span class="hljs-comment"># do sth with a and b</span><br>})<br></code></pre></div></td></tr></tbody></table></figure><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h2 id="创建正则表达式"><a href="#创建正则表达式" class="headerlink" title="创建正则表达式"></a>创建正则表达式</h2><ol><li>使用RegExp构造函数<br><code>var re1 = new RegExp("abc")</code></li><li>使用斜杠（/）<br><code>var re2 = /abc/</code><br>一些字符如问号、加号在正则表达式中有特殊含义，如果想要表示其字符本身，需要在字符前加上反斜杠。如<code>var eighteenPlus = /eighteen\+/</code></li></ol><h2 id="匹配测试"><a href="#匹配测试" class="headerlink" title="匹配测试"></a>匹配测试</h2><p>test方法接受传递的字符串，并返回一个布尔值，表示字符串中是否包含能与表达式模式匹配的字符串</p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-regexp">/abc/</span>.test(<span class="hljs-string">"abcde"</span>))  <span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-regexp">/abc/</span>.test(<span class="hljs-string">"abxde"</span>))  <span class="hljs-comment">//false</span><br></code></pre></div></td></tr></tbody></table></figure><h2 id="匹配字符集"><a href="#匹配字符集" class="headerlink" title="匹配字符集"></a>匹配字符集</h2><ul><li><p>一组字符放在方括号之间，匹配方括号中的任意字符<br>方括号中的两个字符间插入连字符（-）指定字符范围，字符顺序由Unicode决定。</p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-regexp">/[0123456789]/</span>.test(<span class="hljs-string">"in 1992"</span>))  <span class="hljs-comment">//true，匹配到 1 就结束了</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-regexp">/[0-9]/</span>.test(<span class="hljs-string">"in 1992"</span>))  <span class="hljs-comment">//true</span><br></code></pre></div></td></tr></tbody></table></figure></li><li><p>许多字符组都有其内置的快捷写法</p><table><thead><tr><th align="center">简写</th><th align="left">意义</th></tr></thead><tbody><tr><td align="center">\d</td><td align="left">任意数字符号</td></tr><tr><td align="center">\w</td><td align="left">字母和数字符号（单词符号）</td></tr><tr><td align="center">\s</td><td align="left">任意空白符号（空格，制表符，换行符等类似符号）</td></tr><tr><td align="center">\D</td><td align="left">非数字符号</td></tr><tr><td align="center">\W</td><td align="left">非字母和数字符号</td></tr><tr><td align="center">\S</td><td align="left">非空白符号</td></tr><tr><td align="center">.</td><td align="left">除了换行符以外的任意符号</td></tr></tbody></table></li><li><p>左方括号后添加 <code>^</code> 来排除某个字符集</p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> notBianry = <span class="hljs-regexp">/[^01]/</span><br><span class="hljs-built_in">console</span>.log(notBianry.test(<span class="hljs-string">"1100100010100110"</span>))  <span class="hljs-comment">//false</span><br><span class="hljs-built_in">console</span>.log(notBianry.test(<span class="hljs-string">"1100100010200110"</span>))  <span class="hljs-comment">//true</span><br></code></pre></div></td></tr></tbody></table></figure></li></ul><h2 id="部分模式重复"><a href="#部分模式重复" class="headerlink" title="部分模式重复"></a>部分模式重复</h2><ul><li>在正则表达式某个元素后添加 <code>+</code> ，表达该元素至少重复一次。</li><li><code>*</code> 含义与加号类似，但是可以匹配模式不存在的情况。只有无法找到可以匹配的文本才会考虑匹配该元素从未出现的情况。<figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-regexp">/'\d+'/</span>.test(<span class="hljs-string">"'123'"</span>))  <span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-regexp">/'\d+'/</span>.test(<span class="hljs-string">"''"</span>))     <span class="hljs-comment">//false</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-regexp">/'\d*'/</span>.test(<span class="hljs-string">"'123'"</span>))  <span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-regexp">/'\d*'/</span>.test(<span class="hljs-string">"''"</span>))     <span class="hljs-comment">//true</span><br></code></pre></div></td></tr></tbody></table></figure></li><li>元素后面跟一个问号表示这部分模式“可选”，即模式可能出现 0 次或 1 次。<figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> neighbor = <span class="hljs-regexp">/neighbou?r/</span><br><span class="hljs-built_in">console</span>.log(neighbor.test(<span class="hljs-string">"neighbour"</span>))  <span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.log(neighbor.test(<span class="hljs-string">"neighbor"</span>))   <span class="hljs-comment">//true</span><br></code></pre></div></td></tr></tbody></table></figure></li><li>花括号准确指明某个模式的出现次数<br>例如，某个元素后加 {4}，则该模式需要出现且仅能出现 4 次。{2,4} 表示该元素至少出现 2 次，至多出现 4 次。<br>也可省略任意一侧的数字，表示不限制这一侧的数量。 {,5} 表示 0 到 5 次，{5,} 表示至少 5 次<figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> dateTime = <span class="hljs-regexp">/\d\d-\d\d-\d\d\d\d \d\d:\d\d/</span><br><span class="hljs-built_in">console</span>.log(dateTime.test(<span class="hljs-string">"25-12-2020 11:20"</span>))  <span class="hljs-comment">//true</span><br><br><span class="hljs-keyword">var</span> dateTime = <span class="hljs-regexp">/\d{1,2}-\d{1,2}-\d{4} \d{1,2}:\d{2}/</span><br><span class="hljs-built_in">console</span>.log(dateTime.test(<span class="hljs-string">"25-1-2020 9:20"</span>))  <span class="hljs-comment">//true</span><br></code></pre></div></td></tr></tbody></table></figure></li></ul><h2 id="子表达式分组"><a href="#子表达式分组" class="headerlink" title="子表达式分组"></a>子表达式分组</h2><p>对多个元素使用 <code>*</code>  或者 <code>+</code> ，需要使用圆括号将这个元素包围起来，创建一个分组。</p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> cartoonCrying = <span class="hljs-regexp">/boo+(hoo+)+/i</span><br><span class="hljs-built_in">console</span>.log(cartoonCrying.test(<span class="hljs-string">"Boohoooohoohooo"</span>))  <span class="hljs-comment">//true</span><br></code></pre></div></td></tr></tbody></table></figure><p>第一个和第二个 <code>+</code> 分别作用于 boo 与 hoo 的 o 字符，第三个 + 作用于整个元组 hoo+ 。<br>末尾的 i 表示正则表达式不区分大小写。</p><h2 id="匹配和分组"><a href="#匹配和分组" class="headerlink" title="匹配和分组"></a>匹配和分组</h2><ul><li>exec（执行，execute）方法，无法匹配模式返回null，否则返回一个表示匹配字符串信息的对象<br>exec 方法返回的对象包含 index 属性，表示字符串成功匹配的起始位置<figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> m = <span class="hljs-regexp">/\d+/</span>.exec(<span class="hljs-string">"one two 100"</span>)<br><span class="hljs-built_in">console</span>.log(m)        <span class="hljs-comment">//["100"]</span><br><span class="hljs-built_in">console</span>.log(m.index)  <span class="hljs-comment">//8</span><br></code></pre></div></td></tr></tbody></table></figure></li><li>字符串有一个类似的 match 方法<figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">"one two 100"</span>.match(<span class="hljs-regexp">/\d+/</span>))  <span class="hljs-comment">//["100"]</span><br></code></pre></div></td></tr></tbody></table></figure></li></ul><h2 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h2><p><a href="https://zh.wikipedia.org/zh-hans/ISO_8601">国际标准时间的表示方法</a><br><a href="https://momentjs.com/">moment</a></p><ul><li><p>JavaScript中使用从 0 开始的数字表示月份（因此用 Jan 表示 12 月），使用从 1 开始的数字表示日期。<br>构造函数的后四个参数（小时，分钟，秒，毫秒）是可选的，若没有指定，则参数为 0 。</p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">d = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()<br><span class="hljs-comment">// Fri Dec 25 2020 14:52:31 GMT+0800</span><br>d.toUTCString()  <span class="hljs-comment">//格林威治时间</span><br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-number">2020</span>, <span class="hljs-number">12</span>, <span class="hljs-number">25</span>))<br><span class="hljs-comment">// Mon Jan 25 2021 00:00:00 GMT+0800</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-number">2020</span>, <span class="hljs-number">12</span>, <span class="hljs-number">25</span>, <span class="hljs-number">12</span>, <span class="hljs-number">59</span>, <span class="hljs-number">59</span>, <span class="hljs-number">999</span>))<br><span class="hljs-comment">// Mon Jan 25 2021 12:59:59 GMT+0800</span><br></code></pre></div></td></tr></tbody></table></figure></li><li><p>从 1970 年开始流逝的毫秒数表示时间戳，如在 1970 年前，则使用负数。Data 对象的 getTime 方法返回这种时间戳。<br>Data 对象提供了一些方法来提取时间中的某些数值，如 getYear、getMonth、getDate、getHours、getMinutes、getSeconds。还有getYear会返回使用两位数字表示的年份（如 99 或 20 ），但很少用到。</p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-number">2020</span>, <span class="hljs-number">12</span>, <span class="hljs-number">25</span>).getTime())<br><span class="hljs-comment">// 1611504000000</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-number">1611504000000</span>))<br><span class="hljs-comment">// Mon Jan 25 2021 00:00:00 GMT+0800</span><br></code></pre></div></td></tr></tbody></table></figure></li><li><p>在希望捕获的那部分模式字符串两边加上圆括号，通过字符串创建对应的 Date 对象。</p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">findDate</span>(<span class="hljs-params">string</span>)</span>{<br>  <span class="hljs-keyword">var</span> dateTime = <span class="hljs-regexp">/(\d{1,2})-(\d{1,2})-(\d{4})/</span><br>  <span class="hljs-keyword">var</span> match = dateTime.exec(string)<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-built_in">Number</span>(match[<span class="hljs-number">3</span>]), <span class="hljs-built_in">Number</span>(match[<span class="hljs-number">2</span>]), <span class="hljs-built_in">Number</span>(match[<span class="hljs-number">1</span>]))<br>}<br><span class="hljs-built_in">console</span>.log(findDate(<span class="hljs-string">"12-25-2020"</span>))<br><span class="hljs-comment">// Sat Feb 12 2022 00:00:00 GMT+0800</span><br></code></pre></div></td></tr></tbody></table></figure></li></ul><h2 id="单词和字符串边界"><a href="#单词和字符串边界" class="headerlink" title="单词和字符串边界"></a>单词和字符串边界</h2><p><a href="https://regex101.com/">regular expression 101</a></p><ul><li><code>^</code> 表示输入字符串起始的位置，<code>$</code> 表示字符串结束位置，因此<code>^\d+$</code>匹配完全由一个或多个数字组成的字符串。<br><code>^!</code> 匹配任意以感叹号开头的字符串，<code>x^</code> 不匹配任何字符串（ 字符串之前不可能有字符x）</li><li>如果要确保日期字符串起始结束位置在单词边界上，可以使用 <code>\b</code> 标记。<br>单词边界，指的是起始和结束位置都是单词字符，而起始位置的前一个字符以及结束位置的后一个字符不是单词字符。<figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-regexp">/cat/</span>.test(<span class="hljs-string">"concatenate"</span>))      <span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-regexp">/\bcat\b/</span>.test(<span class="hljs-string">"concatenate"</span>))  <span class="hljs-comment">//false</span><br></code></pre></div></td></tr></tbody></table></figure></li><li>零宽断言<br>零宽断言扩展了^ $ \b这几个匹配符<br>它匹配一个位置，可以要求某个位置满足或不满足特定条件。</li></ul><p>分为四种情况：</p><ol><li>positive look ahead assition<br>要求某个位置的右边满足某种条件（右边遇到某种模式）<br>(?=expr) 匹配一个位置，要求其右边要出现expr的匹配</li><li>negative look ahead assition<br>要求某个位置的右边不满足某种条件（右边不能遇到某种模式）<br>(?!expr)</li><li>positive look behand assition<br>要求某个位置的左边满足某种条件（右边遇到某种模式）<br>(?&lt;=expr)</li><li>negative look behand assition<br>要求某个位置的左边不满足某种条件（右边不能遇到某种模式）<br>(?&lt;!expr)</li></ol><p>\b == (?=\w)(?&lt;=\W)|(?=\W)(?&lt;=\w)|^|$<br>^  == (?&lt;![^])<br>$  == (?![^])</p><ul><li>分组命名<figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> dateTime = <span class="hljs-regexp">/(?&lt;year&gt;\d\d\d\d)-(?&lt;month&gt;\d\d)-(?&lt;day&gt;\d\d)/</span><br><span class="hljs-built_in">console</span>.log(dateTime.exec(<span class="hljs-string">"2020-12-28"</span>))<br><span class="hljs-comment">// groups:</span><br><span class="hljs-comment">//  day: "20"</span><br><span class="hljs-comment">//  month: "12"</span><br><span class="hljs-comment">//  year: "2020"</span><br></code></pre></div></td></tr></tbody></table></figure></li></ul><h2 id="选项模式"><a href="#选项模式" class="headerlink" title="选项模式"></a>选项模式</h2><p>管道符号 <code>|</code> 表示从其左侧的模式和右侧的模式任意选择一个进行匹配</p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> animalCount = <span class="hljs-regexp">/\b\d+ (pig|cow|chicken)s?\b/</span><br><span class="hljs-built_in">console</span>.log(animalCount.test(<span class="hljs-string">"15 pigs"</span>))         <span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.log(animalCount.test(<span class="hljs-string">"15 pigchickens"</span>))  <span class="hljs-comment">//false</span><br></code></pre></div></td></tr></tbody></table></figure><h2 id="replace方法"><a href="#replace方法" class="headerlink" title="replace方法"></a>replace方法</h2><ul><li>replace可用于将字符串中的一部分替换为另一个字符串<figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-string">"papa"</span>.replace(<span class="hljs-string">"p"</span>, <span class="hljs-string">"m"</span>)  <span class="hljs-comment">//mapa</span><br></code></pre></div></td></tr></tbody></table></figure></li><li>第一个参数也可以是正则表达式。若在正则表达式后加g，会替换字符串中所有匹配项。<figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-string">"Borobudur"</span>.replace(<span class="hljs-regexp">/[ou]/</span>, <span class="hljs-string">"a"</span>)   <span class="hljs-comment">//Barobudur</span><br><span class="hljs-string">"Borobudur"</span>.replace(<span class="hljs-regexp">/[ou]/g</span>, <span class="hljs-string">"a"</span>)  <span class="hljs-comment">//Barabadar</span><br></code></pre></div></td></tr></tbody></table></figure></li><li>$1和$2引用了模式中使用圆括号包裹的元组。$1会替换第一个元组匹配的字符串，$2会替换第二个元组匹配的字符串，依此类推，直到$9为止。<br>也可以使用$&amp;引用整个匹配。<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/n">RegExp.$1-$9</a><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-string">"Hoppy, Grace\nMcCarthy, John\nRitchine, Dennis"</span>.replace(<span class="hljs-regexp">/([\w]+), ([\w]+)/g</span>,<span class="hljs-string">'$2 $1'</span>)<br><span class="hljs-comment">// Grace Hoppy</span><br><span class="hljs-comment">// John McCarthy</span><br><span class="hljs-comment">// Dennis Ritchine</span><br></code></pre></div></td></tr></tbody></table></figure></li><li>第二个参数还可以使用一个函数<figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> s = <span class="hljs-string">"the cia and fbi"</span><br><span class="hljs-built_in">console</span>.log(s.replace(<span class="hljs-regexp">/\b(fbi|cia)\b/g</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">str</span>)</span>{<br>  <span class="hljs-keyword">return</span> str.toUpperCase()<br>}))<br><span class="hljs-comment">// the CIA and FBI</span><br></code></pre></div></td></tr></tbody></table></figure></li></ul><h2 id="贪婪模式"><a href="#贪婪模式" class="headerlink" title="贪婪模式"></a>贪婪模式</h2><ul><li>模式重复运算符<code>+ * ? {}</code>是“贪婪”的，指的是这些运算符会尽量多地匹配它们可以匹配的字符，然后回溯。<br>若在其后加上一个问号<code>+? *? ?? {}?</code>，它们会变成非贪婪的，此时它们会尽量少地匹配字符，只有当剩下的模式无法匹配时才会多进行匹配。<figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-string">"I ! have ! an apple ! I ! am fine"</span><br><span class="hljs-keyword">var</span> b = <span class="hljs-regexp">/!.+!/</span><br>a.match(b)<br><span class="hljs-comment">// ! have ! an apple ! I !</span><br></code></pre></div></td></tr></tbody></table></figure>首先匹配的是<code>！</code>，此时它找到了句子中的第一个感叹号<br>然后匹配<code>.</code>，即除换行符之外的所有字符，它一直匹配到了句子的最后<br>匹配后面的<code>!</code>，于是开始往回匹配感叹号，一直匹配到第二个 I 后面的<code>!</code><br>于是匹配出第一个和最后一个感叹后中间包含的内容<figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-string">"I ! have ! an apple ! I ! am fine"</span><br><span class="hljs-keyword">var</span> b = <span class="hljs-regexp">/!.+?!/g</span><br>a.match(b)<br><span class="hljs-comment">//["! have !", "! I !"]</span><br></code></pre></div></td></tr></tbody></table></figure>与贪婪模式一样先匹配<code>!</code>，然后进行<code>.</code>的匹配，但是与贪婪模式不同的是，它每匹配一次<code>.</code>，就会往后匹配一次<code>!</code></li></ul><h2 id="基本写法总结"><a href="#基本写法总结" class="headerlink" title="基本写法总结"></a>基本写法总结</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions">正则表达式</a></p><table><thead><tr><th align="center">符号</th><th align="left">匹配规则</th></tr></thead><tbody><tr><td align="center">?</td><td align="left">匹配出现 0 次或 1 次</td></tr><tr><td align="center">+</td><td align="left">匹配出现 1 次或多次</td></tr><tr><td align="center">*</td><td align="left">匹配出现 0 次或 1 次或多次</td></tr><tr><td align="center">{n}</td><td align="left">匹配刚好出现 n 次</td></tr><tr><td align="center">{n,m}</td><td align="left">匹配最少出现 n 次最多出现 m 次</td></tr><tr><td align="center">{n,}</td><td align="left">匹配最少出现 n 次</td></tr><tr><td align="center">{,m}</td><td align="left">匹配最多出现 m 次</td></tr><tr><td align="center">g</td><td align="left">全局匹配</td></tr><tr><td align="center">i</td><td align="left">不区分大小写</td></tr><tr><td align="center">m</td><td align="left">多行匹配</td></tr><tr><td align="center">exp1(?=exp2)</td><td align="left">查找exp2前面的exp1</td></tr><tr><td align="center">(?&lt;=exp2)exp1</td><td align="left">查找exp2后面的exp1</td></tr><tr><td align="center">exp1(?!exp2)</td><td align="left">查找后面不是exp2的exp1</td></tr><tr><td align="center">(?&lt;!exp2)exp1</td><td align="left">查找前面不是exp2的exp1</td></tr></tbody></table><h1 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h1><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> person = {<br>  name: <span class="hljs-string">"XiaoMing"</span>,<br>  age: <span class="hljs-number">30</span>,<br>};<br><span class="hljs-keyword">const</span> { name, age } = person<br><span class="hljs-built_in">console</span>.log(name, age)<br><span class="hljs-comment">// XiaoMing 30</span><br><br><span class="hljs-keyword">const</span> person2 = {<br>  relatives: {<br>    mother: <span class="hljs-string">"XiaoHong"</span>,<br>    father: <span class="hljs-string">"XiaoHua"</span>,<br>  }<br>};<br><span class="hljs-keyword">const</span> { mother, father } = person2.relatives<br><span class="hljs-built_in">console</span>.log(mother, father)<br><span class="hljs-comment">// XiaoHong XiaoHua</span><br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> person3 = {<br>  name: <span class="hljs-string">"XiaoMing"</span>,<br>  age: <span class="hljs-number">30</span>,<br>  relatives: {<br>    mother: <span class="hljs-string">"XiaoHong"</span>,<br>    father: <span class="hljs-string">"XiaoHua"</span>,<br>  }<br>};<br><span class="hljs-keyword">const</span> { age, <span class="hljs-attr">relatives</span>: { mother } } = person3<br><span class="hljs-built_in">console</span>.log(age, mother) <br><span class="hljs-comment">// 30 "XiaoHong"</span><br></code></pre></div></td></tr></tbody></table></figure><ul><li><p>为变量改名</p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> person4 = {<br>  name: <span class="hljs-string">"XiaoMing"</span>,<br>  age: <span class="hljs-number">30</span>,<br>  relatives: {<br>    mother: <span class="hljs-string">"XiaoHong"</span>,<br>    father: <span class="hljs-string">"XiaoHua"</span>,<br>  }<br>};<br><span class="hljs-keyword">const</span> { <span class="hljs-attr">age</span>: A, <span class="hljs-attr">relatives</span>: { <span class="hljs-attr">mother</span>: mo } } = person4<br><span class="hljs-built_in">console</span>.log(A, mo)<br><span class="hljs-comment">// 30 "XiaoHong"</span><br></code></pre></div></td></tr></tbody></table></figure></li><li><p>为变量赋默认值<br>若变量存在，赋原有值；若不存在，赋所声明的值</p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> person = {<br>  name: <span class="hljs-string">"XiaoMing"</span>,<br>  age: <span class="hljs-number">30</span>,<br>};<br><span class="hljs-keyword">const</span> { <span class="hljs-attr">name</span>: personName = <span class="hljs-string">"guest"</span>,<br>  age = <span class="hljs-number">18</span><br>} = person<br><span class="hljs-built_in">console</span>.log(personName, age)<br><span class="hljs-comment">// XiaoMing 30</span><br><br><br><span class="hljs-keyword">const</span> person2 = {<br>};<br><span class="hljs-keyword">const</span> { <span class="hljs-attr">name</span>: personName = <span class="hljs-string">"guest"</span>,<br>  age = <span class="hljs-number">18</span><br>} = person2<br><span class="hljs-built_in">console</span>.log(personName, age)<br><span class="hljs-comment">// guest 18</span><br></code></pre></div></td></tr></tbody></table></figure></li></ul><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>除去将{}改为[]，用法大致与对象一样</p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> info = <span class="hljs-string">"Mike,18,1234567"</span><br><span class="hljs-keyword">const</span> person = info.split(<span class="hljs-string">","</span>)<br><span class="hljs-comment">// ["Mike", "18", "1234567"]</span><br><span class="hljs-keyword">const</span> [name, age, ID] = person<br><span class="hljs-built_in">console</span>.log(name, age, ID)<br><span class="hljs-comment">// Mike 18 1234567</span><br></code></pre></div></td></tr></tbody></table></figure><ul><li><p>略过某个值</p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> info = <span class="hljs-string">"Mike,18,1234567"</span><br><span class="hljs-keyword">const</span> person = info.split(<span class="hljs-string">","</span>)<br><span class="hljs-comment">// ["Mike", "18", "1234567"]</span><br><span class="hljs-keyword">const</span> [name, , ID] = person<br><span class="hljs-built_in">console</span>.log(name, ID)<br><span class="hljs-comment">// Mike 1234567</span><br></code></pre></div></td></tr></tbody></table></figure></li><li><p>交换变量</p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">let</span> b = -<span class="hljs-number">1</span>;<br>[a, b] = [b, a];<br><span class="hljs-built_in">console</span>.log(a, b)<br><span class="hljs-comment">// -1 1</span><br></code></pre></div></td></tr></tbody></table></figure></li></ul><h1 id="剩余参数和扩展参数"><a href="#剩余参数和扩展参数" class="headerlink" title="剩余参数和扩展参数"></a>剩余参数和扩展参数</h1><h2 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h2><p><code>...</code>能表示剩余参数，它将这些剩余参数打包成一个数组</p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> team = [<span class="hljs-string">"Yukina"</span>, <span class="hljs-string">"Sayo"</span>, <span class="hljs-string">"Lisa"</span>, <span class="hljs-string">"Ako"</span>, <span class="hljs-string">"Linko"</span>]<br><span class="hljs-keyword">const</span> [vo, gt, ...members] = team<br><span class="hljs-built_in">console</span>.log(vo, gt, members)<br><span class="hljs-comment">// Yukina Sayo&nbsp;["Lisa", "Ako", "Linko"]</span><br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">numbers</span>(<span class="hljs-params">...nums</span>) </span>{<br>  <span class="hljs-keyword">if</span> (nums.length === <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> []<br>  <span class="hljs-built_in">console</span>.log(nums)<br>}<br><span class="hljs-built_in">console</span>.log(numbers())<br><span class="hljs-comment">// []</span><br><span class="hljs-built_in">console</span>.log(numbers(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br><span class="hljs-comment">// [1,2,3]</span><br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sortNumbers</span>(<span class="hljs-params">...nums</span>) </span>{<br>  <span class="hljs-keyword">if</span> (nums.length === <span class="hljs-number">0</span>) {<br>    <span class="hljs-keyword">return</span> []<br>  } <span class="hljs-keyword">else</span> {<br>    <span class="hljs-keyword">return</span> nums.sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a - b)<br>  }<br>}<br><span class="hljs-built_in">console</span>.log(sortNumbers(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">10</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>))<br><span class="hljs-comment">// [1, 2, 8, 9, 10]</span><br></code></pre></div></td></tr></tbody></table></figure><h2 id="扩展参数"><a href="#扩展参数" class="headerlink" title="扩展参数"></a>扩展参数</h2><p><code>...</code>也能扩展参数，将元素里的数全部展开</p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> vo = <span class="hljs-string">"Yukina"</span><br><span class="hljs-keyword">const</span> gt = <span class="hljs-string">"Sayo"</span><br><span class="hljs-keyword">const</span> members = [<span class="hljs-string">"Lisa"</span>, <span class="hljs-string">"Ako"</span>, <span class="hljs-string">"Linko"</span>]<br><span class="hljs-keyword">const</span> team = [vo, gt, ...members]<br><span class="hljs-built_in">console</span>.log(team)<br><span class="hljs-comment">// ["Yukina", "Sayo", "Lisa", "Ako", "Linko"]</span><br></code></pre></div></td></tr></tbody></table></figure><ul><li>合并数组<figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> food = [<br>  <span class="hljs-string">"rice"</span>, <span class="hljs-string">"bread"</span>, <span class="hljs-string">"noodle"</span>, <span class="hljs-string">"spaghetti"</span><br>]<br><span class="hljs-keyword">const</span> drink = [<span class="hljs-string">"milk"</span>, <span class="hljs-string">"cola"</span>, <span class="hljs-string">"coffee"</span>]<br><span class="hljs-keyword">const</span> menu = food.concat(drink)<br><span class="hljs-built_in">console</span>.log(menu)<br><span class="hljs-comment">// ["rice", "bread", "noodle", "spaghetti", "milk", "cola", "coffee"]</span><br><span class="hljs-keyword">const</span> menu2 = [...food, <span class="hljs-string">"chicken"</span>, ...drink, <span class="hljs-string">"ice cream"</span>]<br><span class="hljs-built_in">console</span>.log(menu2)<br><span class="hljs-comment">// ["rice", "bread", "noodle", "spaghetti", "chicken", "milk", "cola", "coffee", "ice cream"]</span><br></code></pre></div></td></tr></tbody></table></figure></li></ul><h1 id="for-in-与-for-of"><a href="#for-in-与-for-of" class="headerlink" title="for in 与 for of"></a>for in 与 for of</h1><p>for in 用来遍历对象（数组，函数）的可枚举属性（key）<br>for of 只能用来遍历数组的项（value）</p><p>for in 需要注意的问题：可能会把原型中的 key 也遍历出来，可以用使用 hasOwnProperty 函数来判断自有属性</p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> drinkArr = [<span class="hljs-string">'百事'</span>, <span class="hljs-string">'七喜'</span>, <span class="hljs-string">'橙汁'</span>]<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> drink <span class="hljs-keyword">of</span> drinkArr) {<br>  <span class="hljs-built_in">console</span>.log(drink)<br>}<br><span class="hljs-comment">// 百事</span><br><span class="hljs-comment">// 七喜</span><br><span class="hljs-comment">// 橙汁</span><br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> drinkObj = { <span class="hljs-number">1</span>: <span class="hljs-string">'百事'</span>, <span class="hljs-number">2</span>: <span class="hljs-string">'七喜'</span>, <span class="hljs-number">3</span>: <span class="hljs-string">'橙汁'</span> }<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> drinkObj) {<br>  <span class="hljs-comment">// console.log(key)</span><br>  <span class="hljs-comment">// 1 2 3</span><br>  <span class="hljs-built_in">console</span>.log(drinkObj[key])<br>}<br><span class="hljs-comment">// 百事</span><br><span class="hljs-comment">// 七喜</span><br><span class="hljs-comment">// 橙汁</span><br></code></pre></div></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>web前端学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>front-end</tag>
      
      <tag>JavaScript</tag>
      
      <tag>RegExp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web前端学习笔记4——JS函数与二叉树</title>
    <link href="/posts/318ca9a3.html"/>
    <url>/posts/318ca9a3.html</url>
    
    <content type="html"><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><ul><li>function定义<figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">square</span>(<span class="hljs-params">x</span>) </span>{<br>  <span class="hljs-keyword">return</span> x * x<br>}<br><span class="hljs-comment">// 当function关键字在一行的开头时，创建函数声明语句</span><br><span class="hljs-comment">// 函数声明中函数的名字不可以少</span><br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> square = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params">x</span>) </span>{<br>  a()<br>  <span class="hljs-keyword">return</span> x * x<br>}<br><span class="hljs-comment">// 当function不在一行开头时，创建函数表达式</span><br><span class="hljs-comment">// 变量声明，并将函数表达式的求值结果，即一个函数赋值给这个变量</span><br><span class="hljs-comment">// 函数表达式中，函数名可选，如果写了，只能在函数内部使用</span><br><span class="hljs-comment">// 在函数外部需要使用变量名</span><br></code></pre></div></td></tr></tbody></table></figure></li><li>let 与 var<br>let定义的变量在块级作用域内，var是在函数作用域<br>let定义的变量不能重复定义，也不能用var重新定义<br>let定义的变量没有将定义提升，但有TDZ行为，即该作用域内定义完成之前不能使用该变量</li><li>调用栈<br>计算内部用于存储函数返回位置，函数的局部变量的内存空间，叫调用栈<br>函数间的相互调用的逻辑关系，叫调用栈</li></ul><h1 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h1><h2 id="原码"><a href="#原码" class="headerlink" title="原码"></a>原码</h2><ul><li>第一位表示符号, 其余位表示值<br>[+1]<sub>原</sub> = 0000 0001<br>[-1]<sub>原</sub> = 1000 0001</li><li>第一位是符号位, 所以8位二进制数的取值范围就是:<br>[1111 1111 , 0111 1111]</li></ul><h2 id="反码"><a href="#反码" class="headerlink" title="反码"></a>反码</h2><ul><li>正数的反码是其本身</li><li>负数的反码是符号位不变，其余各位取反<br>[+1] = [00000001]<sub>原</sub> = [00000001]<sub>反</sub><br>[-1] = [10000001]<sub>原</sub> = [11111110]<sub>反</sub></li></ul><h2 id="补码"><a href="#补码" class="headerlink" title="补码"></a>补码</h2><ul><li>正数的补码是其本身</li><li>负数的补码是符号位不变，其余各位取反，最后+1(即其反码+1)<br>[+1] = [00000001]<sub>原</sub> = [00000001]<sub>反</sub> = [00000001]<sub>补</sub><br>[-1] = [10000001]<sub>原</sub> = [11111110]<sub>反</sub> = [11111111]<sub>补</sub></li></ul><p>如果用原码表示，让符号位也参与计算，对于减法来说，结果是不正确的。<br>用反码计算减法，结果的真值部分是正确的。但会有 [0000 0000]<sub>原</sub> 和 [1000 0000]<sub>原</sub> 两个编码表示0。<br>补码的出现解决了这个问题。[1000 0000]<sub>补</sub> 就是-128，实际上是使用以前的-0的补码来表示-128， 所以-128并没有原码和反码表示。使用补码，不仅修复了0的符号以及存在两个编码的问题，而且还能够多表示一个最低数。</p><p>8位二进制，使用原码或反码表示的范围为[-127, +127]，而使用补码表示的范围为[-128, 127]。<br>常用到的32位，可以表示范围是[-231, 231-1]。</p><h1 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h1><h2 id="移位"><a href="#移位" class="headerlink" title="移位"></a>移位</h2><ul><li>左移 &lt;&lt;<br>将运算数的二进制整体左移指定位数，低位用0补齐。<br>num &lt;&lt; 1，相当于num乘以2。</li><li>带符号右移 &gt;&gt;<br>高位补符号位，即正数补0，负数补1。<br>num &gt;&gt; 1，相当于num除以2，并向下取整Math.floor(num/2)</li><li>无符号右移 &gt;&gt;&gt;<br>忽略符号位，高位补0。<br>移完以后的数字永远当正数理解。</li></ul><p>js中浮点数参与位运算时，取其整数部分的低32bit参与运算。</p><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><ul><li><p>按位与 <code>&amp;</code></p><ul><li>每对比特位执行与（AND）操作</li><li>a 和 b 都是 1 时，a AND b 才是 1</li><li><code>x &amp; 0 = 0, x &amp; -1 = x</code></li></ul></li><li><p>按位或 <code>|</code></p><ul><li>每对比特位执行或（OR）操作</li><li>a 或 b 为 1，则 a OR b 结果为 1</li><li><code>x | 0 = x, x | -1 = -1</code></li></ul></li><li><p>按位异或 <code>^</code></p><ul><li>每对比特位执行异或（XOR）操作</li><li>a 和 b 不相同时，a XOR b 的结果为 1</li><li><code>x ^ 0 = x, x ^ -1 = ~x</code></li><li><code>a ^ b ^ b = a ^ 0 = a</code></li></ul></li><li><p>按位非 <code>~</code></p><ul><li>每个比特位执行非（NOT）操作，一元运算符</li><li>NOT a 结果为 a 的反转（即反码）</li><li><code>~n = -(n+1)</code></li></ul></li></ul><h1 id="浮点数的表示"><a href="#浮点数的表示" class="headerlink" title="浮点数的表示"></a>浮点数的表示</h1><ul><li>浮点数一般使用8字节即64bit存储，为双精度浮点数<ul><li>也有用4字节即32bit存储的单精度浮点数</li></ul></li><li>最左边一位表示符号，0表示正，1表示负</li><li>接下来的11bit表示指数</li><li>剩余的表示科学记数法中的小数部分，不含整数部分，因为整数部分总是1</li><li>为什么指数的范围是-1023到1024而非-1024到1023？<ul><li>指数部分并没有使用补码进行存储</li><li>正1024次方表示无穷大</li></ul></li><li>为什么指数部分读出时要减1023，写入时要加1023？<ul><li>指数部分使用原码，范围是0到2047</li><li>表示-1023到1024</li><li>所以0表示-1023</li><li>所以读出时减，写入时加</li></ul></li><li>为什么指数不用补码？<ul><li>为了能够从左往右扫描即可确定两个浮点数的大小</li><li>即除符号位以外只看指数部分即可以确定大小<ul><li>即指数部分谁先出现1谁更大</li><li>如果指数部分完全相同，那么底数部分谁先出现1谁更大</li></ul></li></ul></li><li>为什么要如此在意浮点大小对比的效率？<ul><li>因为浮点数更多时候是对比大小而非对比相等<ul><li>因为浮点数表示的不精确<ul><li>很难保证数学上相等的两个计算路径在程序中的计算结果也是完全相同的<ul><li>在程序中 a * b / c 的结果跟 a / c * b 有可能不相同的</li><li>所以在程序中很少判断两个浮点数的相等<ul><li>而是判断它们在数轴上的距离，即求其差的绝对值看是否小于某个精度<ul><li>Math.abs(a - b) &lt; Number.EPLSION</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li>为什么不把底数的整数部分存储？<ul><li>因为底数的整数部分总是1</li><li>效果就是二进制状态下的有效位数是53位</li></ul></li><li>正因为有效位数有53位，如果用这53位全部分表示整数<ul><li>即2的53次方，可以保证在这个范围内的整数运算的精确</li><li>所以有一个常量Number.MAX_SAFE_INTEGER的值即为2的53减1</li><li>大于这个范围的数不是不能表示，只是不保证完全精确<ul><li>大于这个范围无法表示浮点数，且整数也不是连续表示的</li></ul></li></ul></li><li>因为总的有效数字只有53位<ul><li>所以如果整数部分使用的越多，小数部分就越小，反之亦然</li><li>而数值越大，整数部分需要的有效位数就越多，而小数部分的有效位数就越少<ul><li>即数值越大，小数部分的精度就越低</li></ul></li><li>而数值越小，整数部分需要的有效位数就越少，而小数部分的有效位数就越多<ul><li>即数值越小，小数部分的精度就越高</li></ul></li></ul></li><li>IEEE754<ul><li>单精度浮点数 float   float32   f32<ul><li>使用4字节表示，其指数部分8bit，底数23bit</li></ul></li><li>双精度浮点数 double  float64   f64<ul><li>使用8字节表示，指数部分11bit，底数52bit</li></ul></li></ul></li></ul><h1 id="对象与属性"><a href="#对象与属性" class="headerlink" title="对象与属性"></a>对象与属性</h1><p>对象是任意数量的（属性与值的对应关系）的集合<br>有些语言里对象也称关联数组（值与其名字的关联关系）<br>数组是值的有序集合（即值在数组里是有序的）<br>对象是值的俱名集合（即值在对象里是有名字的）</p><h1 id="函数-1"><a href="#函数-1" class="headerlink" title="函数"></a>函数</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><table><thead><tr><th align="left">代码</th><th align="left">意义</th></tr></thead><tbody><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array">Arry</a></td><td align="left">数组</td></tr><tr><td align="left">var a = []</td><td align="left">创建空数组</td></tr><tr><td align="left">var a = [1,2,3+2,4]</td><td align="left">创建有初始内容的数组</td></tr><tr><td align="left">var a = Array(5)</td><td align="left">创建长不为0的空数组</td></tr><tr><td align="left">var num = a[i]</td><td align="left">读取数组中的第i(可为表达式)项</td></tr><tr><td align="left">a.push(value)</td><td align="left">在数组末尾增加一项</td></tr><tr><td align="left">var value = a.pop()</td><td align="left">删除数组末尾的项并返回这一项的值</td></tr><tr><td align="left">a.unshift(value)</td><td align="left">在数组的前面增加一项</td></tr><tr><td align="left">var value = a.shift()</td><td align="left">删除数组第一项项并返回这一项的值</td></tr><tr><td align="left">a.length</td><td align="left">数组长度</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/splice">a.splice(i, n, ‘add’)</a></td><td align="left">从第i位开始删掉n项，并插入“add”，会改变原数组</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/slice">a.slice(i, j)</a></td><td align="left">从第i项开始，j项(0开始,不包括)结束浅拷贝，返回一个新数组</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/fill">a.fill(0, i, j)</a></td><td align="left">从第i位开始填充0，第j位结束</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf">a.indexOf(abc, 2)</a></td><td align="left">从第2项开始找到”abc”的第一个索引，若不存在则返回-1</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf">a.lastIndexOf(a, 2)</a></td><td align="left">从第2项开始逆向查找”abc”的最后一个的索引，如果不存在则返回 -1</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/concat">a1.concat(a2)</a></td><td align="left">合并a1和a2两个数组<code>[...a1, ...a2, ...a3]</code></td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes">a.includes(0, NaN)</a></td><td align="left">数组是否包含一个指定的值，包含返回 true，否则返回false</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse">a.reverse()</a></td><td align="left">将数组中元素的位置颠倒，并返回该数组</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort">a.sort()</a></td><td align="left">对数组的元素进行排序并返回，默认排序是将元素转换为字符串，比较它们的UTF-16代码单元值</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/join">a.join(‘ + ‘)</a></td><td align="left">一个数组的所有元素连接成一个字符串并返回这个字符串</td></tr></tbody></table><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><table><thead><tr><th align="left">代码</th><th align="left">意义</th></tr></thead><tbody><tr><td align="left">str.toUpperCase()</td><td align="left">调用字符串转为大写并返回</td></tr><tr><td align="left">str.toLowerCase()</td><td align="left">调用字符串转为小写并返回</td></tr><tr><td align="left">str.charCodeAt()</td><td align="left">字母转为ascii码</td></tr><tr><td align="left">String.fromCharCode(num)</td><td align="left">ascii码转为字母</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/charAt">str.charAt(i)</a></td><td align="left">返回字符串的第i个字符<code>(0 &lt;= i &lt;= length-1)</code></td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split">a.split(“ “)</a></td><td align="left">将一个字符串分割成子字符串数组</td></tr></tbody></table><h2 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h2><table><thead><tr><th align="left">代码</th><th align="left">意义</th></tr></thead><tbody><tr><td align="left">a.toFixed()</td><td align="left">指定小数位数</td></tr><tr><td align="left">a.toString()</td><td align="left">转成几进制</td></tr><tr><td align="left">parseInt()</td><td align="left">丢弃小数部分,保留整数部分</td></tr><tr><td align="left">parseFloat()</td><td align="left">解析一个参数（必要时先转换为字符串）并返回一个浮点数</td></tr></tbody></table><h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><table><thead><tr><th align="left">代码</th><th align="left">意义</th></tr></thead><tbody><tr><td align="left">Math.pow(x,y)</td><td align="left">x 的 y 次幂</td></tr><tr><td align="left">Math.abs(x)</td><td align="left">x 的绝对值</td></tr><tr><td align="left">Math.round()</td><td align="left">四舍五入</td></tr><tr><td align="left">Math.ceil()</td><td align="left">向上取整,有小数就整数部分加1</td></tr><tr><td align="left">Math.floor()</td><td align="left">向下取整</td></tr><tr><td align="left">Math.trunc()</td><td align="left">取整数部分</td></tr><tr><td align="left">Math.max(a,b,c)</td><td align="left">取其最大的值</td></tr></tbody></table><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><table><thead><tr><th align="left">代码</th><th align="left">意义</th></tr></thead><tbody><tr><td align="left">const map = new Map();</td><td align="left">声明一个Map</td></tr><tr><td align="left">map.size</td><td align="left">返回Map对象中所包含的键值对个数</td></tr><tr><td align="left">map.set(key, val)</td><td align="left">向Map中添加新元素，若key已经有值，则键值会被更新，否则生成新键值对</td></tr><tr><td align="left">map.get(key)</td><td align="left">通过key值返回value值</td></tr><tr><td align="left">map.has(key)</td><td align="left">判断Map对象中是否存在key，若存在返回true，否则返回false</td></tr><tr><td align="left">map.delete(key)</td><td align="left">通过键值从Map中删除对应的数据</td></tr><tr><td align="left">map.clear()</td><td align="left">将这个Map中的所有元素删除</td></tr><tr><td align="left">for(let k of map.key){console.log(k);}</td><td align="left">遍历key值</td></tr><tr><td align="left">for(let v of map.values()){console.log(v);}</td><td align="left">遍历values值<code>Object.values()</code></td></tr><tr><td align="left">for(let [k, v] of map.entries()){console.log(k + “===” + v);}</td><td align="left">遍历键值对，以数组形式存在</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach">map.forEach</a></td><td align="left">返回三个参数，value,key,map本身</td></tr></tbody></table><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><table><thead><tr><th align="left">代码</th><th align="left">意义</th></tr></thead><tbody><tr><td align="left">const set = new Set();</td><td align="left">声明一个Set</td></tr><tr><td align="left">set.size</td><td align="left">返回Set的成员总数</td></tr><tr><td align="left">set.add(val)</td><td align="left">添加某个值，返回Set结构本身（可链式调用），若相同值已存在，则不会添加</td></tr><tr><td align="left">set.has(val)</td><td align="left">返回一个布尔值，表示该值是否为Set的成员</td></tr><tr><td align="left">set.delete(val)</td><td align="left">删除某个值，删除成功返回true，否则返回false</td></tr><tr><td align="left">set.clear()</td><td align="left">清除所有成员</td></tr><tr><td align="left">const set = new Set([…a, …b]);</td><td align="left">a与b数组的交集</td></tr></tbody></table><h1 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h1><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><ul><li>对数组中每一项运行给定函数，返回每次函数调用的结果组成的数组。</li></ul><p><strong>for写法</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++){<br>  arr[i] = arr[i] * <span class="hljs-number">3</span><br>}<br></code></pre></div></td></tr></tbody></table></figure><p><strong>map写法</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// item为当前遍历到的项,和arr[i]一样</span><br>arr = arr.map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>)</span>{<span class="hljs-keyword">return</span> item * <span class="hljs-number">3</span>})<br><br><span class="hljs-comment">// es6写法</span><br>arr = arr.map(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> {<span class="hljs-keyword">return</span> item * <span class="hljs-number">3</span>})<br><span class="hljs-comment">// 或者</span><br>arr = arr.map(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item * <span class="hljs-number">3</span>)<br></code></pre></div></td></tr></tbody></table></figure><h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><ul><li>对数组中的每一项运行给定函数，返回该函数会返回true的项组成的数组。</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> people = [{<br>    name:<span class="hljs-string">'aa'</span>,<br>    isChecked:<span class="hljs-literal">null</span><br>},{<br>    name:<span class="hljs-string">'bb'</span>,<br>    isChecked:<span class="hljs-literal">null</span><br>},{<br>    name:<span class="hljs-string">'bb'</span>,<br>    isChecked:<span class="hljs-literal">true</span><br>}]<br></code></pre></div></td></tr></tbody></table></figure><p><strong>for写法</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 选出已经打卡了的人</span><br><br><span class="hljs-keyword">var</span> arr = []<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; people.length; i++){<br>  <span class="hljs-keyword">if</span>(people[i].isChecked){<br>    arr.push(people[i])<br>  }<br>}<br></code></pre></div></td></tr></tbody></table></figure><p><strong>filter写法</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = people.filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>)</span>{<span class="hljs-keyword">return</span> item.isChecked})<br><br><span class="hljs-comment">// es6写法</span><br><span class="hljs-keyword">var</span> arr = people.filter(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.isChecked)<br></code></pre></div></td></tr></tbody></table></figure><h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h2><ul><li>forEach()对数组中的每一项运行给定函数，没有返回值。本质上跟for没有区别，只是写法不一样。</li></ul><p><strong>for方式</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 给每个人都加上一个属性gender，设置为male</span><br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; people.length; i++){<br>  people[i].gender = <span class="hljs-string">'male'</span><br>}<br></code></pre></div></td></tr></tbody></table></figure><p><strong>forEach方式</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = people.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>)</span>{item.gender = <span class="hljs-string">'male'</span>})<br><br><span class="hljs-comment">// es6写法</span><br><span class="hljs-keyword">var</span> arr = people.forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> {item.gender = <span class="hljs-string">'male'</span>})<br></code></pre></div></td></tr></tbody></table></figure><h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce">reduce()</a>：每个元素执行一个提供的reducer函数(升序执行)，将其结果汇总为单个返回值。一般用在累计累加上。</li></ul><p><strong>for方式</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span>,arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>; i&lt;arr.length; i++){<br>    sum += arr[i]<br>}<br></code></pre></div></td></tr></tbody></table></figure><p><strong>reduce方式</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">sum = arr.reduce(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a,b</span>) </span>{<span class="hljs-keyword">return</span> a + b})<br><br><span class="hljs-comment">// es6写法</span><br>sum = arr.reduce(<span class="hljs-function">(<span class="hljs-params">a,b</span>)=&gt;</span>{<span class="hljs-keyword">return</span> a + b})<br></code></pre></div></td></tr></tbody></table></figure><p><strong>reduce实现</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reduce</span>(<span class="hljs-params">ary, reducer, result</span>) </span>{<br>  <span class="hljs-keyword">var</span> start = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">if</span> (result == <span class="hljs-literal">undefined</span>) {<br>    result = ary[<span class="hljs-number">0</span>]<br>    start = <span class="hljs-number">1</span><br>  }<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = start; i &lt; ary.length; i++) {<br>    result = reducer(result, ary[i], i, ary)<br>  }<br>  <span class="hljs-keyword">return</span> result<br>}<br></code></pre></div></td></tr></tbody></table></figure><h2 id="every-和-some"><a href="#every-和-some" class="headerlink" title="every 和 some"></a>every 和 some</h2><ul><li>every()对数组中的每一项运行给定函数，如果该函数对每一项都返回true，则返回true。</li><li>some()对数组中的每一项运行给定函数，如果该函数对任一项返回true，则返回true。</li></ul><p><strong>every实现</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">every</span>(<span class="hljs-params">ary, test</span>) </span>{<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; ary.length; i++) {<br>    <span class="hljs-keyword">if</span> (!test(ary[i], i, ary)) {<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    }<br>  }<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>}<br></code></pre></div></td></tr></tbody></table></figure><p><strong>for写法</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 要求每个人都签到才能合格</span><br><br><span class="hljs-keyword">var</span> isPass = <span class="hljs-literal">true</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; people.length; i++){<br>  <span class="hljs-keyword">if</span>(!sporter[i].isChecked){<br>    isPass = <span class="hljs-literal">false</span><br>    <span class="hljs-keyword">break</span><br>  }<br>}<br><span class="hljs-comment">// 由于有两次没有签到，返回false</span><br></code></pre></div></td></tr></tbody></table></figure><p><strong>every写法</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = people.every(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>)</span>{<span class="hljs-keyword">return</span> item.isChecked})<br><br><span class="hljs-comment">// es6写法</span><br><span class="hljs-keyword">var</span> arr = people.every(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.isChecked)<br></code></pre></div></td></tr></tbody></table></figure><hr><p><strong>some实现</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">some</span>(<span class="hljs-params">ary, test</span>) </span>{<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; ary.length; i++) {<br>    <span class="hljs-keyword">if</span> (!test(ary[i], i, ary)) {<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    }<br>  }<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>}<br></code></pre></div></td></tr></tbody></table></figure><p><strong>for写法</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 要求任意一次都签到就能合格</span><br><br><span class="hljs-keyword">var</span> isPass = <span class="hljs-literal">false</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; people.length; i++){<br>  <span class="hljs-keyword">if</span>(!sporter[i].isChecked){<br>    isPass = <span class="hljs-literal">true</span><br>    <span class="hljs-keyword">break</span><br>  }<br>}<br><span class="hljs-comment">// 由于有一次签到，返回true</span><br></code></pre></div></td></tr></tbody></table></figure><p><strong>some写法</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = people.some(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>)</span>{<span class="hljs-keyword">return</span> item.isChecked})<br><br><span class="hljs-comment">// es6写法</span><br><span class="hljs-keyword">var</span> arr = people.some(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.isChecked)<br></code></pre></div></td></tr></tbody></table></figure><h2 id="find-和-findIndex"><a href="#find-和-findIndex" class="headerlink" title="find 和 findIndex"></a>find 和 findIndex</h2><ul><li>find：返回传入一个测试条件（函数）符合条件的数组第一个元素。</li><li>findIndex：返回传入一个测试条件（函数）符合条件的数组第一个元素位置。</li></ul><p><strong>find实现</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">find</span>(<span class="hljs-params">ary, predicate</span>) </span>{<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; ary.length; i++) {<br>    <span class="hljs-keyword">if</span> (predicate(ary[i], i, ary)) {<br>      <span class="hljs-keyword">return</span> ary[i]<br>    }<br>  }<br>}<br></code></pre></div></td></tr></tbody></table></figure><p><strong>findIndex实现</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">findIndex</span>(<span class="hljs-params">ary, predicate</span>) </span>{<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; ary.length; i++) {<br>    <span class="hljs-keyword">if</span> (predicate(ary[i], i, ary)) {<br>      <span class="hljs-keyword">return</span> i<br>    }<br>  }<br>}<br></code></pre></div></td></tr></tbody></table></figure><p><strong>例子</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 找出第一个大于30的元素</span><br><span class="hljs-keyword">var</span> getItem, arr = [<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>, <span class="hljs-number">44</span>, <span class="hljs-number">55</span>, <span class="hljs-number">66</span>]<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; ary.length; i++) {<br>  <span class="hljs-keyword">if</span> (arr[i] &gt; <span class="hljs-number">30</span>) {<br>    getItem = arr[i]<br>    <span class="hljs-keyword">break</span><br>  }<br>}<br><br><span class="hljs-comment">// find写法</span><br>arr.find(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">val</span>) </span>{ <span class="hljs-keyword">return</span> val &gt; <span class="hljs-number">30</span> })<br><span class="hljs-comment">// es6写法</span><br>arr.find(<span class="hljs-function"><span class="hljs-params">val</span> =&gt;</span> val &gt; <span class="hljs-number">30</span>)<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 找出第一个大于30的元素的位置</span><br><span class="hljs-keyword">var</span> getItemIndex, arr = [<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>, <span class="hljs-number">44</span>, <span class="hljs-number">55</span>, <span class="hljs-number">66</span>]<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; ary.length; i++) {<br>  <span class="hljs-keyword">if</span> (arr[i] &gt; <span class="hljs-number">30</span>) {<br>    getItemIndex = i<br>    <span class="hljs-keyword">break</span><br>  }<br>}<br><br><span class="hljs-comment">// findIndex写法</span><br>arr.findIndex(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">val</span>) </span>{ <span class="hljs-keyword">return</span> val &gt; <span class="hljs-number">30</span> })<br><span class="hljs-comment">// es6写法</span><br>arr.findIndex(<span class="hljs-function"><span class="hljs-params">val</span> =&gt;</span> val &gt; <span class="hljs-number">30</span>)<br></code></pre></div></td></tr></tbody></table></figure><h2 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h2><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bind</span>(<span class="hljs-params">f, ...fixedArgs</span>) </span>{<br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">...args</span>) </span>{<br>    <span class="hljs-keyword">return</span> f(...fixedArgs, ...args)<br>  }<br>}<br></code></pre></div></td></tr></tbody></table></figure><h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><h2 id="特殊二叉树"><a href="#特殊二叉树" class="headerlink" title="特殊二叉树"></a>特殊二叉树</h2><table><thead><tr><th align="center">-</th><th align="left">满二叉树(Full Binary Tree)</th><th align="left">完全二叉树(Complete Binary Tree)</th></tr></thead><tbody><tr><td align="center">概念</td><td align="left">是每一层上的节点数都是最大节点数</td><td align="left">若除最后一层外的其余层都是满的，并且最后一层要么是满的，要么在右边缺少连续若干节点</td></tr><tr><td align="center">总结点k</td><td align="left">2<sup>h</sup> - 1</td><td align="left">2<sup>h-1</sup> &lt;= k &lt;= 2<sup>h</sup> - 1</td></tr><tr><td align="center">树高h</td><td align="left">log<sub>2</sub>(k + 1)</td><td align="left">log<sub>2</sub>k + 1</td></tr><tr><td align="center">其它</td><td align="left">第 i 层有 2<sup>i-1</sup> 个结点</td><td align="left"></td></tr></tbody></table><ul><li>二叉查找树（Binary Search Tree）<br>一棵空树 或者 具有下列性质的二叉树：</li></ul><ol><li>若任意节点的左子树不空，则左子树上所有节点的值均小于它的根节点的值；</li><li>若任意节点的右子树不空，则右子树上所有节点的值均大于或等于它的根节点的值；</li><li>任意节点的左、右子树也分别为二叉查找树。<br>BST 的中序遍历，节点值的打印顺序是递增的。</li></ol><ul><li>平衡二叉树<br>一棵空树 或者</li></ul><ol><li>保证左右子树的高度之差不大于 1</li><li>子树也必须是一颗平衡二叉树</li></ol><h2 id="遍历二叉树"><a href="#遍历二叉树" class="headerlink" title="遍历二叉树"></a>遍历二叉树</h2><p>遍历左子树L、访问根结点D和遍历右子树R。<br>先序遍历二叉树的顺序是DLR，中序遍历二叉树的顺序是LDR，后序遍历二叉树的顺序是LRD。</p><h2 id="DFS和BFS"><a href="#DFS和BFS" class="headerlink" title="DFS和BFS"></a>DFS和BFS</h2><p><strong>DFS(Deep First Search)</strong></p><ul><li>深度优先搜索</li><li>实现方式：利用栈和递归来实现</li><li>适用场景：快速发现底部节点<figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 递归实现</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deepTraversal</span>(<span class="hljs-params">node, nodeList</span>) </span>{<br>  <span class="hljs-keyword">if</span> (node) {<br>    nodeList.push(node)<br>    <span class="hljs-keyword">var</span> children = node.children<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; children.length; i++)<br>      deepTraversal(children[i], nodeList)<br>  }<br>  <span class="hljs-keyword">return</span> nodeList<br>}<br><span class="hljs-keyword">var</span> root = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'root'</span>)<br><span class="hljs-built_in">console</span>.log(deepTraversal(root, nodeList = []))<br><span class="hljs-comment">// 思路：</span><br><span class="hljs-comment">// 1.创建一个数组存放最终结果</span><br><span class="hljs-comment">// 2.当节点不为空时将节点push进去数组里面</span><br><span class="hljs-comment">// 3.获取儿子 遍历儿子节点</span><br><span class="hljs-comment">// 4.递归</span><br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 非递归实现</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deepTraversal</span>(<span class="hljs-params">node</span>) </span>{<br>  <span class="hljs-keyword">var</span> nodeList = []<br>  <span class="hljs-keyword">if</span> (node) {<br>    <span class="hljs-keyword">var</span> stack = []<br>    stack.push(node)<br>    <span class="hljs-keyword">while</span> (stack.length != <span class="hljs-number">0</span>) {<br>      <span class="hljs-keyword">var</span> childrenItem = stack.pop()<br>      nodeList.push(childrenItem)<br>      <span class="hljs-keyword">var</span> childrenList = childrenItem.children<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = childrenList.length - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>        stack.push(childrenList[i])<br>    }<br>  }<br>  <span class="hljs-keyword">return</span> nodeList<br>}<br><span class="hljs-keyword">var</span> root = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'root'</span>)<br><span class="hljs-built_in">console</span>.log(deepTraversal(root))<br></code></pre></div></td></tr></tbody></table></figure></li></ul><p><strong>BFS(Breath First Search)</strong></p><ul><li>广度优先搜索</li><li>实现方式：利用队列和递归来实现</li><li>适用场景：寻找最短路径的问题<figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">wideTraversal</span>(<span class="hljs-params">node</span>) </span>{<br>  <span class="hljs-keyword">var</span> nodeList = []<br>  <span class="hljs-keyword">if</span> (node != <span class="hljs-literal">null</span>) {<br>    <span class="hljs-keyword">var</span> queue = []<br>    queue.unshift(node)<br>    <span class="hljs-keyword">while</span> (queue.length != <span class="hljs-number">0</span>) {<br>      <span class="hljs-keyword">var</span> item = queue.shift()<br>      nodeList.push(item)<br>      <span class="hljs-keyword">var</span> children = item.children<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; children.length; i++)<br>        queue.push(children[i])<br>    }<br>  }<br>  <span class="hljs-keyword">return</span> nodeList<br>}<br><span class="hljs-keyword">var</span> root = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'root'</span>)<br><span class="hljs-built_in">console</span>.log(wideTraversal(root))<br><span class="hljs-comment">// 思路</span><br><span class="hljs-comment">// 1.创建一个nodeList存放最终结果</span><br><span class="hljs-comment">// 2.创建一个队列存放</span><br><span class="hljs-comment">// 3.当队列不为空时，获取队列第一个元素 ，存进nodeList</span><br><span class="hljs-comment">// 4.遍历所有的儿子节点，存进队列尾部</span><br><span class="hljs-comment">// 5.队列为空时退出循环并结束</span><br></code></pre></div></td></tr></tbody></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>web前端学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>front-end</tag>
      
      <tag>JavaScript</tag>
      
      <tag>Binary tree</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常见的算法题1</title>
    <link href="/posts/124edd95.html"/>
    <url>/posts/124edd95.html</url>
    
    <content type="html"><![CDATA[<h1 id="分离正整数数位"><a href="#分离正整数数位" class="headerlink" title="分离正整数数位"></a>分离正整数数位</h1><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> n = <span class="hljs-built_in">Number</span>(prompt(<span class="hljs-string">"输入一个整数:"</span>))<br><span class="hljs-keyword">while</span> (n &gt; <span class="hljs-number">0</span>) {<br>  <span class="hljs-keyword">var</span> x = n % <span class="hljs-number">10</span><br>  n = (n - x) / <span class="hljs-number">10</span><br>  <span class="hljs-built_in">console</span>.log(x)<br>}<br></code></pre></div></td></tr></tbody></table></figure><h1 id="数字反转"><a href="#数字反转" class="headerlink" title="数字反转"></a>数字反转</h1><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> x = <span class="hljs-number">0</span><br><span class="hljs-keyword">var</span> flag = <span class="hljs-number">0</span><br><span class="hljs-keyword">var</span> n = <span class="hljs-built_in">Number</span>(prompt(<span class="hljs-string">"输入一个整数:"</span>))<br><span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">0</span>) {<br>  n = -n<br>  flag = <span class="hljs-number">1</span><br>}<br><span class="hljs-keyword">while</span> (n) {<br>  <span class="hljs-keyword">var</span> digit = n % <span class="hljs-number">10</span><br>  x = x * <span class="hljs-number">10</span> + digit<br>  n = (n - digit) / <span class="hljs-number">10</span><br>}<br><span class="hljs-keyword">if</span> (flag == <span class="hljs-number">1</span>) {<br>  <span class="hljs-built_in">console</span>.log(-x)<br>} <span class="hljs-keyword">else</span> {<br>  <span class="hljs-built_in">console</span>.log(x)<br>}<br></code></pre></div></td></tr></tbody></table></figure><h1 id="判断质数"><a href="#判断质数" class="headerlink" title="判断质数"></a>判断质数</h1><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> isPrime = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">n</span>) </span>{<br>  <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">2</span>; i &lt;= <span class="hljs-built_in">Math</span>.sqrt(n); i++) {<br>    <span class="hljs-keyword">if</span> (n % i == <span class="hljs-number">0</span>) {<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    }<br>  }<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>}<br></code></pre></div></td></tr></tbody></table></figure><h1 id="求平方根"><a href="#求平方根" class="headerlink" title="求平方根"></a>求平方根</h1><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//二分法</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sqrt</span>(<span class="hljs-params">x</span>) </span>{<br>    <span class="hljs-keyword">if</span> (x &lt;= <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> x<br>    <span class="hljs-keyword">var</span> left = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">var</span> right = x;<br>    <span class="hljs-keyword">while</span> (right - left &gt; <span class="hljs-number">1</span>) {<br>      <span class="hljs-keyword">var</span> mid = <span class="hljs-built_in">Math</span>.floor((right + left) / <span class="hljs-number">2</span>);<br>      <span class="hljs-comment">// var mid = (right + left) &gt;&gt; 1;</span><br>      <span class="hljs-keyword">if</span> (mid * mid &gt; x) {<br>        right = mid;<br>      } <span class="hljs-keyword">else</span> {<br>        left = mid;<br>      }<br>    }<br>    <span class="hljs-keyword">return</span> left;<br>  }<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//求导算出公式</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sqrt</span>(<span class="hljs-params">n</span>) </span>{<br>    <span class="hljs-keyword">var</span> x = n<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">Math</span>.abs(x * x - n) &gt; <span class="hljs-number">0.00000001</span>) {<br>      x = (x + n / x) / <span class="hljs-number">2</span><br>    }<br>    <span class="hljs-keyword">return</span> x<br>  }<br></code></pre></div></td></tr></tbody></table></figure><p><a href="https://zh.wikipedia.org/wiki/%E5%B9%B3%E6%96%B9%E6%A0%B9%E5%80%92%E6%95%B0%E9%80%9F%E7%AE%97%E6%B3%95">平方根倒数速算法</a></p><h1 id="水仙花数"><a href="#水仙花数" class="headerlink" title="水仙花数"></a>水仙花数</h1><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">digitWidth</span>(<span class="hljs-params">m</span>) </span>{  <span class="hljs-comment">//计算n的十进制位宽</span><br>  <span class="hljs-keyword">var</span> width = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">do</span> {<br>    <span class="hljs-keyword">var</span> digit = m % <span class="hljs-number">10</span><br>    m = (m - digit) / <span class="hljs-number">10</span><br>    width++<br>  } <span class="hljs-keyword">while</span> (m &gt; <span class="hljs-number">0</span>) {<br>    <span class="hljs-keyword">return</span> width<br>  }<br>}<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">power</span>(<span class="hljs-params">x, n</span>) </span>{  <span class="hljs-comment">//计算x的n次方</span><br>  <span class="hljs-keyword">var</span> exp = <span class="hljs-number">1</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) {<br>    exp *= x<br>  }<br>  <span class="hljs-keyword">return</span> exp<br>}<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isNarcissistic</span>(<span class="hljs-params">n</span>) </span>{  <span class="hljs-comment">//是否为水仙花数</span><br>  <span class="hljs-keyword">var</span> width = digitWidth(n)<br>  <span class="hljs-keyword">var</span> m = n<br>  <span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">do</span> {<br>    <span class="hljs-keyword">var</span> digit = m % <span class="hljs-number">10</span><br>    sum += power(digit, width)<br>    m = (m - digit) / <span class="hljs-number">10</span><br>  } <span class="hljs-keyword">while</span> (m &gt; <span class="hljs-number">0</span>)<br>  <span class="hljs-keyword">if</span> (sum == n) {<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>  } <span class="hljs-keyword">else</span> {<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>  }<br>}<br></code></pre></div></td></tr></tbody></table></figure><h1 id="回文数"><a href="#回文数" class="headerlink" title="回文数"></a>回文数</h1><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isPalindrome</span>(<span class="hljs-params">n</span>) </span>{<br>  <span class="hljs-keyword">var</span> m = n<br>  <span class="hljs-keyword">var</span> revert = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">while</span> (m &gt; <span class="hljs-number">0</span>) {  <span class="hljs-comment">//数字反转</span><br>    <span class="hljs-keyword">var</span> digit = m % <span class="hljs-number">10</span><br>    revert = revert * <span class="hljs-number">10</span> + digit<br>    m = (m - digit) / <span class="hljs-number">10</span><br>  }<br>  <span class="hljs-keyword">if</span> (revert == n) {<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>  } <span class="hljs-keyword">else</span> {<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>  }<br>}<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isPalindrome</span>(<span class="hljs-params">n</span>) </span>{<br>  <span class="hljs-keyword">var</span> width = digitWidth(n)  <span class="hljs-comment">//调用之前写过的十进制位宽函数</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; (width - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>; i++) {<br>    <span class="hljs-keyword">var</span> j = width - i - <span class="hljs-number">1</span><br>    <span class="hljs-comment">//i,j分别指向顺数/倒数第n个数</span><br>    <span class="hljs-keyword">var</span> di = <span class="hljs-built_in">Math</span>.floor(n / <span class="hljs-built_in">Math</span>.pow(<span class="hljs-number">10</span>, i)) % <span class="hljs-number">10</span><br>    <span class="hljs-keyword">var</span> dj = <span class="hljs-built_in">Math</span>.floor(n / <span class="hljs-built_in">Math</span>.pow(<span class="hljs-number">10</span>, j)) % <span class="hljs-number">10</span><br>    <span class="hljs-keyword">if</span> (di !== dj) {<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    }<br>  }<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>}<br></code></pre></div></td></tr></tbody></table></figure><h1 id="2的幂"><a href="#2的幂" class="headerlink" title="2的幂"></a>2的幂</h1><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> isPowerOfTwo = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">n</span>) </span>{<br>  <span class="hljs-keyword">while</span> (n &amp;&amp; (n % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)) {<br>    n /= <span class="hljs-number">2</span>;<br>  }<br>  <span class="hljs-keyword">return</span> n == <span class="hljs-number">1</span>;<br>} <br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 如果一个数是2的次方数，那么它的二进数必然是最高位为1，其它都为0。</span><br><span class="hljs-comment">// 如果此时减1的话，则最高位会降一位，其余为0的位都变为1。</span><br><span class="hljs-comment">// 把两数相与，就会得到0。</span><br>  <span class="hljs-keyword">var</span> isPowerOfTwo = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">n</span>) </span>{<br>    <span class="hljs-keyword">return</span> ((n &gt; <span class="hljs-number">0</span>) &amp;&amp; ((n &amp; (n - <span class="hljs-number">1</span>)) == <span class="hljs-number">0</span>))<br>  }<br></code></pre></div></td></tr></tbody></table></figure><h1 id="汉明距离"><a href="#汉明距离" class="headerlink" title="汉明距离"></a>汉明距离</h1><p>计算两个数二进制有几个不相同的位</p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// z &amp; (z - 1)可以快速地移除最右边的bit 1，一直循环到num为0，总的循环数就是z中bit 1的个数</span><br>  <span class="hljs-keyword">var</span> hammingDistance = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">x, y</span>) </span>{<br>    <span class="hljs-keyword">var</span> z = x ^ y<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> (z) {<br>      z = z &amp; (z - <span class="hljs-number">1</span>)<br>      a++<br>    }<br>    <span class="hljs-keyword">return</span> a<br>  }<br></code></pre></div></td></tr></tbody></table></figure><h1 id="x的n次方"><a href="#x的n次方" class="headerlink" title="x的n次方"></a>x的n次方</h1><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> myPow = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">x, n</span>) </span>{<br>  <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> <span class="hljs-comment">// n=0直接返回1</span><br>  <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">0</span>) {  <span class="hljs-comment">//n&lt;0时，x的n次方等于1除以x的-n次方分</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> / myPow(x, -n)<br>  }<br>  <span class="hljs-keyword">if</span> (n % <span class="hljs-number">2</span>) {  <span class="hljs-comment">//n是奇数时，x的n次方等于x*x的n-1次方</span><br>    <span class="hljs-keyword">return</span> x * myPow(x, n - <span class="hljs-number">1</span>)<br>  }<br>  <span class="hljs-keyword">return</span> myPow(x * x, n / <span class="hljs-number">2</span>)  <span class="hljs-comment">//n是偶数，使用分治，一分为二，等于 x*x 的 n/2 次方 </span><br>}<br></code></pre></div></td></tr></tbody></table></figure><h1 id="单个数字"><a href="#单个数字" class="headerlink" title="单个数字"></a>单个数字</h1><p>数组中每个元素会出现两个，只有一个例外，找出它</p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> singleNumber = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums</span>) </span>{<br>  <span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) {<br>    sum ^= nums[i]<br>  }<br>  <span class="hljs-keyword">return</span> sum<br>};<br><span class="hljs-comment">// 把所有的数字求异或，相当于 sum = 0⊕num[0]⊕num[1]⊕num[2]...⊕num[n]</span><br><span class="hljs-comment">// 根据X⊕X = 0，会把相同的数都消去</span><br><span class="hljs-comment">// 因为X⊕0 = X，结果sum = 0⊕num[只有一个的数] = 只有一个的数</span><br></code></pre></div></td></tr></tbody></table></figure><h1 id="颠倒二进制位"><a href="#颠倒二进制位" class="headerlink" title="颠倒二进制位"></a>颠倒二进制位</h1><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> reverseBits = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">n</span>) </span>{<br>  <span class="hljs-keyword">var</span> res = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) {<br>    <span class="hljs-comment">//res只执行左移操作，最后一位为0</span><br>    <span class="hljs-comment">//若n最后一位为1，与1做与运算为1，此时使res最后一位 = n最后一位 = 1</span><br>    res &lt;&lt;= <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> ((n &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">1</span>) res++<br>    <span class="hljs-comment">//n右移，去掉的每一位都被相同的n取得</span><br>    n &gt;&gt;= <span class="hljs-number">1</span><br>  }<br>  <span class="hljs-comment">//将number转换为无符号的32bit数据，即Uint32类型</span><br>  <span class="hljs-keyword">return</span> res &gt;&gt;&gt; <span class="hljs-number">0</span><br>}<br></code></pre></div></td></tr></tbody></table></figure><h1 id="数比特位"><a href="#数比特位" class="headerlink" title="数比特位"></a>数比特位</h1><p>统计从0到n每个数的二进制写法的1的个数，存入数组中返回</p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 偶数：二进制表示中，偶数中 1 的个数一定和除以 2 之后的那个数一样多。</span><br><span class="hljs-comment">// 因为最低位是 0，除以 2 就是右移一位，也就是把那个 0 抹掉而已，所以 1 的个数是不变的。</span><br><span class="hljs-comment">// 奇数：二进制表示中，奇数一定比前面那个偶数多一个 1</span><br>  <span class="hljs-keyword">var</span> countBits = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">num</span>) </span>{<br>    <span class="hljs-keyword">var</span> count = [<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt;= num; i++) {<br>      <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) {<br>        count[i] = count[i / <span class="hljs-number">2</span>];<br>      } <span class="hljs-keyword">else</span> {<br>        count[i] = count[i - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br>      }<br>    }<br>    <span class="hljs-keyword">return</span> count;<br>  }<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 可以发现每个i值都是 i&amp;(i-1) 对应的值加1</span><br>  <span class="hljs-keyword">var</span> countBits = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">num</span>) </span>{<br>    <span class="hljs-keyword">var</span> count = [<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= num; i++) {<br>      count[i] = count[i &amp; (i - <span class="hljs-number">1</span>)] + <span class="hljs-number">1</span><br>    }<br>    <span class="hljs-keyword">return</span> count<br>  }<br></code></pre></div></td></tr></tbody></table></figure><h1 id="最大子数组"><a href="#最大子数组" class="headerlink" title="最大子数组"></a>最大子数组</h1><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 动态规划</span><br>  <span class="hljs-keyword">var</span> maxSubArray = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums</span>) </span>{<br>    <span class="hljs-keyword">var</span> max = nums[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">var</span> preMax = nums[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt; nums.length; i++) {<br><span class="hljs-comment">// 只有当前一个子数组大于0时，才能对加一个元素的数组产生正增益</span><br><span class="hljs-comment">// 否则直接从后一个数重新开始</span><br>      <span class="hljs-keyword">if</span> (preMax &gt; <span class="hljs-number">0</span>) {<br>        preMax += nums[i]<br>      } <span class="hljs-keyword">else</span> {<br>        preMax = nums[i]<br>      }<br><span class="hljs-comment">// 每次都把此次最大数存下来，和下一次作比较</span><br>      max = <span class="hljs-built_in">Math</span>.max(preMax, max)<br>    }<br>    <span class="hljs-keyword">return</span> max<br>  }<br></code></pre></div></td></tr></tbody></table></figure><h1 id="数质数"><a href="#数质数" class="headerlink" title="数质数"></a>数质数</h1><p>数在某个数之前有多少个质数</p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">  <span class="hljs-keyword">var</span> countPrimes = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">n</span>) </span>{<br><span class="hljs-comment">// 厄拉多塞筛法</span><br>    <span class="hljs-keyword">var</span> count = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">var</span> signs = []<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">2</span>; i &lt; n; i++) {<br>      <span class="hljs-keyword">if</span> (!signs[i]) {<br>        count++<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">2</span> * i; j &lt; n; j += i) {<br><span class="hljs-comment">// 把找过数的倍数，对应的sign设置为true。外循环就不会进入if循环，也就不会计数了。</span><br>          signs[j] = <span class="hljs-literal">true</span><br>        }<br>      }<br>    }<br>    <span class="hljs-keyword">return</span> count<br>  }<br></code></pre></div></td></tr></tbody></table></figure><h1 id="一周中的星期"><a href="#一周中的星期" class="headerlink" title="一周中的星期"></a>一周中的星期</h1><p>给一个日期，判断它是星期几</p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> dayOfTheWeek = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">day, month, year</span>) </span>{<br>  <span class="hljs-keyword">if</span> (month == <span class="hljs-number">1</span> || month == <span class="hljs-number">2</span>) {<br>    month += <span class="hljs-number">12</span><br>    year--<br>  }<br>  <span class="hljs-comment">// 把一月和二月看成是上一年的十三月和十四月</span><br>  <span class="hljs-keyword">var</span> iWeek = (day + <span class="hljs-number">2</span> * month + <span class="hljs-built_in">Math</span>.floor(<span class="hljs-number">3</span> * (month + <span class="hljs-number">1</span>) / <span class="hljs-number">5</span>) + year + <span class="hljs-built_in">Math</span>.floor(year / <span class="hljs-number">4</span>) - <span class="hljs-built_in">Math</span>.floor(year / <span class="hljs-number">100</span>) + <span class="hljs-built_in">Math</span>.floor(year / <span class="hljs-number">400</span>)) % <span class="hljs-number">7</span><br>  <span class="hljs-comment">//基姆拉尔森计算公式</span><br>  <span class="hljs-keyword">var</span> result = [<span class="hljs-string">"Monday"</span>, <span class="hljs-string">"Tuesday"</span>, <span class="hljs-string">"Wednesday"</span>, <span class="hljs-string">"Thursday"</span>, <span class="hljs-string">"Friday"</span>, <span class="hljs-string">"Saturday"</span>, <span class="hljs-string">"Sunday"</span>]<br>  <span class="hljs-keyword">return</span> result[iWeek]<br>}<br></code></pre></div></td></tr></tbody></table></figure><h1 id="三角形"><a href="#三角形" class="headerlink" title="三角形"></a>三角形</h1><p>给定一个三角形，求从上到下的最小路径和。每一步只能移动到下一行中相邻的结点。</p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> minimumTotal = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">triangle</span>) </span>{<br>  <span class="hljs-keyword">var</span> dp = <span class="hljs-built_in">Array</span>(triangle.length + <span class="hljs-number">1</span>).fill(<span class="hljs-number">0</span>)<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = triangle.length - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) {<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; triangle[i].length; j++) {<br>      <span class="hljs-comment">//  dp[i][j] = Math.min(dp[i + 1][j], dp[i + 1][j + 1]) + triangle[i][j]</span><br>      dp[j] = <span class="hljs-built_in">Math</span>.min(dp[j], dp[j + <span class="hljs-number">1</span>]) + triangle[i][j]<br>    }<br>  }<br>  <span class="hljs-keyword">return</span> dp[<span class="hljs-number">0</span>]<br>};<br></code></pre></div></td></tr></tbody></table></figure><h1 id="不同路径"><a href="#不同路径" class="headerlink" title="不同路径"></a>不同路径</h1><p>位于网格的左上角，到达网格的右下角，每次只能向下或者向右移动一步。总共有多少条不同的路径？</p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> uniquePaths = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">m, n</span>) </span>{<br>  <span class="hljs-keyword">let</span> dp = <span class="hljs-built_in">Array</span>.from({ <span class="hljs-attr">length</span>: m }, <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">Array</span>.from({ <span class="hljs-attr">length</span>: n }, <span class="hljs-function">() =&gt;</span> <span class="hljs-number">0</span>))<br>  <span class="hljs-comment">// 第一列的走法只有一种</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) {<br>    dp[i][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span><br>  }<br>  <span class="hljs-comment">// 第一行的走法只有一种</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; n; j++) {<br>    dp[<span class="hljs-number">0</span>][j] = <span class="hljs-number">1</span><br>  }<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; m; i++) {<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">1</span>; j &lt; n; j++) {<br>      <span class="hljs-comment">// 当前位置是从左边或上边走过来的</span><br>      dp[i][j] = dp[i - <span class="hljs-number">1</span>][j] + dp[i][j - <span class="hljs-number">1</span>]<br>    }<br>  }<br>  <span class="hljs-keyword">return</span> dp[m - <span class="hljs-number">1</span>][n - <span class="hljs-number">1</span>]<br>};<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> uniquePaths = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">m, n</span>) </span>{<br>  <span class="hljs-keyword">let</span> dp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(m).fill(<span class="hljs-number">1</span>)<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) {<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">1</span>; j &lt; m; j++) {<br>      dp[j] += dp[j - <span class="hljs-number">1</span>]<br>    }<br>  }<br>  <span class="hljs-keyword">return</span> dp[m - <span class="hljs-number">1</span>]<br>};<br></code></pre></div></td></tr></tbody></table></figure><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 冒泡排序法</span><br>  <span class="hljs-keyword">var</span> bubbleSort = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums</span>) </span>{<br>    <span class="hljs-comment">// 外层每趟循环，找出一个最大的数</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) {<br>      <span class="hljs-comment">// 判断每次是否需要交换</span><br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; nums.length - <span class="hljs-number">1</span> - i; j++) {<br>        <span class="hljs-keyword">if</span> (nums[j] &gt; nums[j + <span class="hljs-number">1</span>]) {<br>          <span class="hljs-comment">// ES6 交换两个变量</span><br>          [nums[j], nums[j + <span class="hljs-number">1</span>]] = [nums[j + <span class="hljs-number">1</span>], nums[j]]<br>          <span class="hljs-comment">// ES5 交换两个变量</span><br>          <span class="hljs-comment">// const temp = nums[j]</span><br>          <span class="hljs-comment">// nums[j] = nums[j + 1]</span><br>          <span class="hljs-comment">// ums[j + 1] = nums[j]</span><br>        }<br>      }<br>    }<br>    <span class="hljs-keyword">return</span> nums<br>  };<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 插入排序法</span><br>  <span class="hljs-keyword">var</span> sortSort = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums</span>) </span>{<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; nums.length; i++) {<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = i; j &gt;= <span class="hljs-number">1</span>; j--) {<br>        <span class="hljs-keyword">if</span> (nums[j] &lt; nums[j - <span class="hljs-number">1</span>]) {<br>          [nums[j], nums[j - <span class="hljs-number">1</span>]] = [nums[j - <span class="hljs-number">1</span>], nums[j]]<br>        } <span class="hljs-keyword">else</span> {<br>          <span class="hljs-keyword">break</span><br>        }<br>      }<br>    }<br>    <span class="hljs-keyword">return</span> nums<br>  };<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 选择排序</span><br><span class="hljs-comment">// 主要思想：每轮选择无序范围内最小的元素放入有序范围的最后</span><br>  <span class="hljs-keyword">var</span> selectSort = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums</span>) </span>{<br>    <span class="hljs-comment">// 控制要找到最小的数放入i位置</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; nums.length - <span class="hljs-number">1</span>; i++) {<br>      <span class="hljs-keyword">var</span> minIdx = i <span class="hljs-comment">//把当前范围的第一个数当成最小数，但只记录其下标</span><br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = i; j &lt; nums.length; j++) {<br>        <span class="hljs-keyword">if</span> (nums[minIdx] &gt; nums[j])<br>          minIdx = j<br>      }<br>      [nums[minIdx], nums[i]] = [nums[i], nums[minIdx]]<br>    }<br>    <span class="hljs-keyword">return</span> nums<br>  };<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 归并排序</span><br><span class="hljs-comment">// 主要思想：将数组一分为二，各自排序，之后合并起来</span><br>  <span class="hljs-keyword">var</span> mergeSort = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums</span>) </span>{<br>    <span class="hljs-keyword">if</span> (nums.length == <span class="hljs-number">0</span> || nums.length == <span class="hljs-number">1</span>) {<br>      <span class="hljs-keyword">return</span> [...nums]<br>    }<br>    <span class="hljs-keyword">var</span> mid = nums.length &gt;&gt; <span class="hljs-number">1</span><br>    <span class="hljs-keyword">var</span> leftAry = nums.slice(<span class="hljs-number">0</span>, mid)<br>    <span class="hljs-keyword">var</span> rightAry = nums.slice(mid)<br>    <span class="hljs-keyword">var</span> leftSorted = mergeSort(leftAry)<br>    <span class="hljs-keyword">var</span> rightSorted = mergeSort(rightAry)<br>    <span class="hljs-keyword">var</span> result = []<br>    <span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> (i &lt; leftSorted.length &amp;&amp; j &lt; rightSorted.length) {<br>      <span class="hljs-keyword">if</span> (leftSorted[i] &lt; rightSorted[j]) {<br>        result.push(leftSorted[i++])<br>      } <span class="hljs-keyword">else</span> {<br>        result.push(rightSorted[j++])<br>      }<br>    }<br>    <span class="hljs-keyword">while</span> (i &lt; leftSorted.length) {<br>      result.push(leftSorted[i++])<br>    }<br>    <span class="hljs-keyword">while</span> (j &lt; rightSorted.length) {<br>      result.push(rightSorted[j++])<br>    }<br>    <span class="hljs-keyword">return</span> result<br>  };<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 快速排序</span><br><span class="hljs-comment">// 主要思想：随机选择数组中的一个数字，将数组分为三部分：小于该数的，等于该数的，大于该数的</span><br><span class="hljs-comment">// 对于小于该数的部分和大于该数的部分进行排序，然后拼接</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">quickSort</span>(<span class="hljs-params">ary</span>) </span>{<br>    <span class="hljs-keyword">if</span> (ary.length &lt; <span class="hljs-number">2</span>) {<br>      <span class="hljs-keyword">return</span> ary.slice()<br>    }<br>    <span class="hljs-keyword">var</span> randomIdx = <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * ary.length)<br>    <span class="hljs-keyword">var</span> pivot = ary[randomIdx]<br>    <span class="hljs-keyword">let</span> left = []<br>    <span class="hljs-keyword">let</span> middle = []<br>    <span class="hljs-keyword">let</span> right = []<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; ary.length; i++) {<br>      <span class="hljs-keyword">if</span> (ary[i] &lt; pivot) {<br>        left.push(ary[i])<br>      }<br>      <span class="hljs-keyword">if</span> (ary[i] &gt; pivot) {<br>        right.push(ary[i])<br>      }<br>      <span class="hljs-keyword">if</span> (ary[i] == pivot) {<br>        middle.push(ary[i])<br>      }<br>    }<br>    left = quickSort(left)<br>    right = quickSort(right)<br>    <span class="hljs-keyword">return</span> left.concat(middle, right)<br>  }<br></code></pre></div></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>web前端学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>front-end</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Sublime Text小技巧</title>
    <link href="/posts/9b5d8323.html"/>
    <url>/posts/9b5d8323.html</url>
    
    <content type="html"><![CDATA[<h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><table><thead><tr><th align="left">键位</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">Ctrl + K + B</td><td align="left">收起/打开侧边栏</td></tr><tr><td align="left">Ctrl + F</td><td align="left">查找当前页面内容</td></tr><tr><td align="left">Ctrl + P</td><td align="left">查找所有文件内容</td></tr><tr><td align="left">Alt + F3</td><td align="left">选择所有出现的当前选择</td></tr><tr><td align="left">有很多快捷键和<a href="/posts/eab54a24.html">vscode</a>都是相同的，在这里就不再赘述。</td><td align="left"></td></tr></tbody></table><h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><ol><li>安装Package Control<br>按Ctrl+shift+P，搜索install package control，然后直接点击。<br>在Preferences里最后一项看到Package Control说明安装成功。</li><li>安装插件<ol><li>按Ctrl+shift+P，输入 “install”, 选择 “Package Control: Install Package”。然后输入需要安装的插件名称，选择即可。会在Preferences - Package Settings里看到安装成功的插件。</li><li>下载插件文件夹直接放到 ~\Sublime Text\Data\Packages。</li></ol></li></ol><h2 id="推荐插件"><a href="#推荐插件" class="headerlink" title="推荐插件"></a>推荐插件</h2><ul><li>保存代码折叠状态<a href="https://github.com/titoBouzout/BufferScroll">BufferScroll</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>实用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Sublime Text</tag>
      
      <tag>Hotkeys</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo升级</title>
    <link href="/posts/ff1c9b2c.html"/>
    <url>/posts/ff1c9b2c.html</url>
    
    <content type="html"><![CDATA[<ol><li>全局升级hexo-cli<br><code>hexo version</code>查看当前版本，然后<code>npm i hexo-cli -g</code>，完成后再次<code>hexo version</code>查看是否升级成功。</li><li>升级插件<br><code>npm install -g npm-check</code>和<code>npm-check</code>，检查系统中安装的插件以及是否有更新。<br><code>npm install -g npm-upgrade</code>和<code>npm-upgrade</code>，升级系统中的插件。</li><li>更新hexo及所有插件<br><code>npm update -g</code>和<code>npm update --save</code></li></ol>]]></content>
    
    
    <categories>
      
      <category>实用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web前端——html/css简例</title>
    <link href="/posts/eef7064f.html"/>
    <url>/posts/eef7064f.html</url>
    
    <content type="html"><![CDATA[<h1 id="fixed图片应用"><a href="#fixed图片应用" class="headerlink" title="fixed图片应用"></a>fixed图片应用</h1><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>    body {<br>      margin: 0;<br>    }<br><br><span class="css">    <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:not(</span><span class="hljs-selector-attr">[class]</span>) {</span><br>      height: 50vh;<br>      background-color: white;<br>    }<br><br><span class="css">    <span class="hljs-selector-class">.a</span>,</span><br><span class="css">    <span class="hljs-selector-class">.b</span>,</span><br><span class="css">    <span class="hljs-selector-class">.c</span> {</span><br>      height: 100vh;<br>      -webkit-background-size: ;<br>      background-size: cover;<br>      background-attachment: fixed;<br>      background-position: center;<br>    }<br><br><span class="css">    <span class="hljs-selector-class">.a</span> {</span><br><span class="css">      <span class="hljs-selector-tag">background-image</span>: <span class="hljs-selector-tag">url</span>(<span class="hljs-selector-tag">http</span>://<span class="hljs-selector-tag">img2</span>.1<span class="hljs-selector-tag">sucai</span><span class="hljs-selector-class">.com</span>/190807/330812<span class="hljs-selector-tag">-1ZPH3594356</span><span class="hljs-selector-class">.jpg</span>);</span><br>    }<br><br><span class="css">    <span class="hljs-selector-class">.b</span> {</span><br><span class="css">      <span class="hljs-selector-tag">background-image</span>: <span class="hljs-selector-tag">url</span>(<span class="hljs-selector-tag">https</span>://<span class="hljs-selector-tag">www</span><span class="hljs-selector-class">.lei168</span><span class="hljs-selector-class">.com</span>/<span class="hljs-selector-tag">attachment</span>/<span class="hljs-selector-tag">editor</span>/201708/1501832154<span class="hljs-selector-tag">entsk</span><span class="hljs-selector-class">.jpg</span>);</span><br>    }<br><br><span class="css">    <span class="hljs-selector-class">.c</span> {</span><br><span class="css">      <span class="hljs-selector-tag">background-image</span>: <span class="hljs-selector-tag">url</span>(<span class="hljs-selector-tag">https</span>://<span class="hljs-selector-tag">pic3</span><span class="hljs-selector-class">.zhimg</span><span class="hljs-selector-class">.com</span>/80/<span class="hljs-selector-tag">v2-6d436bfd5d2ae80a0def6f86e4c7c55e_1440w</span><span class="hljs-selector-class">.jpg</span>);</span><br>    }<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"a"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>介绍文字<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"b"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>介绍文字<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"c"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>介绍文字<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><h1 id="sticky列表分组"><a href="#sticky列表分组" class="headerlink" title="sticky列表分组"></a>sticky列表分组</h1><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>    * {<br>      background-color: rgba(0, 0, 0, 0.1);<br>      box-shadow: 0 0 1px cornflowerblue;<br>    }<br><br>    ul {<br>      margin: 0;<br>    }<br><br>    h1 {<br>      position: sticky;<br>      top: 0;<br>      margin: 0;<br>    }<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"group"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>分组1<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>好友01<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>好友02<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>好友03<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>好友04<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>好友05<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>好友06<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>好友07<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>好友08<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>好友09<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>好友10<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"group"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>分组2<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>好友01<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>好友02<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>好友03<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>好友04<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>好友05<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>好友06<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>好友07<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>好友08<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>好友09<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>好友10<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"group"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>分组3<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>好友01<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>好友02<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>好友03<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>好友04<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>好友05<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>好友06<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>好友07<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>好友08<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>好友09<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>好友10<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"group"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>分组4<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>好友01<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>好友02<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>好友03<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>好友04<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>好友05<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>好友06<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>好友07<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>好友08<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>好友09<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>好友10<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"group"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>分组5<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>好友01<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>好友02<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>好友03<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>好友04<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>好友05<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>好友06<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>好友07<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>好友08<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>好友09<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>好友10<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><h1 id="clip-path应用"><a href="#clip-path应用" class="headerlink" title="clip-path应用"></a>clip-path应用</h1><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>    * {<br>      background-color: rgba(0, 0, 0, 0.1);<br>      box-shadow: 0 0 1px red;<br>    }<br><br>    ul {<br>      padding: 0;<br>      margin: 0;<br>    }<br><br>    body {<br>      margin: 0;<br>    }<br><br>    section {<br>      height: 300px;<br>      position: relative;<br>    }<br><br>    div {<br>      border: 1px solid blue;<br>      position: absolute;<br>      height: 100%;<br>      width: 100%;<br>      xclip: rect(auto, auto, auto, auto);<br>      clip-path: border-box;<br>    }<br><br>    ul {<br>      position: fixed;<br>      right: 0;<br>      margin: auto;<br>      top: 0;<br>      bottom: 0;<br>      height: 110px;<br>      list-style-type: none;<br>    }<br><br><span class="css">    <span class="hljs-selector-tag">section</span><span class="hljs-selector-pseudo">:nth-child(1)</span> <span class="hljs-selector-tag">ul</span> {</span><br>      color: red;<br>    }<br><br><span class="css">    <span class="hljs-selector-tag">section</span><span class="hljs-selector-pseudo">:nth-child(2)</span> <span class="hljs-selector-tag">ul</span> {</span><br>      color: lime;<br>    }<br><br><span class="css">    <span class="hljs-selector-tag">section</span><span class="hljs-selector-pseudo">:nth-child(3)</span> <span class="hljs-selector-tag">ul</span> {</span><br>      color: tan;<br>    }<br><br><span class="css">    <span class="hljs-selector-tag">section</span><span class="hljs-selector-pseudo">:nth-child(4)</span> <span class="hljs-selector-tag">ul</span> {</span><br>      color: violet;<br>    }<br><br><span class="css">    <span class="hljs-selector-tag">section</span><span class="hljs-selector-pseudo">:nth-child(5)</span> <span class="hljs-selector-tag">ul</span> {</span><br>      color: magenta;<br>    }<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>001<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>002<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>003<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>004<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>005<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>006<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>001<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>002<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>003<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>004<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>005<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>006<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>001<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>002<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>003<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>004<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>005<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>006<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>001<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>002<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>003<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>004<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>005<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>006<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>001<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>002<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>003<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>004<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>005<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>006<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><p>重点：<br>ul{margin: auto;top: 0;bottom: 0;}可以将菜单栏垂直居中。</p><h1 id="菜单栏"><a href="#菜单栏" class="headerlink" title="菜单栏"></a>菜单栏</h1><h2 id="竖向菜单栏"><a href="#竖向菜单栏" class="headerlink" title="竖向菜单栏"></a>竖向菜单栏</h2><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>    * {<br>      background-color: rgba(0, 0, 0, 0.1);<br>      box-shadow: 0 0 1px blue;<br>    }<br><br>    ul {<br>      list-style-type: none;<br>      margin: 0;<br>      padding: 0;<br>    }<br><br>    li {<br>      position: relative;<br>      width: 100px;<br>    }<br><br>    ul ul {<br>      position: absolute;<br>      top: 0;<br>      left: 100%;<br>      display: none;<br>    }<br><br><span class="css">    <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:hover</span> {</span><br>      background-color: cornflowerblue;<br>    }<br><br><span class="css">    <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:hover</span>&gt;<span class="hljs-selector-tag">ul</span> {</span><br>      display: block;<br>    }<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>      文件<br>      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>新建文件<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>新建窗口<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>保存<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>首选项<br>          <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>设置<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>联机服务设置<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>扩展<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>      查看<br>      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>命令面板<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>打开视窗<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>外观<br>          <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>全屏<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>居中布局<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>编辑器布局<br>          <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>向上拆分<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>单列<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>双列<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>      转到<br>      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>切换编辑器<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>切换组<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>      运行<br>      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>启动调试<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>打开视窗<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>切换断点 <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>新建断点<br>          <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>条件断点<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>内联断点<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>函数断点<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>记录点<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><p>重点：<br><code>ul ul{display: none;}</code>和<code>li:hover&gt;ul{display: block;}</code>。前者将二级及以后菜单隐藏，而后者在hover菜单时将它的对应的后一级菜单栏显示出来。<br><code>li{position: relative;}</code>和<code>ul ul{position: absolute; top: 0; left:100%;</code> 。可以使二级及以后菜单相对前一级菜单定位，并且设置位置为最上面与前一级菜单相同高度，右移前一个菜单的距离。</p><h2 id="横向菜单栏"><a href="#横向菜单栏" class="headerlink" title="横向菜单栏"></a>横向菜单栏</h2><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>    * {<br>      background-color: rgba(0, 0, 0, 0.1);<br>      box-shadow: 0 0 1px plum;<br>    }<br><br>    ul {<br>      list-style-type: none;<br>      margin: 0;<br>      padding: 0;<br>      font-size: 0;<br>    }<br><br>    li ul {<br>      display: none;<br>    }<br><br><span class="css">    <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:hover</span>&gt;<span class="hljs-selector-tag">ul</span> {</span><br>      display: block;<br>    }<br><br><span class="css">    <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:hover</span> {</span><br>      background-color: cornflowerblue;<br>    }<br><br>    ul ul {<br>      position: absolute;<br>      left: 0;<br>      top: 100%;<br>    }<br><br>    ul ul ul {<br>      top: 0%;<br>      left: 100%;<br>    }<br><br>    li {<br>      white-space: nowrap;<br>      position: relative;<br>      font-size: 16px;<br>      padding: 2px 8px;<br>      display: inline-block;<br>    }<br><br>    li li {<br>      display: block;<br>    }<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>      文件<br>      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>新建文件<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>新建窗口<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>保存<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>首选项<br>          <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>设置<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>联机服务设置<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>扩展<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>      查看<br>      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>命令面板<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>打开视窗<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>外观<br>          <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>全屏<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>居中布局<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>编辑器布局<br>          <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>向上拆分<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>单列<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>双列<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>      转到<br>      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>切换编辑器<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>切换组<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>      运行<br>      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>启动调试<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>打开视窗<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>切换断点 <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>新建断点<br>          <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>条件断点<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>内联断点<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>函数断点<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>记录点<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><p>重点：<br><code>li{display: inline-block;}</code>，<code>li li{display: block;}</code>。使所有li变成行内块，从而横向排布。以及二级及以后菜单变回块状元素。<br>重新定位二级及以后菜单<code>ul ul</code>和三级及以后菜单<code>ul ul ul</code>。<br><code>ul{font-size: 0;}</code>，<code>li{font-size: 16px;}</code>。使元素之间没有空格。</p><h1 id="图片选择缓动"><a href="#图片选择缓动" class="headerlink" title="图片选择缓动"></a>图片选择缓动</h1><h2 id="滑动缓动"><a href="#滑动缓动" class="headerlink" title="滑动缓动"></a>滑动缓动</h2><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>    div {<br>      border: 5px solid cornflowerblue;<br>      width: 300px;<br>      height: 200px;<br>      position: relative;<br>      overflow: hidden;<br>    }<br><br>    img {<br>      width: 100%;<br>      height: 100%;<br>      position: absolute;<br>      left: 100%;<br><span class="css">      <span class="hljs-comment">/* transition: 1s; */</span></span><br>    }<br><br><span class="css">    <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:nth-child(1)</span><span class="hljs-selector-pseudo">:checked</span>~<span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">img</span><span class="hljs-selector-pseudo">:nth-child(1)</span>,</span><br><span class="css">    <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:nth-child(2)</span><span class="hljs-selector-pseudo">:checked</span>~<span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">img</span><span class="hljs-selector-pseudo">:nth-child(2)</span>,</span><br><span class="css">    <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:nth-child(3)</span><span class="hljs-selector-pseudo">:checked</span>~<span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">img</span><span class="hljs-selector-pseudo">:nth-child(3)</span>,</span><br><span class="css">    <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:nth-child(4)</span><span class="hljs-selector-pseudo">:checked</span>~<span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">img</span><span class="hljs-selector-pseudo">:nth-child(4)</span>,</span><br><span class="css">    <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:nth-child(5)</span><span class="hljs-selector-pseudo">:checked</span>~<span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">img</span><span class="hljs-selector-pseudo">:nth-child(5)</span> {</span><br>      display: block;<br>      left: 0;<br>      z-index: 10;<br>    }<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"radio"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"slides"</span> <span class="hljs-attr">checked</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"radio"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"slides"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"radio"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"slides"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"radio"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"slides"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"radio"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"slides"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://img1.gtimg.com/dajia/pics/hv1/12/79/2245/146001282.jpg"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">""</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://www.zhifure.com/upload/images/2018/7/5141455828.jpg"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">""</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"http://s.news.bandao.cn/news_upload/201603/20160302092648_J3MUHKOQ.jpg"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">""</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://images.shobserver.com/news/690_390/2018/5/26/09fae5d0-9e46-48aa-a519-84e6a7a0c0ce.jpg"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">""</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://www.zhifure.com/upload/images/2018/6/27121831935.jpg"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">""</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><p>重点：<br>灵活运用选择器将radio和图片关联起来。<br><code>img{left: 100%;}</code>和<code>...{left: 0;}</code>。将图片都放在边框的右边，触发按钮时才出现，并在transition中显示滑动效果。<br><code>...{z-index: 10;}</code>。可以使图片滑动时是一直向左的效果，若不加，往前面选择图片时是从下层滑出。</p><h2 id="水平滑动"><a href="#水平滑动" class="headerlink" title="水平滑动"></a>水平滑动</h2><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>    * {<br>      background-color: rgba(0, 0, 0, 0.1);<br>      box-shadow: 0 0 1px red;<br>    }<br><br>    div {<br>      width: 200px;<br>      height: 150px;<br>      border: 3px solid red;<br>      position: relative;<br>    }<br><br>    ul {<br>      width: 9999px;<br>      padding: 0;<br>      margin: 0;<br>      height: 100%;<br>      position: absolute;<br>      transition: 1s;<br>    }<br><br>    ul li {<br>      display: inline-block;<br>      height: 100%;<br>      width: 200px;<br>    }<br><br><span class="css">    <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:nth-child(1)</span><span class="hljs-selector-pseudo">:checked</span>~<span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">ul</span> {</span><br>      left: 0;<br>    }<br><br><span class="css">    <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:nth-child(2)</span><span class="hljs-selector-pseudo">:checked</span>~<span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">ul</span> {</span><br>      left: -100%;<br>    }<br><br><span class="css">    <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:nth-child(3)</span><span class="hljs-selector-pseudo">:checked</span>~<span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">ul</span> {</span><br>      left: -200%;<br>    }<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"radio"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"s1"</span> <span class="hljs-attr">checked</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"radio"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"s1"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"radio"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"s1"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>aaaaaaaaa<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>bbbbbbbbbb<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>cccccc<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><p>重点：<br><code>ul {width: 9999px;}</code>。将宽度设置为很大，以便所有照片都能在横向排列。<br><code>input:nth-child(1):checked~div ul {left: 0;} input:nth-child(2):checked~div ul {left: -100%;} input:nth-child(3):checked~div ul {left: -200%;}</code>。因为所有图片都是横向排列，所以选中时会根据位置向左移动几个图片框的距离。</p><h2 id="轮播图"><a href="#轮播图" class="headerlink" title="轮播图"></a>轮播图</h2><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>    ul {<br>      list-style-type: none;<br>      padding: 0;<br>      margin: 0;<br>    }<br><br>    section {<br>      width: 300px;<br>      height: 200px;<br>      border: 3px solid;<br>      position: relative;<br>    }<br><br>    section&gt;input {<br>      display: none;<br>    }<br><br>    section ul {<br>      width: 100%;<br>      height: 100%;<br>      position: relative;<br>    }<br><br>    section ul li {<br>      position: absolute;<br>      top: 0;<br>      left: 0;<br>      width: 100%;<br>      height: 100%;<br>      opacity: 0;<br>      transition: .6s;<br>    }<br><br>    section ul li img {<br>      display: block;<br>      width: 100%;<br>      height: 100%;<br>    }<br><br>    section ul li label {<br>      background-color: rgb(0, 0, 0, 0.5);<br>      cursor: pointer;<br>      width: 25px;<br>      text-align: center;<br>      line-height: 50px;<br>      height: 50px;<br>      margin: auto;<br>      top: 0;<br>      bottom: 0;<br>      position: absolute;<br>    }<br><br><span class="css">    <span class="hljs-selector-tag">section</span> <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">label</span><span class="hljs-selector-pseudo">:hover</span> {</span><br>      background-color: gold;<br>    }<br><br><span class="css">    <span class="hljs-selector-tag">section</span> <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">label</span><span class="hljs-selector-pseudo">:nth-last-child(2)</span> {</span><br>      left: 0;<br>    }<br><br><span class="css">    <span class="hljs-selector-tag">section</span> <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">label</span><span class="hljs-selector-pseudo">:nth-last-child(1)</span> {</span><br>      right: 0;<br>    }<br><br><br><span class="css">    <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:nth-child(1)</span><span class="hljs-selector-pseudo">:checked</span>~<span class="hljs-selector-tag">ul</span><span class="hljs-selector-class">.slides</span>&gt;<span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child(1)</span>,</span><br><span class="css">    <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:nth-child(2)</span><span class="hljs-selector-pseudo">:checked</span>~<span class="hljs-selector-tag">ul</span><span class="hljs-selector-class">.slides</span>&gt;<span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child(2)</span>,</span><br><span class="css">    <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:nth-child(3)</span><span class="hljs-selector-pseudo">:checked</span>~<span class="hljs-selector-tag">ul</span><span class="hljs-selector-class">.slides</span>&gt;<span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child(3)</span>,</span><br><span class="css">    <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:nth-child(4)</span><span class="hljs-selector-pseudo">:checked</span>~<span class="hljs-selector-tag">ul</span><span class="hljs-selector-class">.slides</span>&gt;<span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child(4)</span>,</span><br><span class="css">    <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:nth-child(5)</span><span class="hljs-selector-pseudo">:checked</span>~<span class="hljs-selector-tag">ul</span><span class="hljs-selector-class">.slides</span>&gt;<span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child(5)</span> {</span><br>      opacity: 1;<br>      z-index: 8;<br>    }<br><br><span class="css">    <span class="hljs-selector-tag">section</span> <span class="hljs-selector-class">.indicators-wrapper</span> {</span><br>      width: 100%;<br>      bottom: 0;<br>      height: 30px;<br>      position: absolute;<br>      z-index: 30;<br>      text-align: center;<br>    }<br><br><span class="css">    <span class="hljs-selector-tag">section</span> <span class="hljs-selector-class">.indicators</span> {</span><br>      display: inline-block;<br>      background-color: white;<br>      border-radius: 25px;<br>    }<br><br><span class="css">    <span class="hljs-selector-tag">section</span> <span class="hljs-selector-class">.indicators</span> <span class="hljs-selector-tag">label</span> {</span><br>      width: 10px;<br>      height: 10px;<br>      border-radius: 5px;<br>      display: inline-block;<br>      background-color: red;<br>      margin-left: 3px;<br>      margin-right: 3px;<br>      cursor: pointer;<br>    }<br><br><span class="css">    <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:nth-child(1)</span><span class="hljs-selector-pseudo">:checked</span>~<span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.indicators-wrapper</span> <span class="hljs-selector-tag">label</span><span class="hljs-selector-pseudo">:nth-child(1)</span>,</span><br><span class="css">    <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:nth-child(2)</span><span class="hljs-selector-pseudo">:checked</span>~<span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.indicators-wrapper</span> <span class="hljs-selector-tag">label</span><span class="hljs-selector-pseudo">:nth-child(2)</span>,</span><br><span class="css">    <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:nth-child(3)</span><span class="hljs-selector-pseudo">:checked</span>~<span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.indicators-wrapper</span> <span class="hljs-selector-tag">label</span><span class="hljs-selector-pseudo">:nth-child(3)</span>,</span><br><span class="css">    <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:nth-child(4)</span><span class="hljs-selector-pseudo">:checked</span>~<span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.indicators-wrapper</span> <span class="hljs-selector-tag">label</span><span class="hljs-selector-pseudo">:nth-child(4)</span>,</span><br><span class="css">    <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:nth-child(5)</span><span class="hljs-selector-pseudo">:checked</span>~<span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.indicators-wrapper</span> <span class="hljs-selector-tag">label</span><span class="hljs-selector-pseudo">:nth-child(5)</span> {</span><br>      background-color: blue;<br>    }<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"radio"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"pic"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"p1"</span> <span class="hljs-attr">checked</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"radio"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"pic"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"p2"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"radio"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"pic"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"p3"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"radio"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"pic"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"p4"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"radio"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"pic"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"p5"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"slides"</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://img1.gtimg.com/dajia/pics/hv1/12/79/2245/146001282.jpg"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">""</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"p5"</span>&gt;</span><span class="hljs-symbol">&amp;lt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"p2"</span>&gt;</span><span class="hljs-symbol">&amp;gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://www.zhifure.com/upload/images/2018/7/5141455828.jpg"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">""</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"p1"</span>&gt;</span><span class="hljs-symbol">&amp;lt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"p3"</span>&gt;</span><span class="hljs-symbol">&amp;gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"http://s.news.bandao.cn/news_upload/201603/20160302092648_J3MUHKOQ.jpg"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">""</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"p2"</span>&gt;</span><span class="hljs-symbol">&amp;lt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"p4"</span>&gt;</span><span class="hljs-symbol">&amp;gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span>&lt;img<br>            src="https://images.shobserver.com/news/690_390/2018/5/26/09fae5d0-9e46-48aa-a519-84e6a7a0c0ce.jpg"<br>            alt=""&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"p3"</span>&gt;</span><span class="hljs-symbol">&amp;lt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"p5"</span>&gt;</span><span class="hljs-symbol">&amp;gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://www.zhifure.com/upload/images/2018/6/27121831935.jpg"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">""</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"p4"</span>&gt;</span><span class="hljs-symbol">&amp;lt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"p1"</span>&gt;</span><span class="hljs-symbol">&amp;gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"indicators-wrapper"</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"indicators"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"p1"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"p2"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"p3"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"p4"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"p5"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><h1 id="三栏等高自适应"><a href="#三栏等高自适应" class="headerlink" title="三栏等高自适应"></a>三栏等高自适应</h1><h2 id="table"><a href="#table" class="headerlink" title="table"></a>table</h2><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>    section {<br>      display: table;<br>    }<br><br>    aside,<br>    main,<br>    div {<br>      display: table-cell;<br>    }<br><br>    aside {<br>      width: 100px;<br>      background-color: tomato;<br>    }<br><br>    div {<br>      width: 120px;<br>      background-color: rosybrown;<br>    }<br><br>    main {<br>      background-color: cornflowerblue;<br>    }<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aside</span>&gt;</span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Reprehenderit aliquam sit, culpa dolore iste asperiores<span class="hljs-tag">&lt;/<span class="hljs-name">aside</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Vitae, harum, qui corrupti impedit nihil, laudantium unde dicta eligendi nemo sed suscipit ea! Itaque nam, deleniti sunt expedita magnam unde quidem.<span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Delectus vero modi<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><h2 id="float"><a href="#float" class="headerlink" title="float"></a>float</h2><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width "</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>    section {<br>      overflow: hidden;<br>    }<br><br>    aside {<br>      float: left;<br>      width: 100px;<br>      background-color: tomato;<br>    }<br><br>    div {<br>      float: right;<br>      width: 120px;<br>      background-color: red;<br>    }<br><br>    main {<br>      overflow: hidden;<br>      background-color: cornflowerblue;<br>    }<br><br>    aside,<br>    div,<br>    main {<br>      padding-bottom: 333310px;<br>      margin-bottom: -333310px;<br>    }<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aside</span>&gt;</span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Reprehenderit aliquam sit, culpa dolore iste asperiores<span class="hljs-tag">&lt;/<span class="hljs-name">aside</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Vitae, harum, qui corrupti impedit nihil, laudantium unde dicta eligendi nemo sed suscipit ea! Itaque nam, deleniti sunt expedita magnam unde quidem.<span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Delectus vero modi<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><h2 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h2><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>    section {<br>      display: flex;<br>    }<br><br>    aside {<br>      width: 100px;<br>      background-color: tomato;<br>    }<br><br>    div {<br>      width: 120px;<br>      background-color: rosybrown;<br>    }<br><br>    main {<br>      background-color: cornflowerblue;<br>    }<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aside</span>&gt;</span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Reprehenderit aliquam sit, culpa dolore iste asperiores<span class="hljs-tag">&lt;/<span class="hljs-name">aside</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Vitae, harum, qui corrupti impedit nihil, laudantium unde dicta eligendi nemo sed suscipit ea! Itaque nam, deleniti sunt expedita magnam unde quidem.<span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Delectus vero modi<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><h1 id="icon-font应用"><a href="#icon-font应用" class="headerlink" title="icon-font应用"></a>icon-font应用</h1><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>    * {<br>      background-color: rgba(0, 0, 0, 0.1);<br>      box-shadow: 0 0 1px blue;<br>    }<br><br><span class="css">    <span class="hljs-keyword">@font-face</span> {</span><br>      font-family: FontAwesome;<br><span class="css">      <span class="hljs-selector-tag">src</span>: <span class="hljs-selector-tag">url</span>(<span class="hljs-selector-tag">fontawesome-webfont</span><span class="hljs-selector-class">.woff2</span>);</span><br>    }<br><br>    section {<br>      display: flex;<br>      flex-direction: row-reverse;<br>      justify-content: flex-end;<br>    }<br><br><span class="css">    <span class="hljs-selector-class">.star</span> {</span><br>      font-family: FontAwesome;<br>      font-size: 30px;<br>    }<br><br><span class="css">    <span class="hljs-selector-class">.star</span><span class="hljs-selector-pseudo">::before</span> {</span><br>      content: "\f006";<br>      padding-right: 5px;<br>    }<br><br><span class="css">    <span class="hljs-selector-class">.star</span><span class="hljs-selector-pseudo">:hover</span><span class="hljs-selector-pseudo">::before</span>,</span><br><span class="css">    <span class="hljs-selector-class">.star</span><span class="hljs-selector-pseudo">:hover</span>~<span class="hljs-selector-tag">span</span><span class="hljs-selector-pseudo">:before</span> {</span><br>      content: "\f005";<br>    }<br><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"star"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"star"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"star"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"star"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"star"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><h1 id="flex外框自适应包裹"><a href="#flex外框自适应包裹" class="headerlink" title="flex外框自适应包裹"></a>flex外框自适应包裹</h1><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>    ul {<br>      list-style: none;<br>      padding: 0;<br>      float: left;<br>      display: flex;<br>      flex-flow: column wrap;<br>      align-content: flex-start;<br>      height: 300px;<br>    }<br><br>    ul li {<br>      height: 60px;<br>      width: 200px;<br>      background-color: cornflowerblue;<br>    }<br><br><span class="css">    <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:last-child</span> {</span><br>      flex-grow: 1;<br>    }<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>6<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>7<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>9<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>10<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>11<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>12<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><h1 id="保持比例和大小的卡片阵列"><a href="#保持比例和大小的卡片阵列" class="headerlink" title="保持比例和大小的卡片阵列"></a>保持比例和大小的卡片阵列</h1><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>    * {<br>      background-color: rgba(0, 0, 0, 0.08);<br>      box-shadow: inset 0 0 1px red;<br>    }<br><br>    section {<br>      display: flex;<br>      flex-flow: wrap;<br>    }<br><br>    div {<br>      flex-grow: 1;<br>      width: 200px;<br>      xheight: 100px;<br>      xfloat: left;<br><br>    }<br><br><span class="css">    <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">::after</span> {</span><br>      content: '';<br>      display: block;<br>      padding-bottom: 100%;<br>    }<br><br><span class="css">    <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-last-child(-n</span> + 8) {</span><br>      height: 0px;<br>    }<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><p>重点：</p><ol><li>等比例<br>当 padding 为百分比时，padding-top 和 padding-bottom 的计算是根据该元素的 width 决定的。所以若元素的宽度是 100px，padding-top 为 100%，padding-top 就是 100px。<br>同样，如果需要 16:9 的比例，只需将 padding-bottom 设成 56.25%（9 / 16 = 0.5625）即可。</li><li>最后一行<br><code>flex-grow: 1;</code>会导致最后一行的大小变化，直接把最后一行的几个元素变成高度为0。</li></ol><h1 id="hover应用"><a href="#hover应用" class="headerlink" title="hover应用"></a>hover应用</h1><h2 id="hover后颜色保持"><a href="#hover后颜色保持" class="headerlink" title="hover后颜色保持"></a>hover后颜色保持</h2><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>    * {<br>      background-color: rgba(0, 0, 0, 0.1);<br>      box-shadow: 0 0 1px blue;<br>    }<br><br><span class="css">    <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-tag">span</span> {</span><br>      color: black;<br>      transition: none;<br>    }<br><br><span class="css">    <span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">span</span><span class="hljs-selector-pseudo">:hover</span> {</span><br>      color: red;<br>      transition: none;<br>    }<br><br>    span {<br>      float: left;<br>      transition: color 0s 99999s;<br>    }<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Lorem.<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Rem?<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Qui.<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Provident.<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><h2 id="hover切换选项卡"><a href="#hover切换选项卡" class="headerlink" title="hover切换选项卡"></a>hover切换选项卡</h2><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>    * {<br>      background-color: rgba(0, 0, 0, 0.08);<br>      box-shadow: inset 0 0 1px cornflowerblue;<br>    }<br><br><span class="css">    <span class="hljs-selector-class">.foo</span> {</span><br>      float: right;<br>      display: flex;<br>      position: relative;<br>      justify-content: flex-end;<br>    }<br><br>    span {<br>      height: 40px;<br>      color: rosybrown;<br>      display: inline-block;<br>      line-height: 40px;<br>      transition: color 0s 999999s;<br>    }<br><br><span class="css">    <span class="hljs-comment">/* 默认选中第一个选项卡 */</span></span><br><span class="css">    <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.foo</span> <span class="hljs-selector-tag">span</span><span class="hljs-selector-pseudo">:first-child</span> {</span><br>      color: cornflowerblue;<br>    }<br><br><span class="css">    <span class="hljs-comment">/* hover到了span所有选项卡恢复颜色，选中了某个选项卡就会变色，由于优先级相同，后一个选择器生效。 */</span></span><br><span class="css">    <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.foo</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-tag">span</span> {</span><br>      color: rosybrown;<br>      transition: none;<br>    }<br><br><span class="css">    <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.foo</span> <span class="hljs-selector-tag">span</span><span class="hljs-selector-pseudo">:hover</span> {</span><br>      color: cornflowerblue;<br>      transition: none;<br>    }<br><br><span class="css">    <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.foo</span> <span class="hljs-selector-tag">div</span> {</span><br>      visibility: hidden;<br>      position: absolute;<br>      right: 0;<br>      top: 100%;<br>      width: 100%;<br>      height: 300px;<br><span class="css">      <span class="hljs-comment">/* 使可见性延迟很长时间才消失，即选中某个选项卡后保持状态 */</span></span><br>      transition: visibility 0s 99999s;<br>    }<br><br><span class="css">    <span class="hljs-comment">/* 默认显示第一个选项卡内容 */</span></span><br><span class="css">    <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.foo</span> <span class="hljs-selector-tag">span</span><span class="hljs-selector-pseudo">:first-child</span>&gt;<span class="hljs-selector-tag">div</span> {</span><br>      visibility: visible;<br>    }<br><br><span class="css">    <span class="hljs-comment">/* hover到整个元素块任何地方都会隐藏选项卡内容，但hover到特定的span就会显示其选项卡内容，优先级和上面类似。 */</span></span><br><span class="css">    <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.foo</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-tag">span</span> <span class="hljs-selector-tag">div</span> {</span><br>      visibility: hidden;<br>      transition: none;<br>    }<br><br><span class="css">    <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.foo</span> <span class="hljs-selector-tag">span</span><span class="hljs-selector-pseudo">:hover</span>&gt;<span class="hljs-selector-tag">div</span> {</span><br>      visibility: visible;<br>      transition: none;<br>    }<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"foo"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Lorem.<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>content111<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Fugit!<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>content222<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Eaque.<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>content333<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><h1 id="footer实现"><a href="#footer实现" class="headerlink" title="footer实现"></a>footer实现</h1><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 实现当页面内容很少时，页面的footer处于视口的底部；当页面内容较多时（多于视口大小），footer显示在页面的尾部 --&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>    html {<br>      height: 100%;<br>    }<br><br>    p {<br>      margin: 0;<br>    }<br><br>    body {<br>      display: flow-root;<br>      min-height: 100%;<br>      position: relative;<br>      margin: 0;<br>      box-sizing: border-box;<br>      padding-bottom: 25px;<br>    }<br><br>    footer {<br>      width: 100%;<br>      position: absolute;<br>      bottom: 0;<br>    }<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Ut, explicabo.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span>Lorem ipsum dolor sit.<span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>    html {<br>      height: 100%;<br>    }<br><br>    p {<br>      margin: 0;<br>      margin-bottom: auto;<br>    }<br><br>    body {<br>      display: flex;<br>      flex-direction: column;<br>      min-height: 100%;<br>      position: relative;<br>      margin: 0;<br>      box-sizing: border-box;<br>    }<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Ut, explicabo.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span>Lorem ipsum dolor sit.<span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><h1 id="animation应用"><a href="#animation应用" class="headerlink" title="animation应用"></a>animation应用</h1><p>元素公转但不自转</p><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>    * {<br>      box-shadow: 0 0 1px plum;<br>      background-color: rgba(0, 0, 0, 0.1);<br>    }<br><br><span class="css">    <span class="hljs-keyword">@keyframes</span> ro {</span><br>      to {<br>        transform: rotate(360deg);<br>      }<br>    }<br><br><span class="css">    <span class="hljs-comment">/* 公转 */</span></span><br>    div {<br>      margin-top: 100px;<br>      width: 200px;<br>      animation: ro 5s linear infinite;<br>    }<br><br><span class="css">    <span class="hljs-comment">/* 公转不自转 */</span></span><br>    span {<br>      display: inline-block;<br>      animation: ro 5s linear reverse infinite;<br>    }<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>    * {<br>      box-shadow: 0 0 1px plum;<br>      background-color: rgba(0, 0, 0, 0.1);<br>    }<br><br><span class="css">    <span class="hljs-keyword">@keyframes</span> ro2 {</span><br>      from {<br>        transform: rotate(0deg) translateX(150px) rotate(0deg)<br>      }<br><br>      to {<br>        transform: rotate(360deg) translateX(150px) rotate(-360deg)<br>      }<br>    }<br><br>    section {<br>      width: 50px;<br>      height: 50px;<br>      margin: auto;<br>      margin-top: 200px;<br>      transition: 1s;<br>      animation: ro2 5s linear infinite;<br>    }<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css">    <span class="hljs-keyword">@keyframes</span> sin {</span><br>      from {<br>        margin-left: 0;<br>      }<br><br>      to {<br>        margin-left: 200px;<br>      }<br>    }<br><br><span class="css">    <span class="hljs-keyword">@keyframes</span> cos {</span><br>      from {<br>        margin-top: 0;<br>      }<br><br>      to {<br>        margin-top: 200px;<br>      }<br>    }<br>    <br><span class="css">    <span class="hljs-comment">/* https://cubic-bezier.com/  贝塞尔曲线模拟 */</span></span><br>    strong {<br>      display: inline-block;<br>      animation: sin 3s cubic-bezier(.36, 0, .64, 1) alternate infinite, cos 3s -1.5s cubic-bezier(.36, 0, .64, 1) alternate infinite;<br>    }<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>TA<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><h1 id="几行代码"><a href="#几行代码" class="headerlink" title="几行代码"></a>几行代码</h1><h2 id="有没有滚动条都居中显示"><a href="#有没有滚动条都居中显示" class="headerlink" title="有没有滚动条都居中显示"></a>有没有滚动条都居中显示</h2><figure class="highlight css"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span>{<br>  <span class="hljs-attribute">padding-left</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">100vw</span> - <span class="hljs-number">100%</span>);<br>}<br></code></pre></div></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>web前端学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>front-end</tag>
      
      <tag>HTML</tag>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web前端学习笔记2.5——CSS画图</title>
    <link href="/posts/32c066a8.html"/>
    <url>/posts/32c066a8.html</url>
    
    <content type="html"><![CDATA[<p>用CSS画出图形</p><h1 id="矩形"><a href="#矩形" class="headerlink" title="矩形"></a>矩形</h1><style>#rectangle {  width: 200px;  height: 100px;  background: teal;    }</style>  <div id="rectangle"></div><br><figure class="highlight css"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-id">#rectangle</span> {<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">background</span>: teal;<br>} <br></code></pre></div></td></tr></tbody></table></figure><h1 id="三角形"><a href="#三角形" class="headerlink" title="三角形"></a>三角形</h1><h2 id="等腰三角形"><a href="#等腰三角形" class="headerlink" title="等腰三角形"></a>等腰三角形</h2><ol><li>上三角<style>#triangle-up {width: 0;height: 0;border-left: 50px solid transparent;border-right: 50px solid transparent;border-bottom: 100px solid teal;}</style><div id="triangle-up"></div><br></li></ol><figure class="highlight css"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-id">#triangle-up</span> {<br>   <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;<br>   <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br>   <span class="hljs-comment">/*  三角形的高度  */</span><br>   <span class="hljs-attribute">border-left</span>: <span class="hljs-number">50px</span> solid transparent;<br>   <span class="hljs-attribute">border-right</span>: <span class="hljs-number">50px</span> solid transparent;<br>   <span class="hljs-comment">/*  三角形的底长  */</span><br>   <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">100px</span> solid teal;<br>}<br></code></pre></div></td></tr></tbody></table></figure><ol start="2"><li>下三角<style>#triangle-down {width: 0;height: 0;border-left: 50px solid transparent;border-right: 50px solid transparent;border-top: 100px solid teal;}</style><div id="triangle-down"></div><br></li></ol><figure class="highlight css"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-id">#triangle-down</span> {<br>   <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;<br>   <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br>   <span class="hljs-attribute">border-left</span>: <span class="hljs-number">50px</span> solid transparent;<br>   <span class="hljs-attribute">border-right</span>: <span class="hljs-number">50px</span> solid transparent;<br>   <span class="hljs-attribute">border-top</span>: <span class="hljs-number">100px</span> solid teal;<br>}<br></code></pre></div></td></tr></tbody></table></figure><ol start="3"><li>左三角<style>#triangle-left {width: 0;height: 0;border-top: 50px solid transparent;border-bottom: 50px solid transparent;border-right: 100px solid teal;}</style><div id="triangle-left"></div><br></li></ol><figure class="highlight css"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-id">#triangle-left</span> {<br>   <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;<br>   <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br>   <span class="hljs-attribute">border-top</span>: <span class="hljs-number">50px</span> solid transparent;<br>   <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">50px</span> solid transparent;<br>   <span class="hljs-attribute">border-right</span>: <span class="hljs-number">100px</span> solid teal;<br>}<br></code></pre></div></td></tr></tbody></table></figure><ol start="4"><li>右三角<style>#triangle-right {width: 0;height: 0;border-top: 50px solid transparent;border-bottom: 50px solid transparent;border-left: 100px solid teal;}</style><div id="triangle-right"></div><br></li></ol><figure class="highlight css"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-id">#triangle-right</span> {<br>   <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;<br>   <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br>   <span class="hljs-attribute">border-top</span>: <span class="hljs-number">50px</span> solid transparent;<br>   <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">50px</span> solid transparent;<br>   <span class="hljs-attribute">border-left</span>: <span class="hljs-number">100px</span> solid teal;<br>}<br></code></pre></div></td></tr></tbody></table></figure><h2 id="直角三角形"><a href="#直角三角形" class="headerlink" title="直角三角形"></a>直角三角形</h2><ol><li>左上三角<style>#triangle-topleft {width: 0;height: 0;border-top: 120px solid teal;border-right: 100px solid transparent;     }</style><div id="triangle-topleft"></div><br></li></ol><figure class="highlight css"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-id">#triangle-topleft</span> {<br>   <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;<br>   <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br>   <span class="hljs-comment">/*  三角形的高  */</span><br>   <span class="hljs-attribute">border-top</span>: <span class="hljs-number">120px</span> solid teal;<br>   <span class="hljs-comment">/*  三角形的上底  */</span><br>   <span class="hljs-attribute">border-right</span>: <span class="hljs-number">100px</span> solid transparent;     <br>}<br></code></pre></div></td></tr></tbody></table></figure><ol start="2"><li>右上三角<style>#triangle-topright {width: 0;height: 0;border-top: 120px solid teal;border-left: 100px solid transparent;     }</style><div id="triangle-topright"></div><br></li></ol><figure class="highlight css"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-id">#triangle-topright</span> {<br>   <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;<br>   <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br>   <span class="hljs-attribute">border-top</span>: <span class="hljs-number">120px</span> solid teal;<br>   <span class="hljs-attribute">border-left</span>: <span class="hljs-number">100px</span> solid transparent;     <br>}<br></code></pre></div></td></tr></tbody></table></figure><ol start="3"><li>左下三角<style>#triangle-bottomleft {width: 0;height: 0;border-bottom: 120px solid teal;border-right: 100px solid transparent;     }</style><div id="triangle-bottomleft"></div><br></li></ol><figure class="highlight css"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-id">#triangle-bottomleft</span> {<br>   <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;<br>   <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br>   <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">120px</span> solid teal;<br>   <span class="hljs-attribute">border-right</span>: <span class="hljs-number">100px</span> solid transparent;     <br>}<br></code></pre></div></td></tr></tbody></table></figure><ol start="4"><li>右下三角<style>#triangle-bottomright {width: 0;height: 0;border-bottom: 120px solid teal;border-left: 100px solid transparent;     }</style><div id="triangle-bottomright"></div><br></li></ol><figure class="highlight css"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-id">#triangle-bottomright</span> {<br>   <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;<br>   <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br>   <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">120px</span> solid teal;<br>   <span class="hljs-attribute">border-left</span>: <span class="hljs-number">100px</span> solid transparent;     <br>}<br></code></pre></div></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>web前端学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>front-end</tag>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VS Code小技巧</title>
    <link href="/posts/eab54a24.html"/>
    <url>/posts/eab54a24.html</url>
    
    <content type="html"><![CDATA[<h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><table><thead><tr><th align="left">按键</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">Ctrl + D</td><td align="left">选中下一个相同字符</td></tr><tr><td align="left">Ctrl + Shift + L</td><td align="left">选择所有出现的当前选择</td></tr><tr><td align="left">Ctrl + F2</td><td align="left">选择所有出现的当前单词</td></tr><tr><td align="left">Alt + 鼠标点击</td><td align="left">多行光标</td></tr><tr><td align="left">中键下拉</td><td align="left">多行光标</td></tr><tr><td align="left">按住 Ctrl</td><td align="left">对整个单词进行处理</td></tr><tr><td align="left">Alt + ↑/↓</td><td align="left">上/下移动行</td></tr><tr><td align="left">Ctrl + B</td><td align="left">侧边栏显示/隐藏</td></tr><tr><td align="left">Ctrl + L</td><td align="left">选择当前行</td></tr><tr><td align="left">Ctrl + Tab</td><td align="left">切换选项卡</td></tr><tr><td align="left">Ctrl + Shift + PgUp/PgDown</td><td align="left">向左/右移动选项卡</td></tr><tr><td align="left">Ctrl + Shift + P</td><td align="left">打开命令窗口</td></tr></tbody></table><h1 id="Emment"><a href="#Emment" class="headerlink" title="Emment"></a>Emment</h1><p>首先将emmet.triggerExpansionOnTab设置为true，可以按Tab启用Emmet展开缩写。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><table><thead><tr><th align="left">写法</th><th align="left">代表</th></tr></thead><tbody><tr><td align="left">E</td><td align="left">HTML标签。</td></tr><tr><td align="left">E#id</td><td align="left">id属性</td></tr><tr><td align="left">E.class</td><td align="left">class属性</td></tr><tr><td align="left">E[attr=foo]</td><td align="left">某一特定属性</td></tr><tr><td align="left">E{foo}</td><td align="left">标签包含的内容是foo</td></tr><tr><td align="left">E&gt;N</td><td align="left">N是E的子元素</td></tr><tr><td align="left">E+N</td><td align="left">N是E的同级元素</td></tr><tr><td align="left">E^N</td><td align="left">N是E的上级元素</td></tr></tbody></table><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><h3 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h3><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">div             =&gt; <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>、<br>br              =&gt; <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>html:5          =&gt; 生成html5标准的包含body为空基本dom<br>a:mail          =&gt; <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"mailto:"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>a:link          =&gt; <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"http://"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>base            =&gt; <span class="hljs-tag">&lt;<span class="hljs-name">base</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span><br>link            =&gt; <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span><br>script:src      =&gt; <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">""</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>form:get        =&gt; <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">""</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"get"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>label           =&gt; <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">""</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>input           =&gt; <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span>&gt;</span><br>inp             =&gt; <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">""</span> <span class="hljs-attr">id</span>=<span class="hljs-string">""</span>&gt;</span><br>input:password  =&gt; <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">""</span> <span class="hljs-attr">id</span>=<span class="hljs-string">""</span>&gt;</span><br>select          =&gt; <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">""</span> <span class="hljs-attr">id</span>=<span class="hljs-string">""</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>option          =&gt; <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">""</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>bq              =&gt; <span class="hljs-tag">&lt;<span class="hljs-name">blockquote</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">blockquote</span>&gt;</span><br>btn             =&gt; <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>btn:s           =&gt; <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>btn:r           =&gt; <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"reset"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><h3 id="文本操作符"><a href="#文本操作符" class="headerlink" title="文本操作符"></a>文本操作符</h3><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">div{这是一段文本}<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>这是一段文本<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>a{点我}<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span>点我点我<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>  <br></code></pre></div></td></tr></tbody></table></figure><h3 id="属性操作符"><a href="#属性操作符" class="headerlink" title="属性操作符"></a>属性操作符</h3><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">div.abc   =&gt; <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"abc"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 绑定多个类名 --&gt;</span><br>div.a.b.c =&gt; <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"a b c"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>div#id1   =&gt; <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"id1"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 省略写会自动联想补全 --&gt;</span><br>.abcd     =&gt; <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"abcd"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>#id       =&gt; <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"id2"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>table&gt;.row&gt;.col<br>=&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"row"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"col"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 自定义属性使用 [attr1='' attr2=''] --&gt;</span><br>a[href='#' target='_blank']<br>=&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span> <span class="hljs-attr">target</span>=<span class="hljs-string">"_blank"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><h3 id="嵌套操作符"><a href="#嵌套操作符" class="headerlink" title="嵌套操作符"></a>嵌套操作符</h3><ul><li>子级 &gt;<figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">div#id1&gt;ul&gt;li <br>=&gt; <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"id1"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure></li><li>同级 +<figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">div#id1+div.abc<br>=&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"id1"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"abc"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure></li><li>父级 ^<br>用于生成父级元素的同级元素,从这个字符所在位置开始,查找左侧最近的元素的父级元素并生成其兄弟级元素.<figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">div&gt;p.parent&gt;span.child^ul.brother&gt;li<br>=&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"parent"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"child"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"brother"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure></li></ul><h3 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h3><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">ul&gt;li*3<br>=&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><h3 id="自动计数"><a href="#自动计数" class="headerlink" title="自动计数"></a>自动计数</h3><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">ul&gt;li.item${item number:$}*3<br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"item1"</span>&gt;</span>item number:1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"item2"</span>&gt;</span>item number:2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"item3"</span>&gt;</span>item number:3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><p>如果生成两位数则使用两个连续的$$，更多位数以此类推。..<br>使用@修饰符，可以更改编号方向（升序或降序）和基数（例如起始值）。这个操作符在$之后添加。<br>@-表示降序，@+表示升序，默认使用升序。<br>@N可以改变起始值，如果配合升降序使用的话N是放到+-符后。<br><font color="red"><strong>! ! ! 经过测试，发现@-并不能用，目前还不知道原因。</strong></font></p><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">ul&gt;li.item$@-*3<br>=&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"item3"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"item2"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"item1"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>---------------------------<br>ul&gt;li.item$@-10*3<br>=&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"item12"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"item11"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"item10"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><h3 id="包装文本"><a href="#包装文本" class="headerlink" title="包装文本"></a>包装文本</h3><ol><li>选中文本，打开命令窗口（Ctrl + Shife + P），输入ewrap，打开Emmet:使用缩写进行包装(Wrap with Abbreviation)。</li><li>输入缩写字符，按下回车。<figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">第一行<br>第二行<br>第三行<br><span class="hljs-comment">&lt;!-- 輸入div&gt;ul&gt;li*，回车，可以看到 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第一行<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第二行<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第三行<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <br><br>1.第一行<br>2.第二行<br>3.第三行<br><span class="hljs-comment">&lt;!-- 加 |t 可以删除序号 --&gt;</span><br><span class="hljs-comment">&lt;!-- 輸入div&gt;ul&gt;li*|t，回车，可以看到 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第一行<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第二行<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第三行<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span> <br></code></pre></div></td></tr></tbody></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>实用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hotkeys</tag>
      
      <tag>VS Code</tag>
      
      <tag>Emment</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git、ssh等</title>
    <link href="/posts/c34887c6.html"/>
    <url>/posts/c34887c6.html</url>
    
    <content type="html"><![CDATA[<h1 id="设置Path系统变量"><a href="#设置Path系统变量" class="headerlink" title="设置Path系统变量"></a>设置Path系统变量</h1><p>控制面板 - 系统与安全 - 系统 - 高级系统设置 - 环境变量 - 系统变量Path - 编辑 - 添加需要的路径</p><h1 id="Git指令"><a href="#Git指令" class="headerlink" title="Git指令"></a>Git指令</h1><table><thead><tr><th align="center">指令</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">git init</td><td align="center">初始化一个仓库</td></tr><tr><td align="center">git log</td><td align="center">工作日志</td></tr><tr><td align="center">git status</td><td align="center">文件状态</td></tr><tr><td align="center">git diff</td><td align="center">工作区与暂存区的差异</td></tr><tr><td align="center">git diff –cached  [<path>…]</path></td><td align="center">比较暂存区与最新本地版本库（本地库中最近一次commit的内容）</td></tr><tr><td align="center">git add .</td><td align="center">将此文件夹下所有文件添加至暂缓区</td></tr><tr><td align="center">git commit -m “XXX”</td><td align="center">把暂存区的所有修改提交到分支，须输入描述信息</td></tr><tr><td align="center">git commit -a -m “XXX”</td><td align="center">add + commit功能（从未add过的文件不能使用）</td></tr><tr><td align="center">git commot –amend</td><td align="center">更改之前一次commit的描述信息</td></tr><tr><td align="center">git remote add 名称 仓库地址</td><td align="center">添加其它仓库</td></tr><tr><td align="center">git remote –verbose</td><td align="center">显示所有仓库</td></tr><tr><td align="center">git push -u origin master</td><td align="center">推送至默认仓库</td></tr><tr><td align="center">git push gitee master</td><td align="center">推送至其它仓库</td></tr><tr><td align="center">git restore</td><td align="center">将在工作空间但是不在暂存区的文件撤销更改</td></tr><tr><td align="center">git restore –staged</td><td align="center">将文件从暂存区撤出，但不会撤销文件的更改</td></tr><tr><td align="center">git config –global user.name “username”</td><td align="center">设置全局用户名</td></tr><tr><td align="center">git config –global user.email <a href="mailto:you@example.com">you@example.com</a></td><td align="center">设置全局邮箱</td></tr><tr><td align="center">git config –global core.editor XXX</td><td align="center">配置默认编辑器（须先加入系统变量）</td></tr><tr><td align="center">git config –global alias st status</td><td align="center">取别名，例如将status改成st</td></tr></tbody></table><h1 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h1><h2 id="创建一个SSH-key"><a href="#创建一个SSH-key" class="headerlink" title="创建一个SSH key"></a>创建一个SSH key</h2><p><code>ssh-keygen -t rsa -C "your_email@example.com"</code><br>-t 指定密钥类型，默认是 rsa ，可以省略。<br>-C 设置注释文字，比如邮箱。<br>-f 指定密钥文件存储文件名。<br>以上代码省略了 -f 参数，因此，运行上面那条命令后会让你输入一个文件名，用于保存刚才生成的 SSH key 代码。<br>若不输入文件名，则会使用默认文件名，会生成 id_rsa 和 id_rsa.pub 两个秘钥文件。<br>接下来会提示你输入两次密码（该密码是你push文件的时候要输入的密码，而不是github管理者的密码），<br>若不输入密码，直接按回车。那么push的时候就不需要输入密码，直接提交到github上。</p><p><code>ssh -T git@github.com</code><br>检测是否已经绑定成功及当前账户。</p><h2 id="添加一个新的SSH-key"><a href="#添加一个新的SSH-key" class="headerlink" title="添加一个新的SSH key"></a>添加一个新的SSH key</h2><p><code>ssh-keygen -t rsa -C "your_email@example.com" -f ~/.ssh/id_rsa_2</code><br>新建一个SSH密钥，名字不要取默认，不然会把之前的覆盖掉。</p><p><code>eval $(ssh-agent)</code> 或者 <code>eval `ssh-agent` </code><br>开启ssh-agent，用来管理密钥。若成功，会输出<code>Agent pid xxxx</code></p><p><code>ssh-add ~/.ssh/id_rsa_2</code><br>将新的SSH私钥添加至ssh-agent。</p>]]></content>
    
    
    <categories>
      
      <category>实用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PATH Environment Variable</tag>
      
      <tag>Git</tag>
      
      <tag>SSH</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用ASCII码</title>
    <link href="/posts/195a5003.html"/>
    <url>/posts/195a5003.html</url>
    
    <content type="html"><![CDATA[<table><thead><tr><th align="center">Dec</th><th align="center">Hex</th><th align="center">char</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">10</td><td align="center">0A</td><td align="center">\n</td><td align="center">换行LF(Line Feed)</td></tr><tr><td align="center">13</td><td align="center">0D</td><td align="center">\r</td><td align="center">回车CR(Carriage Return)</td></tr><tr><td align="center">32</td><td align="center">20</td><td align="center">\b</td><td align="center">空格</td></tr><tr><td align="center">48</td><td align="center">30</td><td align="center">0</td><td align="center">0</td></tr><tr><td align="center">65</td><td align="center">41</td><td align="center">A</td><td align="center">A</td></tr><tr><td align="center">97</td><td align="center">61</td><td align="center">a</td><td align="center">a</td></tr></tbody></table><p>Windows采用CRLF(odoa)进行换行，UNIX/Linux采用LF(oa)换行，MAC OS采用CR(od)换行。</p>]]></content>
    
    
    <categories>
      
      <category>实用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ASCII</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图片格式</title>
    <link href="/posts/e3b822c7.html"/>
    <url>/posts/e3b822c7.html</url>
    
    <content type="html"><![CDATA[<h1 id="JPG"><a href="#JPG" class="headerlink" title="JPG"></a>JPG</h1><ul><li>有损压缩，压缩率很高，一般能够压缩到原始数据量的十分之一</li><li>质量越差，体积越小</li><li>现实世界的照片</li></ul><h1 id="PNG"><a href="#PNG" class="headerlink" title="PNG"></a>PNG</h1><ul><li>无损压缩</li><li>适合存储大片完全相同颜色的图片，典型的就是软件的截图</li><li>不适合用来保存照片</li><li>支持透明色（Alpha通道）<ul><li>每个点实际上由4个字节组成</li><li>Red Green Blue Alpha</li></ul></li></ul><h1 id="GIF"><a href="#GIF" class="headerlink" title="GIF"></a>GIF</h1><ul><li>动图</li><li>从颜色表抽样出256种颜色</li><li>无损压缩(原始图片颜色数量不足256色时)</li><li>会有压缩过程存在</li><li>gif图片一般长宽都比较小，意味着它里的颜色数量比较小</li><li>并没有存储每张图的所有点，只存储了变化了的那些点。第一帧肯定存储完整的</li><li>支持透明，但支持两种透明，要么某个点完全透明，要么完全不透明</li></ul><h1 id="BMP"><a href="#BMP" class="headerlink" title="BMP"></a>BMP</h1><ul><li>无压缩，无损</li><li>每个点占三个字节（取决于具体保存的格式：1670w色/24位，单色/1bit，256色/8bit，65536色/16bit）</li><li>体积巨大</li><li>不适合放在网页里</li><li>可用 <a href="https://x-ways.net/winhex/">WinHex</a> 打开</li></ul><h1 id="WebP"><a href="#WebP" class="headerlink" title="WebP"></a>WebP</h1><ul><li>Google发明</li><li>有损压缩</li><li>各方面都胜过jpg</li><li>适合在移动端使用</li><li>支持alpha通道</li></ul>]]></content>
    
    
    <categories>
      
      <category>实用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Image</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web前端学习笔记3——JS基础</title>
    <link href="/posts/afe83c00.html"/>
    <url>/posts/afe83c00.html</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul><li>每一条JS语句后面必须加分号。</li><li>所有JS代码必须写在 script 标签里。为了规范，script 标签写在 head 标签中。</li><li>可以引用多个 script 标签，顺序执行。</li><li>用 src 可以引入外部js文件。若当前 script 标签作用为引入外部文件，不能再写代码。</li><li>注释<figure class="highlight actionscript"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs actionscript"><span class="hljs-comment">// 单行注释   快捷键 Ctrl + /</span><br><br> <span class="hljs-comment">/*    </span><br><span class="hljs-comment">多行注释    快捷键 Ctrl + Shift + /</span><br><span class="hljs-comment"> */</span><br></code></pre></div></td></tr></tbody></table></figure></li></ul><h1 id="基础代码"><a href="#基础代码" class="headerlink" title="基础代码"></a>基础代码</h1><p>控制浏览器弹出一个警告框<br><code>alert("XXXXX");</code></p><p>在页面输出一个内容<br><code>document.write("XXXX");</code></p><p>向控制台输出一个内容<br><code>console.log("XXXX");</code></p><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="标识"><a href="#标识" class="headerlink" title="标识"></a>标识</h2><p>用户自定义的所有名字叫做标识符。</p><ol><li>标识符必须由数字、字母、下划线和美元符号$组成。</li><li>不能以数字开头。</li><li>区分大小写。</li></ol><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li>声明变量  <code>var 声明语句</code></li><li>当前常量/变量的数据类型  <code>typeof 变量/常量</code><br>JS是弱语言，变量被赋值成什么类型就是什么类型。不要在后续代码中改变该变量的数据类型。</li></ul><h2 id="强制数据类型转换"><a href="#强制数据类型转换" class="headerlink" title="强制数据类型转换"></a>强制数据类型转换</h2><h3 id="运算中转换"><a href="#运算中转换" class="headerlink" title="运算中转换"></a>运算中转换</h3><ol><li>任何数据类型和字符串类型做相加操作，其他数据类型会自动转换成字符串类型。字符串拼接。</li><li>任何数据除了和字符串做相加运算外，先要将字符串转成数字。</li></ol><ul><li>与NaN做算数运算结果始终是NaN，包括NaN本身和NaN做算数运算。</li></ul><h3 id="转成布尔值"><a href="#转成布尔值" class="headerlink" title="转成布尔值"></a>转成布尔值</h3><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> tmp = <span class="hljs-built_in">Boolean</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">//true</span><br><span class="hljs-keyword">var</span> tmp = <span class="hljs-built_in">Boolean</span>(<span class="hljs-number">0</span>); <span class="hljs-comment">//false</span><br><span class="hljs-keyword">var</span> tmp = <span class="hljs-built_in">Boolean</span>(-<span class="hljs-number">2</span>); <span class="hljs-comment">//true</span><br><br><span class="hljs-keyword">var</span> tmp = <span class="hljs-built_in">Boolean</span>(<span class="hljs-string">""</span>); <span class="hljs-comment">//false</span><br><span class="hljs-keyword">var</span> tmp = <span class="hljs-built_in">Boolean</span>(<span class="hljs-string">"hello"</span>); <span class="hljs-comment">//true</span><br><br><span class="hljs-keyword">var</span> tmp = <span class="hljs-built_in">Boolean</span>(<span class="hljs-literal">null</span>); <span class="hljs-comment">//false</span><br><span class="hljs-keyword">var</span> tmp = <span class="hljs-built_in">Boolean</span>(<span class="hljs-literal">undefined</span>); <span class="hljs-comment">//false</span><br></code></pre></div></td></tr></tbody></table></figure><ul><li>数字0转成布尔值为false，所有非0数字转成布尔值为true。</li><li>空字符串转成布尔值为false，所有非空字符串转成布尔值为true。</li><li>null和undefined转成布尔值为false。</li><li>除了undefined，null，-0，+0，NaN，””（空字符串）都转换为true。</li></ul><h3 id="转成数字"><a href="#转成数字" class="headerlink" title="转成数字"></a>转成数字</h3><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> tmp = <span class="hljs-built_in">Number</span>(<span class="hljs-literal">true</span>); <span class="hljs-comment">//1</span><br><span class="hljs-keyword">var</span> tmp = <span class="hljs-built_in">Number</span>(<span class="hljs-literal">false</span>); <span class="hljs-comment">//0</span><br><span class="hljs-keyword">var</span> tmp = <span class="hljs-built_in">Number</span>(<span class="hljs-string">"20a"</span>); <span class="hljs-comment">//NaN</span><br><span class="hljs-keyword">var</span> tmp = <span class="hljs-built_in">Number</span>(<span class="hljs-literal">null</span>); <span class="hljs-comment">//0</span><br><span class="hljs-keyword">var</span> tmp = <span class="hljs-built_in">Number</span>(<span class="hljs-literal">undefined</span>); <span class="hljs-comment">//NaN</span><br><br><span class="hljs-keyword">var</span> tmp = <span class="hljs-built_in">parseInt</span>(<span class="hljs-string">"20a"</span>); <span class="hljs-comment">//20</span><br><span class="hljs-keyword">var</span> tmp = <span class="hljs-built_in">parseInt</span>(<span class="hljs-literal">true</span>); <span class="hljs-comment">//NaN</span><br><br><span class="hljs-keyword">var</span> tmp = <span class="hljs-built_in">parseFloat</span>(<span class="hljs-string">"10.33"</span>); <span class="hljs-comment">//10.33</span><br>alert(typof tmp); <span class="hljs-comment">//number</span><br></code></pre></div></td></tr></tbody></table></figure><ul><li><code>Number()</code></li></ul><ol><li>布尔值转换true → 1，false → 0。</li><li>字符串如果是纯数字字符串会转成数字，否则转换成NaN。</li><li>特殊数据类型null → 0，undefined → NaN。</li></ol><ul><li><code>parseInt()</code><br>兼容Number的功能，取整</li><li><code>parseFloat()</code><br>解析一个字符串，并返回一个浮点数。</li></ul><h1 id="被除数为0"><a href="#被除数为0" class="headerlink" title="被除数为0"></a>被除数为0</h1><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> tmp = <span class="hljs-number">1</span> / <span class="hljs-number">0</span>; <span class="hljs-comment">//Infinity 无穷大</span><br><span class="hljs-keyword">var</span> tmp = -<span class="hljs-number">1</span> / <span class="hljs-number">0</span>; <span class="hljs-comment">//-Infinity 无穷小</span><br></code></pre></div></td></tr></tbody></table></figure><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h2><p>只能操作一个值的运算符，叫做一元运算符。<br><code>x+=a</code>简写<code>x=x+a</code>，<code>x-=a</code>简写<code>x=x-a</code>，<code>x*=a</code>简写<code>x=x*a</code>，<code>x/=a</code>简写<code>x=x/a</code></p><ul><li><code>a++;</code>&nbsp;&nbsp;&nbsp;&nbsp;++后置，先取a的值，然后再进行+1操作。</li><li><code>++a;</code>&nbsp;&nbsp;&nbsp;&nbsp;++前置，先进行+1操作，然后再取a的值。<figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-number">5</span>;<br>alert(a++); <span class="hljs-comment">//5</span><br>alert(a); <span class="hljs-comment">//6</span><br><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">5</span>;<br>alert(++a); <span class="hljs-comment">//6</span><br>alert(a); <span class="hljs-comment">//6</span><br><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">5</span>;<br>alert(a--); <span class="hljs-comment">//5</span><br>alert(a); <span class="hljs-comment">//4</span><br><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">5</span> ;<br>alert(--a); <span class="hljs-comment">//4</span><br>alert(a); <span class="hljs-comment">//4</span><br></code></pre></div></td></tr></tbody></table></figure></li></ul><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">alert(<span class="hljs-number">5</span> &gt; <span class="hljs-number">3</span>); <span class="hljs-comment">//true</span><br>alert(<span class="hljs-string">"a"</span> &gt; <span class="hljs-string">"b"</span>); <span class="hljs-comment">//false</span><br>alert(<span class="hljs-string">"abcf"</span> &gt; <span class="hljs-string">"abd"</span>); <span class="hljs-comment">//false</span><br>alert(<span class="hljs-number">2</span> &gt; <span class="hljs-literal">true</span>); <span class="hljs-comment">//true → 1 true</span><br><br>alert(<span class="hljs-number">1</span> == <span class="hljs-literal">true</span>); <span class="hljs-comment">//true</span><br>alert(<span class="hljs-number">0</span> == <span class="hljs-literal">false</span>); <span class="hljs-comment">//true</span><br><br>alert(<span class="hljs-number">20</span> == <span class="hljs-string">"20"</span>); <span class="hljs-comment">//true</span><br>alert(<span class="hljs-number">1</span> != <span class="hljs-literal">NaN</span>); <span class="hljs-comment">//true</span><br>alert(<span class="hljs-literal">NaN</span> != <span class="hljs-literal">NaN</span>); <span class="hljs-comment">//true</span><br><br>alert(<span class="hljs-number">20</span> === <span class="hljs-string">"20"</span>); <span class="hljs-comment">//false</span><br>alert(<span class="hljs-number">20</span> === <span class="hljs-built_in">Number</span>(<span class="hljs-string">"20"</span>)); <span class="hljs-comment">//true</span><br></code></pre></div></td></tr></tbody></table></figure><ol><li>两个操作数都是数值，则数值比较。</li><li>两个操作数都是字符串，则比较两个字符串对应的字符编码值。</li><li>两个操作数有一个是数值，则将另一个转换成数值，再进行数值比较。</li><li>一个操作数是NaN，则 == 返回false，!= 返回true；并且NaN和自身不等。</li><li>在全等和全不等判断上，只有值和类型都相等，才返回true，否则返回false。(===，比较前不需要自动转换)</li><li>！= 和 ！== 两种不等运算符，区别与 == 和 === 类似。</li></ol><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><ul><li><strong>与 <code>&amp;&amp;</code></strong><br>表达式1 &amp;&amp; 表达式2<br>只有当两个表达式的结果都为真时，运算结果才为true。<br>【短路操作】当表达式1为false时，表达式2就不去执行，直接判断整个与运算为false。<br>有多个 &amp;&amp; 连续时，从左往右返回第一个为假的值。</li><li><strong>或 <code>||</code></strong><br>表达式1 || 表达式2<br>只有当两个表达式的结果都为假时，运算结果才为false。<br>【短路操作】当表达式1为true时，表达式2就不去执行，直接判断整个或运算为true。<br>可用于返回默认值。如果左侧表达式可能产生空值，右侧的表达式可作为替代。<br>有多个 || 连续时，从左往右返回第一个为真的值。</li><li><strong>非 <code>!</code></strong><br>可以用于任意数据类型的值，运算结果会返回一个布尔值。<br>流程：先将这个值转成布尔值，然后取反。</li><li>三元运算符<code>a ? b : c</code><br>若问号左侧条件为真，选择左侧的的值，条件为假选择右侧的值。<figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-literal">true</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">2</span>); <span class="hljs-comment">//1</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-literal">false</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">2</span>); <span class="hljs-comment">//2</span><br></code></pre></div></td></tr></tbody></table></figure></li></ul><p>优先级： <code>||</code> &lt; <code>&amp;&amp;</code> &lt; <code>比较运算符(&gt;,==)</code> &lt; <code>其它运算符</code></p>]]></content>
    
    
    <categories>
      
      <category>web前端学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>front-end</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树莓派搭建 OpenCV 3 环境</title>
    <link href="/posts/aee93aa1.html"/>
    <url>/posts/aee93aa1.html</url>
    
    <content type="html"><![CDATA[<h1 id="下载相关工具及包"><a href="#下载相关工具及包" class="headerlink" title="下载相关工具及包"></a>下载相关工具及包</h1><ul><li><p>安装OpenCV相关工具</p><figure class="highlight bash"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt install build-essential cmake git pkg-config libgtk-3-dev libcanberra-gtk*<br>sudo apt install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev libxvidcore-dev libx264-dev<br>sudo apt install libjpeg-dev libpng-dev libtiff-dev gfortran openexr libatlas-base-dev opencl-headers<br>sudo apt install python3-dev python3-numpy libtbb2 libtbb-dev libdc1394-22-dev<br></code></pre></div></td></tr></tbody></table></figure></li><li><p>创建一个新目录并从 Github 克隆 OpenCV 和 OpenCV contrib 存储库</p><figure class="highlight bash"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">mkdir ~/opencv_build<br><span class="hljs-built_in">cd</span> ~/opencv_build<br>git <span class="hljs-built_in">clone</span> https://github.com/opencv/opencv.git<br>git <span class="hljs-built_in">clone</span> https://github.com/opencv/opencv_contrib.git<br></code></pre></div></td></tr></tbody></table></figure></li><li><p>创建一个临时构建目录，然后切换到该目录</p><figure class="highlight bash"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">mkdir -p ~/opencv_build/opencv/build<br><span class="hljs-built_in">cd</span> ~/opencv_build/opencv/build<br></code></pre></div></td></tr></tbody></table></figure></li></ul><h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><ul><li><p>设置编译参数，”\“ 代表将代码延续到下一行</p><figure class="highlight bash"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">cmake -D CMAKE_BUILD_TYPE=RELEASE \<br>    -D CMAKE_INSTALL_PREFIX=/usr/<span class="hljs-built_in">local</span> \<br>    -D INSTALL_C_EXAMPLES=OFF \<br>    -D INSTALL_PYTHON_EXAMPLES=OFF \<br>    -D OPENCV_GENERATE_PKGCONFIG=ON \<br>    -D ENABLE_NEON=ON \<br>    -D ENABLE_VFPV3=ON \<br>    -D BUILD_TESTS=OFF \<br>    -D OPENCV_ENABLE_NONFREE=ON \<br>    -D OPENCV_EXTRA_MODULES_PATH=~/opencv_build/opencv_contrib/modules \<br>    -D BUILD_EXAMPLES=OFF ..<br></code></pre></div></td></tr></tbody></table></figure></li><li><p>输出结果</p><figure class="highlight bash"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">...<br>-- Configuring <span class="hljs-keyword">done</span><br>-- Generating <span class="hljs-keyword">done</span><br>-- Build files have been written to: /home/pi/opencv_build/opencv/build<br></code></pre></div></td></tr></tbody></table></figure></li><li><p>开始编译</p><figure class="highlight bash"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">make -j4<br></code></pre></div></td></tr></tbody></table></figure><p>花费时间很长，请耐心等待<br>若在途中失败，再次运行该命令，会从停止的位置继续</p></li><li><p>编译中出现问题</p></li></ul><p>提示缺少boostdesc_bgm.i文件，将此<a href="https://pcs.baidu.com/rest/2.0/pcs/file?method=download&amp;app_id=778750&amp;filename=boostdesc_bgm.i%E7%AD%89.zip&amp;path=/share/boostdesc_bgm.i%E7%AD%89.zip&amp;filename=boostdesc_bgm.i%E7%AD%89.zip">文件</a>拷贝到opencv_contrib/modules/xfeatures2d/src/目录下</p><ul><li>结束后会出现<figure class="highlight bash"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">...<br>[100%] Linking CXX shared module ../../lib/python3/cv2.cpython-35m-arm-linux-gnueabihf.so<br>[100%] Built target opencv_python3<br></code></pre></div></td></tr></tbody></table></figure></li></ul><h1 id="验证成功"><a href="#验证成功" class="headerlink" title="验证成功"></a>验证成功</h1><ul><li>C++ 库<figure class="highlight bash"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">pkg-config --modversion opencv4<br></code></pre></div></td></tr></tbody></table></figure></li><li>Python 库<figure class="highlight bash"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">python3 -c <span class="hljs-string">"import cv2; print(cv2.__version__)"</span><br></code></pre></div></td></tr></tbody></table></figure>若成功安装，会输出版本号</li></ul>]]></content>
    
    
    <categories>
      
      <category>树莓派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Raspberry Pi</tag>
      
      <tag>OpenCV</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows与Windows之间传输数据</title>
    <link href="/posts/5d108ff3.html"/>
    <url>/posts/5d108ff3.html</url>
    
    <content type="html"><![CDATA[<p><strong>设置共享文件</strong></p><ul><li>设置 → 网络和Internet → 网络和共享中心 → 更改高级共享选项 → 来宾或公用 → 启用网络发现、启用文件和打印机共享 → 所有网络 → 启用共享 → 保存更改</li><li>需要共享的文件或盘符 → 右键“属性” → 安全 → 编辑 → 添加 → 输入“everyone” → 确定 → 点击“Everyone” → 下方“Everyone的权限”根据需要修改</li><li>属性里的“共享”选项卡 → 高级共享 → 勾选“共享此文件” → 权限 → 根据需要选择</li></ul><p><strong>访问共享文件</strong></p><ul><li>在文件资源管理器地址栏输入 <code>\\计算机IP</code></li></ul>]]></content>
    
    
    <categories>
      
      <category>实用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Data transmission</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树莓派与Windows的文件传输</title>
    <link href="/posts/f50c86cf.html"/>
    <url>/posts/f50c86cf.html</url>
    
    <content type="html"><![CDATA[<h1 id="SFTP"><a href="#SFTP" class="headerlink" title="SFTP"></a>SFTP</h1><ul><li>下载<a href="https://www.filezilla.cn/download/client">FileZilla</a></li><li>主机填入 sftp://树莓派IP，用户名和密码填自己树莓派的设置</li><li>直接将本地站点里的文件拖入右边远程站点</li></ul><h1 id="Samba"><a href="#Samba" class="headerlink" title="Samba"></a>Samba</h1><ul><li><p>安装samba软件 </p><figure class="highlight bash"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt-get install samba samba-common-bin -y<br></code></pre></div></td></tr></tbody></table></figure></li><li><p>配置 /etc/samba/smb.conf 文件</p><figure class="highlight sql"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">sudo nano /etc/samba/smb.conf<br><br><span class="hljs-comment"># 在文件末尾添加</span><br>[Share]<br>    <span class="hljs-comment"># 说明信息</span><br>    <span class="hljs-keyword">comment</span> = Pi4<br>    <span class="hljs-comment"># 可以访问的用户</span><br>    valid <span class="hljs-keyword">users</span> = <span class="hljs-keyword">pi</span>,root<br>    <span class="hljs-comment"># 定义主目录</span><br>    <span class="hljs-keyword">path</span> = /home/<span class="hljs-keyword">pi</span>/<br>    <span class="hljs-comment"># 可被其他人看到资源名称（非内容）</span><br>    browseable = yes<br>    <span class="hljs-comment"># 可写</span><br>    <span class="hljs-keyword">read</span> <span class="hljs-keyword">only</span> = <span class="hljs-keyword">no</span><br>    <span class="hljs-comment"># 新建文件的权限</span><br>    <span class="hljs-keyword">create</span> <span class="hljs-keyword">mask</span> = <span class="hljs-number">0777</span><br>    <span class="hljs-comment"># 新建目录的权限</span><br>    <span class="hljs-keyword">directory</span> <span class="hljs-keyword">mask</span> = <span class="hljs-number">0777</span><br></code></pre></div></td></tr></tbody></table></figure></li><li><p>添加samba密码，用户名必须为树莓派已有的</p><figure class="highlight bash"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo smbpasswd -a pi<br><span class="hljs-comment"># 要求设置密码，可与树莓派密码不同</span><br><br><span class="hljs-comment"># 重启samba</span><br>sudo samba restart<br></code></pre></div></td></tr></tbody></table></figure></li><li><p>查看samba是否开启</p><figure class="highlight bash"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">netstat -tnl<br><span class="hljs-comment"># 139和445端口开放，表示成功</span><br></code></pre></div></td></tr></tbody></table></figure></li><li><p>在Windows文件资源管理器的地址栏里输入 \\树莓派IP，再输入树莓派用户名和samba密码，即可访问。</p></li><li><p>可以使用这个方法在树莓派上外加移动硬盘做一个小型NAS<br>只要改为 path = /media/pi 就可以了</p></li></ul><h1 id="存储卡"><a href="#存储卡" class="headerlink" title="存储卡"></a>存储卡</h1><p>直接用读卡器将文件拷入boot分区</p>]]></content>
    
    
    <categories>
      
      <category>树莓派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Data transmission</tag>
      
      <tag>Raspberry Pi</tag>
      
      <tag>NAS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>告知</title>
    <link href="/posts/650174fa.html"/>
    <url>/posts/650174fa.html</url>
    
    <content type="html"><![CDATA[<p>😗🙃💬</p><span id="more"></span><p>本网站主要用于记笔记。<br>学习笔记大都很简略，便于记忆，而且过于简单基础的部分都没写。不建议直接看着学习。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>树莓派换源与输入法</title>
    <link href="/posts/67ef8b83.html"/>
    <url>/posts/67ef8b83.html</url>
    
    <content type="html"><![CDATA[<h1 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h1><p>在实际使用时，树莓派可能会出现下载慢的问题，主要原因是树莓派的服务器位于其他国家，为解决此问题可以选择我国的镜像站。如想对树莓派系统源与软件源进行修改，要先在终端找到源的位置，然后将用其它的国内源替换，之后保存确认退出。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">替换系统更新源，主要包括raspi-config、minecraftpi、树莓派桌面环境、内核固件驱动等少量软件。<br>sudo nano /etc/apt/sources.list.d/raspi.list<br><br>用 <span class="hljs-comment"># 注释掉原文件内容，用以下内容取代：</span><br>deb http://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ buster main ui<br>deb-src http://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ buster main ui<br><br>Ctrl+O 保存，回车确认保存，Ctrl+X 退出<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">替换软件更新源<br>sudo nano /etc/apt/sources.list<br><br>用 <span class="hljs-comment"># 注释掉原文件内容，用以下内容取代：</span><br>deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main contrib non-free rpi<br>deb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main contrib non-free rpi<br><br>Ctrl+O 保存，回车确认保存，Ctrl+X 退出<br><br>其他软件源<br>中科大 http://mirrors.ustc.edu.cn/raspbian/raspbian/<br>阿里云 http://mirrors.aliyun.com/raspbian/raspbian/<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">更新系统及软件<br>sudo apt-get update<br>sudo apt-get upgrade<br></code></pre></div></td></tr></tbody></table></figure><h1 id="中文输入法"><a href="#中文输入法" class="headerlink" title="中文输入法"></a>中文输入法</h1><ul><li>基于Fcitx输入法框架的google拼音输入法<br><code>sudo apt-get install fcitx fcitx-googlepinyin fcitx-module-cloudpinyin fcitx-sunpinyin</code></li><li>SCIM输入法<br><code>sudo apt-get install scim-pinyin</code></li><li>Ibus输入法<br><code>sudo apt-get install ibus ibus-pinyin</code></li></ul>]]></content>
    
    
    <categories>
      
      <category>树莓派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Raspberry Pi</tag>
      
      <tag>change mirror</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在树莓派上安装系统及开启WIFI，SSH，VNC</title>
    <link href="/posts/8a7a3b8b.html"/>
    <url>/posts/8a7a3b8b.html</url>
    
    <content type="html"><![CDATA[<h1 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h1><ul><li>下载<a href="https://www.raspberrypi.org/downloads/raspberry-pi-os/">Raspberry Pi OS</a>系统（以前叫做Raspbian，我写本文时才发现改名了），或者其它系统。之后树莓派相关都以此系统为例。</li><li>用<a href="https://rufus.ie/">Rufus</a>将镜像文件导入microSD卡，插入树莓派。</li></ul><h1 id="激活WIFI"><a href="#激活WIFI" class="headerlink" title="激活WIFI"></a>激活WIFI</h1><p>在电脑上，进入已经烧录好系统的内存卡boot区，新建一个配置文件</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">文件名wpa_supplicant.conf<br><br><span class="hljs-attribute">country</span>=CN<br><span class="hljs-attribute">ctrl_interface</span>=DIR=/var/run/wpa_supplicant <span class="hljs-attribute">GROUP</span>=netdev<br><span class="hljs-attribute">update_config</span>=1<br> <br>network={<br><span class="hljs-attribute">ssid</span>=<span class="hljs-string">"WiFi-A"</span># ssid:网络的名称<br><span class="hljs-attribute">psk</span>=<span class="hljs-string">"123"</span>    # psk:密码<br><span class="hljs-attribute">key_mgmt</span>=WPA-PSK# WiFi 使用WPA/WPA2加密<br><span class="hljs-attribute">priority</span>=1# priority:连接优先级，数字越大优先级越高（不可以是负数）<br><span class="hljs-attribute">scan_ssid</span>=0   # scan_ssid:连接隐藏WiFi时需要指定该值为1<br>}<br></code></pre></div></td></tr></tbody></table></figure><h1 id="开启SSH"><a href="#开启SSH" class="headerlink" title="开启SSH"></a>开启SSH</h1><p>在内存卡 boot 区，新建建立一个名字为 ssh 的空白文件即可。注意要小写且不要有任何扩展名。<br>树莓派启动后会在检测到这个文件之后自动启用 ssh 服务，随后即可通过登录路由器找到树莓派的 IP 地址，通过 ssh 连接到树莓派了。</p><h1 id="使用VNC"><a href="#使用VNC" class="headerlink" title="使用VNC"></a>使用VNC</h1><h2 id="查询树莓派IP"><a href="#查询树莓派IP" class="headerlink" title="查询树莓派IP"></a>查询树莓派IP</h2><ul><li>在浏览器输入192.168.1.1，没有改的话看看自家路由器后面的用户名和密码。</li><li>如果无法登录，使用<a href="https://www.advanced-ip-scanner.com/cn/">Advanced IP Scanner</a>，点击scan，可以搜索到当前局域网在线的所有设备，比对后，可以得到树莓派的IP。</li></ul><h2 id="连接到树莓派"><a href="#连接到树莓派" class="headerlink" title="连接到树莓派"></a>连接到树莓派</h2><ul><li>使用<a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html">PuTTY</a>，输入树莓派IP，Connection type选择SSH，点击OPEN。跳出来一个对话框，选择YES。<br>login as输入pi，password输入raspberry（这是默认用户名和密码，之后可以更改）</li><li>输入 sudo raspi-config，进入树莓派设置界面</li><li>进入 7.Advanced Options → 5.Interfacing Options → P3 VNC ，开启 VNC。Tab 键选择 Finish。</li><li>输入 sudo reboot，重启树莓派</li><li>使用<a href="https://www.realvnc.com/en/connect/download/viewer/">VNC Viewer</a>，File → New Connection → VNC Server,输入树莓派IP。双击设备图标，Username填pi，Password填raspberry。</li><li>成功连接树莓派<span class="github-emoji"><span>🍓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f353.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></li></ul>]]></content>
    
    
    <categories>
      
      <category>树莓派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Raspberry Pi</tag>
      
      <tag>Raspberry Pi OS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用虚拟机运行Linux系统</title>
    <link href="/posts/7556fb6e.html"/>
    <url>/posts/7556fb6e.html</url>
    
    <content type="html"><![CDATA[<ol><li>下载<a href="https://my.vmware.com/cn/web/vmware/downloads/info/slug/desktop_end_user_computing/vmware_workstation_pro/15_0">VMware Workstation Pro</a></li><li>下载<a href="https://ubuntu.com/download/desktop">Ubuntu</a>，或者其他Linux系统</li><li>在VMware中选择“创建新的虚拟机”，点击“典型”，“安装程序光盘映像文件”导入iso文件，之后一直选择默认就行了。想修改时右击虚拟机的设置选项就可以。</li><li>安装时出现问题：</li></ol><ul><li>retrieving file太慢，可以直接点skip</li><li>卡在install vm-tools，找到autoinst.iso文件删除，可以自定义安装。系统安装完成后，再安装vmware-tools。</li></ul>]]></content>
    
    
    <categories>
      
      <category>实用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Virtual Machine</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基础Linux命令</title>
    <link href="/posts/82b18e43.html"/>
    <url>/posts/82b18e43.html</url>
    
    <content type="html"><![CDATA[<h1 id="显示、打开目录"><a href="#显示、打开目录" class="headerlink" title="显示、打开目录"></a>显示、打开目录</h1><table><thead><tr><th align="center">命令</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">ls</td><td align="center">显示当前目录内容</td></tr><tr><td align="center">ls -a</td><td align="center">显示当前目录所有内容（包括隐藏文件）</td></tr><tr><td align="center">ls -l</td><td align="center">除文件名外，将其它信息也一起罗列</td></tr><tr><td align="center">ls -lh</td><td align="center">以列表且文件大小易读(如KB,MB)显示信息</td></tr><tr><td align="center">ls -la(ll)</td><td align="center">以列表形式显示包括隐藏文件信息</td></tr><tr><td align="center">ls -i</td><td align="center">查看id</td></tr><tr><td align="center">pwd</td><td align="center">显示当前所在目录的绝对路径</td></tr><tr><td align="center">cd</td><td align="center">切换当前目录至</td></tr><tr><td align="center">cd ~</td><td align="center">切换至home目录</td></tr><tr><td align="center">cd ..</td><td align="center">返回上级目录</td></tr><tr><td align="center">cd ../..</td><td align="center">返回上上级目录</td></tr><tr><td align="center">cd -</td><td align="center">上次打开的目录</td></tr></tbody></table><h1 id="新建、删除文件"><a href="#新建、删除文件" class="headerlink" title="新建、删除文件"></a>新建、删除文件</h1><table><thead><tr><th align="center">命令</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">touch</td><td align="center">创建一个文本文件，或改变文件最后修改时间</td></tr><tr><td align="center">mkdir</td><td align="center">创建一个文件夹</td></tr><tr><td align="center">mkdir -p</td><td align="center">创建文件夹及其子文件夹</td></tr><tr><td align="center">rm</td><td align="center">删除一个文件</td></tr><tr><td align="center">rm -r</td><td align="center">删除一个文件夹</td></tr></tbody></table><h1 id="移动、复制文件"><a href="#移动、复制文件" class="headerlink" title="移动、复制文件"></a>移动、复制文件</h1><table><thead><tr><th align="center">命令</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">mv 文件名 文件名</td><td align="center">重命名</td></tr><tr><td align="center">mv 文件名 目录名</td><td align="center">文件移动到目录</td></tr><tr><td align="center">mv 目录名 目录名</td><td align="center">目标目录存在，移动；不存在则重命名</td></tr><tr><td align="center">mv 目录名 文件名</td><td align="center">错误</td></tr><tr><td align="center">cp</td><td align="center">复制文件</td></tr><tr><td align="center">cp -r [目录]</td><td align="center">复制目录</td></tr></tbody></table><h1 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h1><table><thead><tr><th align="center">命令</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">*</td><td align="center">通配符，代表0个或多个字符</td></tr><tr><td align="center">？</td><td align="center">通配符，代表1个字符</td></tr><tr><td align="center">[abcd]</td><td align="center">通配符，abcd中一个字符</td></tr><tr><td align="center">[a-z]</td><td align="center">a到z中的一个字符</td></tr></tbody></table><h1 id="搜索文件名"><a href="#搜索文件名" class="headerlink" title="搜索文件名"></a>搜索文件名</h1><table><thead><tr><th align="center">命令</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">find [目录] -name ‘’</td><td align="center">搜索名称符合的文件，iname会忽略大小写</td></tr><tr><td align="center">find [目录] -size +/-</td><td align="center">搜索大/小于的文件</td></tr><tr><td align="center">find [目录] -user</td><td align="center">搜索所属某人的文件</td></tr><tr><td align="center">file [目录] -type f</td><td align="center">搜索所有文件</td></tr><tr><td align="center">file [目录] -type d</td><td align="center">搜索所有文件夹</td></tr><tr><td align="center">file [目录] -type l</td><td align="center">搜索所有软链接</td></tr><tr><td align="center">find [目录] -mmin +/-n</td><td align="center">在n分钟之前/内被更改的文件</td></tr><tr><td align="center">find [目录] -mtime +/-n</td><td align="center">在n天之前/内被更改的文件</td></tr><tr><td align="center">locate</td><td align="center">用数据库搜索，速度快，但是更新不及时，可手动更新sudo updatedb</td></tr></tbody></table><table><thead><tr><th align="center">注</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">atime</td><td align="center">访问时间(access time)：文件最后被读取的时间，可以使用touch命令更改为当前时间;</td></tr><tr><td align="center">ctime</td><td align="center">变更时间(change time)，文件本身最后被变更的时间，变更动作可以使chmod、chgrp、mv等等；</td></tr><tr><td align="center">mtime</td><td align="center">修改时间（modify time），文件内容最后被修改的时间，修改动作可以使echo重定向、vi等等；</td></tr></tbody></table><h1 id="搜索文本内容"><a href="#搜索文本内容" class="headerlink" title="搜索文本内容"></a>搜索文本内容</h1><table><thead><tr><th align="center">命令</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">grep [搜索内容] [文件或目录]</td><td align="center">在文件或目录中搜索文本内容</td></tr><tr><td align="center">grep -n</td><td align="center">显示该行内容与行号</td></tr><tr><td align="center">grep -v</td><td align="center">显示不包含匹配文本的所有行</td></tr><tr><td align="center">grep ^</td><td align="center">显示以开头的所有行</td></tr><tr><td align="center">grep $</td><td align="center">显示以结尾的所有行</td></tr><tr><td align="center">grep -i</td><td align="center">忽略大小写</td></tr></tbody></table><h1 id="写入文本内容"><a href="#写入文本内容" class="headerlink" title="写入文本内容"></a>写入文本内容</h1><table><thead><tr><th align="center">命令</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">[输出结果] &gt; [文件]</td><td align="center">覆盖掉原来文件内容</td></tr><tr><td align="center">[输出结果] &gt;&gt; [文件]</td><td align="center">追加到原来文件内容</td></tr></tbody></table><h1 id="显示文件内容"><a href="#显示文件内容" class="headerlink" title="显示文件内容"></a>显示文件内容</h1><table><thead><tr><th align="center">命令</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">cat</td><td align="center">文本文件全部显示</td></tr><tr><td align="center">cat -n</td><td align="center">对所有汉书编号</td></tr><tr><td align="center">cat -b</td><td align="center">除空行外，对行数编号</td></tr><tr><td align="center">more</td><td align="center">以一页一页的形式显示文本文件</td></tr></tbody></table><h1 id="拆分文件内容"><a href="#拆分文件内容" class="headerlink" title="拆分文件内容"></a>拆分文件内容</h1><table><thead><tr><th align="center">命令</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">split [-b &lt;字节&gt;] [要切割的文件] [输出文件名]</td><td align="center">将原文件切割为X个字节一个的文件</td></tr><tr><td align="center">split [-&lt;行数&gt;] [要切割的文件] [输出文件名]</td><td align="center">将原文件每X行切割为一个文件</td></tr><tr><td align="center">-C&lt;字节&gt;</td><td align="center">与参数”-b”相似，但是在切 割时将尽量维持每行的完整性</td></tr></tbody></table><h1 id="创建链接"><a href="#创建链接" class="headerlink" title="创建链接"></a>创建链接</h1><table><thead><tr><th align="center">命令</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">ln -s [源文件或目录] [链接文件或目录]</td><td align="center">创建软链接</td></tr><tr><td align="center">ln [源文件] [链接文件]</td><td align="center">创建硬链接</td></tr></tbody></table><table><thead><tr><th align="center">~</th><th align="center">软链接</th><th align="center">硬链接</th></tr></thead><tbody><tr><td align="center">inode</td><td align="center">与原文件不同，说明是两个不同文件</td><td align="center">与原文件相同，指向同一个区块</td></tr><tr><td align="center">创建目录链接</td><td align="center">可以</td><td align="center">不行</td></tr><tr><td align="center">跨文件系统建立</td><td align="center">可以</td><td align="center">不行</td></tr><tr><td align="center">删除原文件后</td><td align="center">不能打开</td><td align="center">仍可打开</td></tr></tbody></table><h1 id="连接符"><a href="#连接符" class="headerlink" title="连接符"></a>连接符</h1><table><thead><tr><th align="center">命令</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">-a</td><td align="center">条件同时满足</td></tr><tr><td align="center">-o</td><td align="center">或者，满足一个</td></tr><tr><td align="center">[输出结果] | [输入]</td><td align="center">把某个命令的输出结果作为另一个命令的输入，输入常用more，用来显示很长的输出结果</td></tr></tbody></table><h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><table><thead><tr><th align="center">按键</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">Tab</td><td align="center">输入前几个字符可自动补全</td></tr><tr><td align="center">↑</td><td align="center">上一个输入的命令</td></tr><tr><td align="center">↓</td><td align="center">下一个输入的命令</td></tr><tr><td align="center">Ctrl + A</td><td align="center">鼠标移至最前面</td></tr><tr><td align="center">Ctrl + E</td><td align="center">鼠标移至最后面</td></tr><tr><td align="center">Ctrl + R</td><td align="center">搜索命令历史</td></tr><tr><td align="center">Ctrl + L</td><td align="center">清屏</td></tr></tbody></table><h1 id="用户及组"><a href="#用户及组" class="headerlink" title="用户及组"></a>用户及组</h1><table><thead><tr><th align="center">命令</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">sudo useradd XXX</td><td align="center">添加用户</td></tr><tr><td align="center">cat /etc/passwd</td><td align="center">查看用户</td></tr><tr><td align="center">sudo passwd XXX</td><td align="center">为用户添加密码</td></tr><tr><td align="center">su XXX</td><td align="center">切换用户</td></tr><tr><td align="center">sudo su root</td><td align="center">切换至root用户</td></tr><tr><td align="center">exit</td><td align="center">用户退出</td></tr><tr><td align="center">sudo userdel XXX</td><td align="center">删除用户</td></tr><tr><td align="center">sudo userdel -r XXX</td><td align="center">删除用户和该用户目录</td></tr><tr><td align="center">groupadd XXX</td><td align="center">添加组</td></tr><tr><td align="center">cat /etc/group</td><td align="center">查看组</td></tr><tr><td align="center">groupmod -n [新名字] [旧名字]</td><td align="center">给组改名</td></tr><tr><td align="center">groupdel XXX</td><td align="center">删除组</td></tr><tr><td align="center">usermod -g xxgroup xxuser</td><td align="center">修改初始组</td></tr><tr><td align="center">usermod -G xxgroup,xxgroup xxuser</td><td align="center">修改附加组</td></tr><tr><td align="center">usermod -s [shell] xxuser</td><td align="center">修改shell</td></tr><tr><td align="center">id</td><td align="center">查看用户id信息</td></tr><tr><td align="center">who</td><td align="center">当前所有登录用户显示</td></tr></tbody></table><h1 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h1><table><thead><tr><th align="center">命令</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">cat /etc/shells</td><td align="center">查看所有shell</td></tr><tr><td align="center">chsh</td><td align="center">修改shell</td></tr></tbody></table><h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><table><thead><tr><th align="center">内置命令</th><th align="center">外部命令</th></tr></thead><tbody><tr><td align="center">例which cd没有显示路径</td><td align="center">which ls显示路径为/bin/ls</td></tr><tr><td align="center">在系统启动时就调入内存，执行效率高</td><td align="center">系统的软件功能，用户需要时才从硬盘中读入内存</td></tr><tr><td align="center">大部分内置在shell中，也有一些有单独的内存</td><td align="center"></td></tr><tr><td align="center">系统启动时，会把shell中内置命令及不在shell中内置命令加载到内存</td><td align="center">用户需要时才加载到内存</td></tr></tbody></table><h1 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h1><figure class="highlight brainfuck"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs brainfuck">   <span class="hljs-comment">u</span>   <span class="hljs-comment">g</span>   <span class="hljs-comment">o</span><br><span class="hljs-comment"></span><span class="hljs-literal">-</span> --<span class="hljs-literal">-</span> --<span class="hljs-literal">-</span> --<span class="hljs-literal">-</span><br><br><span class="hljs-comment">第一个字符表示文件类型：</span><br><span class="hljs-comment">a</span> <span class="hljs-comment">二进制文件（包括不限于文本文件）；</span><br><span class="hljs-comment">d</span> <span class="hljs-comment">目录（文件夹）；</span><br><span class="hljs-comment">|</span> <span class="hljs-comment">（软链接文件）</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">u(user)</span>  <span class="hljs-comment">所有者</span><br><span class="hljs-comment">g(group)</span> <span class="hljs-comment">所属组</span><br><span class="hljs-comment">o(other)</span> <span class="hljs-comment">其他用户</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">文件权限：</span><br><span class="hljs-comment">r</span> <span class="hljs-comment">查看文件内容；</span><br><span class="hljs-comment">w</span> <span class="hljs-comment">修改文件内容；</span><br><span class="hljs-comment">x</span> <span class="hljs-comment">执行运行文件</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">文件夹权限：</span><br><span class="hljs-comment">r</span> <span class="hljs-comment">列出目录中文件列表（仅限名字）；</span><br><span class="hljs-comment">w</span> <span class="hljs-comment">在目录中创建、删除文件（包括修改文件名字）；</span><br><span class="hljs-comment">x</span> <span class="hljs-comment">可以进入目录（不能查看目录内容）</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">可执行文件：</span><br><span class="hljs-comment">linux一般是用来启动某个应用程序或者服务程序的shell脚本（或类型的脚本）</span><br><span class="hljs-comment"></span><br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight inform7"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">修改权限：<br>chmod <span class="hljs-comment">[ugoa]</span><span class="hljs-comment">[+-=]</span><span class="hljs-comment">[rwx]</span> <span class="hljs-comment">[file]</span><br>a 表示ugo三者皆是<br>+ 表示增加权限；- 表示取消权限；= 表示设定权限<br><br>chmod abc (-R) <span class="hljs-comment">[file]</span><br>r=4，w=2，x=1<br>a、b、c各为一个数字,分别表示User、Group、Other的权限<br>如rwx属性是4+2+1=7；rw-属性是4+2=6；r-x属性是4+1=5<br>-R表示修改当前目录所有文件与子目录<br></code></pre></div></td></tr></tbody></table></figure><table><thead><tr><th align="center">命令</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">sudo chown xxuser xxfile</td><td align="center">修改文件所属者</td></tr><tr><td align="center">sudo chgrp xxgroup xxfile</td><td align="center">修改文件所属组</td></tr></tbody></table><h1 id="vi-vim编辑器"><a href="#vi-vim编辑器" class="headerlink" title="vi/vim编辑器"></a>vi/vim编辑器</h1><p>可以分为三种模式，命令模式（Command mode），输入模式（Insert mode）和底线命令模式（Last line mode）。</p><p><strong>命令模式：</strong><br>启动vi/vim，就进入了命令模式</p><table><thead><tr><th align="center">命令</th><th align="left">含义</th></tr></thead><tbody><tr><td align="center">i</td><td align="left">切换到输入模式</td></tr><tr><td align="center">:</td><td align="left">切换到底线命令模式</td></tr><tr><td align="center">x</td><td align="left">删除当前光标所在处字符</td></tr><tr><td align="center">dd</td><td align="left">删除光标所在的那一整行</td></tr><tr><td align="center">ndd</td><td align="left">n为数字，删除光标所在的向下n行</td></tr><tr><td align="center">d1G</td><td align="left">删除光标所在到第一行的所有数据</td></tr><tr><td align="center">dG</td><td align="left">删除光标所在到最后一行的所有数据</td></tr><tr><td align="center">yy</td><td align="left">复制游标所在的那一行</td></tr><tr><td align="center">nyy</td><td align="left">n为数字，复制光标所在的向下n行</td></tr><tr><td align="center">y1G</td><td align="left">复制游标所在行到第一行的所有数据</td></tr><tr><td align="center">yG</td><td align="left">复制游标所在行到最后一行的所有数据</td></tr><tr><td align="center">p/P</td><td align="left">将已复制的数据粘贴在光标下/上一行</td></tr></tbody></table><p><strong>编辑模式：</strong></p><table><thead><tr><th align="center">命令</th><th align="left">含义</th></tr></thead><tbody><tr><td align="center">i</td><td align="left">在命令模式下进入输入模式，从目前光标所在处输入</td></tr><tr><td align="center">a</td><td align="left">在命令模式下进入输入模式，从目前光标所在的下一个字符处开始输入</td></tr><tr><td align="center">o</td><td align="left">在命令模式下进入输入模式，在目前光标所在的下一行处输入新的一行</td></tr><tr><td align="center">r</td><td align="left">进入取代模式(Replace mode)，取代光标所在的那一个字符一次</td></tr><tr><td align="center">R</td><td align="left">进入取代模式(Replace mode)，一直取代光标所在的文字</td></tr><tr><td align="center">ESC</td><td align="left">退出输入模式，切换到命令模式</td></tr><tr><td align="center">u</td><td align="left">撤销上一次操作</td></tr></tbody></table><p><strong>底线命令模式：</strong></p><table><thead><tr><th align="center">命令</th><th align="left">含义</th></tr></thead><tbody><tr><td align="center">:</td><td align="left">在命令模式下进入底线命令模式</td></tr><tr><td align="center">set nu</td><td align="left">标出行号</td></tr><tr><td align="center">set nonu</td><td align="left">取消行号</td></tr><tr><td align="center">数字</td><td align="left">跳到该数字表示的行数</td></tr><tr><td align="center">/关键字</td><td align="left">查找字符，按 n 往后寻找下一个关键字</td></tr><tr><td align="center">w</td><td align="left">保存文件</td></tr><tr><td align="center">q</td><td align="left">退出程序</td></tr><tr><td align="center">q!</td><td align="left">不保存退出</td></tr></tbody></table><figure class="highlight gams"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gams">另外，Ubuntu中vi出现方向键显示ABCD，且后退键不能删除<br>解决方法：<br><br><span class="hljs-number">1.</span>修改vimrc.tiny文件<br>sudo su root                        <span class="hljs-comment">//进入root权限</span><br>vi /etc/vim/vimrc.tiny              <span class="hljs-comment">//修改文件</span><br><span class="hljs-keyword">set</span> compatible <span class="hljs-comment">-&gt; set nocompatible</span>  //改为非兼容模式<br><span class="hljs-keyword">set</span> <span class="hljs-comment">backspace=2</span>                     //加入这句，解决<span class="hljs-comment">backspace</span>键问题<br><br>2.安装vim <span class="hljs-comment">full</span>版本<br>sudo <span class="hljs-comment">apt-get remove vim-common</span>      //卸载旧版的<span class="hljs-comment">vi</span><br>sudo <span class="hljs-comment">apt-get install vim</span>            //安装<span class="hljs-comment">full</span>版的<span class="hljs-comment">vim</span><br><br>其中，我运行过程中出现了<br>E: dpkg 被中断，您必须手工运行<span class="hljs-comment"> sudo dpkg --configure -a</span> 解决此问题<br>用以下几行命令解决<br>sudo <span class="hljs-comment">rm</span> /var/<span class="hljs-comment">lib</span>/dpkg/<span class="hljs-comment">updates</span>/* <br>sudo apt-get update                 <span class="hljs-comment">//更新软件列表</span><br>sudo apt-get upgrade                <span class="hljs-comment">//更新软件</span><br></code></pre></div></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>实用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设置win10系统音量快捷键</title>
    <link href="/posts/f7c4f2aa.html"/>
    <url>/posts/f7c4f2aa.html</url>
    
    <content type="html"><![CDATA[<figure class="highlight mathematica"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mathematica"><span class="hljs-variable">Windows</span> <span class="hljs-variable">Registry</span> <span class="hljs-variable">Editor</span> <span class="hljs-built_in">Version</span> <span class="hljs-number">5.00</span><br><span class="hljs-punctuation">[</span><span class="hljs-type">HKEY_LOCAL</span><span class="hljs-type">_MACHINE</span>\<span class="hljs-variable">SYSTEM</span>\<span class="hljs-variable">CurrentControlSet</span>\<span class="hljs-built_in">Control</span>\<span class="hljs-variable">Keyboard</span> <span class="hljs-variable">Layout</span><span class="hljs-punctuation">]</span><br><span class="hljs-string">"Scancode Map"</span><span class="hljs-operator">=</span><span class="hljs-variable">hex</span><span class="hljs-operator">:</span><span class="hljs-number">00</span><span class="hljs-operator">,</span><span class="hljs-number">00</span><span class="hljs-operator">,</span><span class="hljs-number">00</span><span class="hljs-operator">,</span><span class="hljs-number">00</span><span class="hljs-operator">,</span><span class="hljs-number">00</span><span class="hljs-operator">,</span><span class="hljs-number">00</span><span class="hljs-operator">,</span><span class="hljs-number">00</span><span class="hljs-operator">,</span><span class="hljs-number">00</span><span class="hljs-operator">,</span><span class="hljs-number">03</span><span class="hljs-operator">,</span><span class="hljs-number">00</span><span class="hljs-operator">,</span><span class="hljs-number">00</span><span class="hljs-operator">,</span><span class="hljs-number">00</span><span class="hljs-operator">,</span><span class="hljs-number">2</span><span class="hljs-built_in">E</span><span class="hljs-operator">,</span><span class="hljs-variable">E0</span><span class="hljs-operator">,</span><span class="hljs-number">3</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span><span class="hljs-number">00</span><span class="hljs-operator">,</span><span class="hljs-number">30</span><span class="hljs-operator">,</span><span class="hljs-variable">E0</span><span class="hljs-operator">,</span><span class="hljs-number">3</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span><span class="hljs-number">00</span><span class="hljs-operator">,</span><span class="hljs-number">00</span><span class="hljs-operator">,</span><span class="hljs-number">00</span><span class="hljs-operator">,</span><span class="hljs-number">00</span><span class="hljs-operator">,</span><span class="hljs-number">00</span><br></code></pre></div></td></tr></tbody></table></figure><p>将以上文本保存为 reg 格式<br>重启电脑，F2 变为降低音量，F3 变为增大音量<br>如要恢复原本键位，将hex:后内容删除再次修改注册表重启即可。</p><p>其中，2E,E0表示音量降低；3C,00表示F2键；30,E0表示增大音量；3D,00表示F3键，若要改成其它键位，参照下表。</p><table><thead><tr><th align="center">功能键</th><th align="center">扫描码和ASCII码</th></tr></thead><tbody><tr><td align="center">F1</td><td align="center">3B,00</td></tr><tr><td align="center">F2</td><td align="center">3C,00</td></tr><tr><td align="center">F3</td><td align="center">3D,00</td></tr><tr><td align="center">F4</td><td align="center">3E,00</td></tr><tr><td align="center">F5</td><td align="center">3F,00</td></tr><tr><td align="center">F6</td><td align="center">40,00</td></tr><tr><td align="center">F7</td><td align="center">41,00</td></tr><tr><td align="center">F8</td><td align="center">42,00</td></tr><tr><td align="center">F9</td><td align="center">43,00</td></tr><tr><td align="center">F10</td><td align="center">44,00</td></tr><tr><td align="center">F11</td><td align="center">85,00</td></tr><tr><td align="center">F12</td><td align="center">86,00</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>实用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Win10</tag>
      
      <tag>adjust the volume</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows下载及安装</title>
    <link href="/posts/c371e681.html"/>
    <url>/posts/c371e681.html</url>
    
    <content type="html"><![CDATA[<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>进入<a href="https://www.microsoft.com/zh-cn/software-download/windows10">微软官网</a>下载Windows系统，但是不能直接下载ISO镜像。<br>可以按 F12 键调出开发人员工具窗口，选择左上角第二个图标，按 F5 刷新，即可以进入移动端显示的页面，直接下载ISO镜像。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>使用<a href="https://rufus.ie/zh/">Rufus</a>将系统文件写入U盘，启动电脑时进入BIOS，选择U盘方式，即可进入安装引导模式。</p><!-- # 激活使用 HWIDGen ，是一个数字永久激活工具，网上可以搜到汉化版本。 -->]]></content>
    
    
    <categories>
      
      <category>实用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web前端学习笔记2——CSS</title>
    <link href="/posts/d8ef0c96.html"/>
    <url>/posts/d8ef0c96.html</url>
    
    <content type="html"><![CDATA[<h1 id="推荐网站"><a href="#推荐网站" class="headerlink" title="推荐网站"></a>推荐网站</h1><p><a href="https://developer.mozilla.org/zh-CN/">MDN</a>：Web文档<br><a href="https://www.w3school.com.cn/">W3school</a>：与MDN类似<br><a href="https://caniuse.com/">Can I use</a>：查询CSS在浏览器中的支持程度</p><h1 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h1><ul><li>注释<br><code>/*  */</code><br>注意，CSS中没有<code>//</code>注释</li><li>HTML5新增语义化标签<br>article，section，aside，header，footer，nav，main，template</li><li>&lt;link&gt;<br><code>&lt;link rel="stylesheet" href="style.css" media="print"&gt;</code>引入一个外部样式表。<br>media 属性用于为不同的媒介类型规定不同的样式，所有浏览器都支持”screen”、”print”、”all” 的 media 属性。</li></ul><h1 id="容器标签"><a href="#容器标签" class="headerlink" title="容器标签"></a>容器标签</h1><table><thead><tr><th align="center">标签</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">span</td><td align="center">一个容器标签，用于包裹一段文本，便于给文本增加样式</td></tr><tr><td align="center">div</td><td align="center">一个通用容器标签，可以包裹任何内容，也可以容器直接互相包裹。</td></tr><tr><td align="center">text-align:center</td><td align="center">让内部元素水平居中</td></tr><tr><td align="center">margin:auto</td><td align="center">让容器本身水平居中</td></tr><tr><td align="center">background-color:black</td><td align="center">设定背景颜色</td></tr><tr><td align="center">font-size:30px</td><td align="center">设定字体大小</td></tr><tr><td align="center">color:white</td><td align="center">设定字体颜色</td></tr></tbody></table><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"color:lightslategray; margin:auto; width:500px;"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"text-align:center;"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"background-color:gray; color:white; font-size:24px"</span>&gt;</span>雪国<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>穿过县界长长的隧道，便是雪国<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span>。<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"color:#9F9F9F"</span>;&gt;</span>夜空下一片白茫茫。火车在信号所前停了下来。<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>一位姑娘从对面座位上站起身子，把岛村座位前的玻璃窗打开。<span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>一股冷空气卷袭进来。<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span>姑娘将身子探出窗外，仿佛向远方呼唤似地喊道：“站长先生，站长先生！”<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>一个把围巾缠到鼻子上、帽耳聋拉在耳朵边的男子，<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"color:rosybrown"</span>;&gt;</span>手拎提灯，踏着雪缓步走了过来。<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><p>显示效果：</p><div style="color:lightslategray; margin:auto; width:500px;">    <p style="text-align:center;">        <span style="background-color:gray; color:white; font-size:24px">雪国</span>    </p>    <p>        <b>穿过县界长长的隧道，便是雪国</b>。<span style="color:#9F9F9F" ;="">夜空下一片白茫茫。火车在信号所前停了下来。</span>    </p>    <p>        一位姑娘从对面座位上站起身子，把岛村座位前的玻璃窗打开。<b>一股冷空气卷袭进来。</b>姑娘将身子探出窗外，仿佛向远方呼唤似地喊道：“站长先生，站长先生！”    </p>    <p>        一个把围巾缠到鼻子上、帽耳聋拉在耳朵边的男子，<span style="color:rosybrown" ;="">手拎提灯，踏着雪缓步走了过来。</span>    </p></div><h1 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h1><h2 id="选择器类别"><a href="#选择器类别" class="headerlink" title="选择器类别"></a>选择器类别</h2><h3 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h3><p>一个空的div，默认宽度100%，高度为0<br>标签内部的叫行内样式，style内部的叫内部样式</p><ul><li>ID选择器（#box）<br>在页面中的id不允许重复，因此id选择器只能选择单个元素</li><li>类别选择器（.nav）<br>选择该class的多个元素</li><li>标签选择器（div）<br>选择对应的所有标签</li><li>通用选择器（*）<br>针对页面上所有的标签生效</li><li>属性选择器<table><thead><tr><th align="left">写法</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">[attr]</td><td align="left">存在某种属性</td></tr><tr><td align="left">[attr=value]</td><td align="left">属性值为 value 的</td></tr><tr><td align="left">[attr~=value]</td><td align="left">属性至少包含一个 value(必须是一个单词)</td></tr><tr><td align="left">[attr|=value]</td><td align="left">属性以 value 或者 value- 开头，一般用于语言</td></tr><tr><td align="left">[attr^=value]</td><td align="left">属性以 value 开头</td></tr><tr><td align="left">[attr$=value]</td><td align="left">属性以 value 结尾</td></tr><tr><td align="left">[attr*=value]</td><td align="left">属性至少包含一个 value</td></tr><tr><td align="left">[attr operator value i]</td><td align="left">添加一个用空格隔开的字母 i（或 I），匹配属性值时忽略大小写</td></tr><tr><td align="left">[attr operator value s]</td><td align="left">添加一个用空格隔开的字母 s（或 S），匹配属性值时区分大小写</td></tr></tbody></table></li></ul><h3 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h3><table><thead><tr><th align="left">位置伪类</th><th align="left">例子</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">:first-child</td><td align="left">p:first-child</td><td align="left">选择任意元素的第一个p子元素</td></tr><tr><td align="left">:last-child</td><td align="left">p:last-child</td><td align="left">选择任意元素的最后一个p子元素</td></tr><tr><td align="left">:only-child</td><td align="left">p:only-child</td><td align="left">选择所有仅有一个p子元素</td></tr><tr><td align="left">:nth-child(n)</td><td align="left">p:nth-child(n+2):nth-child(-n+5)</td><td align="left">选择第2个到第5个p子元素；n为odd时，是第奇数个元素，n为even时，是第偶数个元素</td></tr><tr><td align="left">:nth-last-child(n)</td><td align="left">p:nth-last-child(2)</td><td align="left">选择所有倒数第二个p子元素</td></tr><tr><td align="left">:first-of-type</td><td align="left">p:first-of-type</td><td align="left">选择的每个p元素是其父元素的第一个p元素</td></tr><tr><td align="left">:last-of-type</td><td align="left">p:last-of-type</td><td align="left">选择每个p元素是其母元素的最后一个p元素</td></tr><tr><td align="left">:nth-of-type(n)</td><td align="left">p:nth-of-type(2)</td><td align="left">选择所有p元素第二个为p的子元素</td></tr><tr><td align="left">:nth-last-of-type(n)</td><td align="left">p:nth-last-of-type(2)</td><td align="left">选择所有p元素倒数的第二个为p的子元素</td></tr><tr><td align="left">:not(selector)</td><td align="left">:not(a)</td><td align="left">选择所有a以外的元素</td></tr><tr><td align="left">:empty</td><td align="left">没有子元素的元素，子元素只可以是元素节点或文本（包括空格）</td><td align="left"></td></tr></tbody></table><table><thead><tr><th align="left">链接/交互伪类</th><th align="left">意义</th></tr></thead><tbody><tr><td align="left">:link</td><td align="left">未被激活的链接</td></tr><tr><td align="left">:visited</td><td align="left">访问者已访问过的链接</td></tr><tr><td align="left">:focus</td><td align="left">获得焦点(Tab键)的链接（处于活动状态也会获得焦点）</td></tr><tr><td align="left">:hover</td><td align="left">光标悬浮在链接上时</td></tr><tr><td align="left">:active</td><td align="left">光标按下时</td></tr></tbody></table><p>由于链接可能同时处于多种状态，按照link、visited、focus、hover、active（缩写为LVFHA）或者LVHFA来定义。</p><table><thead><tr><th align="left">其它伪类</th><th align="left">意义</th></tr></thead><tbody><tr><td align="left">::before</td><td align="left">通常用作装饰，没有交互的元素。通过content:””来为一个元素添加修饰性的内容。此元素默认为行内元素。</td></tr><tr><td align="left">::after</td><td align="left">和::before基本相同</td></tr><tr><td align="left">::selection</td><td align="left">应用于文档中被用户高亮的部分</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:target">:target</a></td><td align="left">选择一个ID与当前URL片段匹配的元素</td></tr></tbody></table><h3 id="组合器"><a href="#组合器" class="headerlink" title="组合器"></a>组合器</h3><table><thead><tr><th align="left">写法</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">元素1<code>␣</code>元素2</td><td align="left">后代选择器。择由元素1作为祖先元素的所有元素2（不要求是父子关系）</td></tr><tr><td align="left">元素1 &gt; 元素2</td><td align="left">子选择器。选择作为元素1的直接后代(子元素)的元素2</td></tr><tr><td align="left">元素1 ~ 元素2</td><td align="left">兄弟选择器。选择元素1之后所有同层级元素2。</td></tr><tr><td align="left">元素1 + 元素2</td><td align="left">相邻兄弟选择器。当两个元素都是属于同一个父元素的子元素，且元素2紧跟在元素1之后，则选择元素2。</td></tr></tbody></table><h2 id="选择器权重"><a href="#选择器权重" class="headerlink" title="选择器权重"></a>选择器权重</h2><table><thead><tr><th align="center">名称</th><th align="center">写法</th><th align="center">权重值</th></tr></thead><tbody><tr><td align="center">通用选择器</td><td align="center">*{…}</td><td align="center">0</td></tr><tr><td align="center">标签选择器</td><td align="center">div{…}</td><td align="center">1</td></tr><tr><td align="center">类选择器</td><td align="center">.nav{…}</td><td align="center">10</td></tr><tr><td align="center">ID选择器</td><td align="center">#box{…}</td><td align="center">100</td></tr><tr><td align="center">行内样式</td><td align="center">&lt;…style=”…”&gt;</td><td align="center">1000</td></tr><tr><td align="center">重要</td><td align="center">!important</td><td align="center">权重最大</td></tr></tbody></table><p>注：权重值仅作参考，并不表示实际值。<br>如果两个元素的权重完全相同，在样式表中后出现的一个会表示出来。<br>继承来的样式没有优先级。<br>选择器选择的范围越小越精确，优先级就越高。<br>display属性可以改变元素的显示角色：inline，block</p><h1 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h1><p>content-box:<br><img src="/image/post/content_box.jpg"><br>border-box:<br><img src="/image/post/border_box.jpg"></p><h1 id="CSS属性"><a href="#CSS属性" class="headerlink" title="CSS属性"></a>CSS属性</h1><h2 id="长度"><a href="#长度" class="headerlink" title="长度"></a>长度</h2><table><thead><tr><th align="center">绝对长度单位</th><th align="left">意义</th></tr></thead><tbody><tr><td align="center">in</td><td align="left">inch，英寸(=2.54cm)</td></tr><tr><td align="center">cm</td><td align="left">厘米</td></tr><tr><td align="center">mm</td><td align="left">毫米</td></tr><tr><td align="center">pt</td><td align="left">点，1/72 inch</td></tr><tr><td align="center">pc</td><td align="left">12点活字（12pt），1/6 inch</td></tr></tbody></table><p>大部分时候不准，取决于分辨率及系统设置，用的较少。<br>打印时比较准。</p><table><thead><tr><th align="center">相对长度单位</th><th align="left">意义</th></tr></thead><tbody><tr><td align="center">px</td><td align="left">像素</td></tr><tr><td align="center">em</td><td align="left">继承父元素的 font-size</td></tr><tr><td align="center">rem</td><td align="left">继承根元素（html）的 font-size。大多数浏览器中，默认值为16px。</td></tr><tr><td align="center">ex</td><td align="left">“x”字符的高度，有些浏览器会把它计算成0.5em</td></tr><tr><td align="center">ch</td><td align="left">“0”字符的宽度</td></tr><tr><td align="center">vw</td><td align="left">viewport width，1vw为视口宽度的1/100（包含滚动条）</td></tr><tr><td align="center">vh</td><td align="left">viewport height，1vw为视口高度的1/100（包含滚动条）</td></tr><tr><td align="center">vmax</td><td align="left">max(vw,vh)，视口宽或者高较大的那一个的1/100</td></tr><tr><td align="center">vmin</td><td align="left">min(vw,vh)，视口宽或者高较小的那一个的1/100</td></tr></tbody></table><h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2><table><thead><tr><th align="left">功能</th><th align="left">写法</th></tr></thead><tbody><tr><td align="left">文字颜色</td><td align="left">color: black;</td></tr><tr><td align="left">字体类型</td><td align="left">font-family: “微软雅黑”</td></tr><tr><td align="left">字体大小</td><td align="left">font-size: 30px;</td></tr><tr><td align="left">文字加粗</td><td align="left">font-weight: bold;</td></tr><tr><td align="left">文字倾斜</td><td align="left">font-style: italic;</td></tr><tr><td align="left">首行缩进</td><td align="left">text-indent: 60px/2em;</td></tr><tr><td align="left">水平对齐方式</td><td align="left">text-align(-last): center/justify;</td></tr><tr><td align="left">垂直对齐方式</td><td align="left">vertical-align:bottom/baseline/middle（只在行内元素或表格单元格中生效）</td></tr><tr><td align="left">行高</td><td align="left">line-height: 100px;</td></tr><tr><td align="left">宽度</td><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/width">width</a>:fit-content</td></tr><tr><td align="left">文字方向</td><td align="left">direction:ltr/rtl;</td></tr><tr><td align="left">控制每个单词之间的间隔</td><td align="left">word-spacing:1px;（单词间的间隔宽度是本身的空格加这个值，对中文无效）</td></tr><tr><td align="left">控制字母之间的间隔</td><td align="left">letter-spacing:1px;</td></tr><tr><td align="left">背景颜色与高度</td><td align="left">height: 100px; background-color: gray;</td></tr><tr><td align="left">文本修饰</td><td align="left">text-decoration: underline;</td></tr><tr><td align="left">文字阴影</td><td align="left">text-shadow:水平偏移 垂直偏移 模糊半径 颜色,下一组;</td></tr><tr><td align="left">盒阴影</td><td align="left">box-shadow:水平偏移 垂直偏移 模糊半径 扩散半径 颜色,下一组;（两个半径都可以不写）</td></tr><tr><td align="left">元素中的空白</td><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/white-space">white-space</a></td></tr><tr><td align="left">单词内断行</td><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/word-break">word-break</a></td></tr></tbody></table><table><thead><tr><th align="left">字体</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">font-style: italic;</td><td align="left">斜体</td></tr><tr><td align="left">font-weight: bold;</td><td align="left">加粗</td></tr><tr><td align="left">font-family: arial,sans-serif;</td><td align="left">字体种类</td></tr><tr><td align="left">font-size: 20px;</td><td align="left">字体大小</td></tr><tr><td align="left">line-height: 30px;</td><td align="left">行高</td></tr><tr><td align="left">font: italic bold 20px/35px arial,sans-serif,”微软雅黑”;</td><td align="left">斜体，加粗，字号大小/行高，默认字体，备用字体，备用字体</td></tr></tbody></table><h2 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h2><table><thead><tr><th align="left">边框</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">border-width</td><td align="left">边框宽度</td></tr><tr><td align="left">border-style</td><td align="left">边框样式</td></tr><tr><td align="left">border-color</td><td align="left">边框颜色</td></tr><tr><td align="left">border: 1px solid #009A4F;</td><td align="left">宽度，样式，颜色</td></tr><tr><td align="left">border: 2px dashed;</td><td align="left">颜色默认为黑色，其它两属性不可省略</td></tr><tr><td align="left">box-sizing: border-box</td><td align="left">默认值是”cotent-box”。border-box表示设置的width包含border和padding的值。</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-radius">border-radius</a></td><td align="left">圆角</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/outline">outline</a></td><td align="left">轮廓属性</td></tr></tbody></table><table><thead><tr><th align="left">边距</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">margin-top</td><td align="left">上边距</td></tr><tr><td align="left">margin-right</td><td align="left">右边距</td></tr><tr><td align="left">margin-bottom</td><td align="left">下边距</td></tr><tr><td align="left">margin-left</td><td align="left">左边距</td></tr><tr><td align="left">margin: 10px 15px 10px 15px;</td><td align="left">上，右，下，左边距</td></tr><tr><td align="left">margin: 10px 15px 15px;</td><td align="left">上，左右，下</td></tr><tr><td align="left">margin: 10px 15px;</td><td align="left">上下，左右</td></tr><tr><td align="left">margin: 10px;</td><td align="left">上下左右</td></tr></tbody></table><table><thead><tr><th align="left">填充</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">padding-top</td><td align="left">上填充</td></tr><tr><td align="left">padding-right</td><td align="left">右填充</td></tr><tr><td align="left">padding-bottom</td><td align="left">下填充</td></tr><tr><td align="left">padding-left</td><td align="left">左填充</td></tr><tr><td align="left">padding: 10px 15px 10px 15px;</td><td align="left">上，右，下，左填充</td></tr><tr><td align="left">padding: 10px 15px 15px;</td><td align="left">上，左右，下</td></tr><tr><td align="left">padding: 10px 15px;</td><td align="left">上下，左右</td></tr><tr><td align="left">padding: 10px;</td><td align="left">上下左右</td></tr></tbody></table><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><table><thead><tr><th align="left">背景</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">background-color</td><td align="left">背景色</td></tr><tr><td align="left">background-image</td><td align="left">背景图片url()</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/background-repeat">background-repeat</a></td><td align="left">背景平铺方式</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/background-size">background-size</a></td><td align="left">cover图片由无穷大缩小到正好覆盖元素；contain图片由无穷小放大到正好被元素包围</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/background-position">background-position</a></td><td align="left">图片初始位置</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/background-attachment">background-attachment</a></td><td align="left">fixed图片固定；scroll背景不会随着元素的内容滚动；local背景会随着元素的内容滚动</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/object-fit">object-fit</a></td><td align="left">背景适应到其使用的高度和宽度确定的框</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/background-origin">background-origin</a></td><td align="left">背景的原点位置。border-box，padding-box，content-box</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/background-clip">background-clip</a></td><td align="left">只显示里面的背景。border-box，padding-box，content-box，text</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/background">background</a></td><td align="left">背景</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/background-blend-mode">background-blend-mode</a></td><td align="left">背景颜色混合</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/isolation">isolation</a></td><td align="left">背景混合时独立</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/clip-path">clip-path</a></td><td align="left">使用裁剪方式创建元素的可显示区域</td></tr></tbody></table><h2 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h2><table><thead><tr><th align="left">颜色</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">color: white;</td><td align="left"></td></tr><tr><td align="left">color: rgba(255,151,0,0.1);</td><td align="left"></td></tr><tr><td align="left">color: #FF9700</td><td align="left">rgb转化成16进制</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/linear-gradient">linear-gradient()</a></td><td align="left">线性渐变</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/radial-gradient">radial-gradient</a></td><td align="left">辐射渐变</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/conic-gradient">conic-gradient</a></td><td align="left">圆锥渐变</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/mix-blend-mode">mix-blend-mode</a></td><td align="left">颜色混合</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/filter">filter</a></td><td align="left">滤镜</td></tr></tbody></table><h2 id="缓动"><a href="#缓动" class="headerlink" title="缓动"></a>缓动</h2><table><thead><tr><th align="left">属性</th><th align="left">意义</th></tr></thead><tbody><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/transition-property">transition-property</a></td><td align="left">过渡属性</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/transition-duration">transition-duration</a></td><td align="left">过渡时间</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/transition-timing-function">transition-timng-function</a></td><td align="left"><a href="https://developers.google.com/web/fundamentals/design-and-ux/animations/the-basics-of-easing?hl=zh-cn">缓动</a>：linear线性变化，steps [number]跳跃变化，ease-out缓出，ease-in缓进，ease-in-out缓进缓出。</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/transition-delay">transition-delay</a></td><td align="left">延迟时间</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/transition">transition</a></td><td align="left"><code>&lt;transition-property&gt; | &lt;transition-duration&gt; | &lt;transition-timng-function&gt; | &lt;transition-delay&gt;</code></td></tr></tbody></table><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><table><thead><tr><th align="left">属性</th><th align="left">意义</th></tr></thead><tbody><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/animation-name">animation-name</a></td><td align="left">动画名称</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/animation-duration">animation-duration</a></td><td align="left">一个动画周期的时长</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/animation-timing-function">animation-timing-function</a></td><td align="left">在每一动画周期中执行的节奏</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/animation-delay">animation-delay</a></td><td align="left">动画延迟</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/animation-iteration-count">animation-iteration-count</a></td><td align="left">播放次数</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/animation-direction">animation-direction</a></td><td align="left">播放方向</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/animation-fill-mode">animation-fill-mode</a></td><td align="left">动画在执行之前和之后如何将样式应用于其目标</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/animation-play-state">animation-play-state</a></td><td align="left">动画是否运行或者暂停</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/animation">animation</a></td><td align="left"><code>@keyframes name | duration | timing-function | delay | iteration-count | direction | fill-mode | play-state</code></td></tr></tbody></table><h2 id="变换"><a href="#变换" class="headerlink" title="变换"></a>变换</h2><table><thead><tr><th align="left">属性</th><th align="left">意义</th></tr></thead><tbody><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform">transform</a></td><td align="left">旋转，缩放，倾斜或平移给定元素</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform-function">transform-function</a></td><td align="left">对元素的显示做变换</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform-origin">transform-origin</a></td><td align="left">元素变形的原点</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform-function/rotate">rotate()</a></td><td align="left">旋转</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform-function/translate">translate()</a></td><td align="left">(translateX,translateY)平移，是自己的宽高百分比，而不是包含块的百分比</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform-function/scale">scale()</a></td><td align="left">缩放</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform-function/skew">skew()</a></td><td align="left">倾斜</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform-function/matrix">matrix()</a></td><td align="left">由指定的 6 个值组成的 2D 变换矩阵</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/perspective">perspective</a></td><td align="left">景深</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform-function/translate3d">translate3d()</a></td><td align="left">3d变换</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform-style">transform-style</a></td><td align="left">preserve-3d/flat</td></tr></tbody></table><p>hover相关：<br>hover之前的transform属性不会和hover时的transform同时起效。<br>若hover之前的transform和之后的属性和顺序相同，会做指定变换。若不相同，会沿着最短距离直接到达hover状态。</p><h1 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h1><h2 id="水平布局"><a href="#水平布局" class="headerlink" title="水平布局"></a>水平布局</h2><p>块元素的水平布局：<br>元素的宽度不受内容的影响，仅受以下规则的影响。</p><ol><li>水平方向的七个属性（margin-left、border-left、padding-left、width、padding-right、border-right、margin-right）之和要等于包含块的content-box宽度</li><li>width、margin-left、margin-right可以取值为auto。其余属性必须设置为特定值，或者默认宽度为0。若这3个属性都设置为非auto的某个值，这时格式化属性过分受限（overconstrained），总会把margin-right强制为auto。</li><li>margin可能为负。margin-left的计算结果不能为负，但可以声明为负值。</li><li>关于auto</li></ol><ul><li>0个auto：margin-right 被重置为 auto</li><li>1个auto：计算出它</li><li>2个auto：<br>2个都在 margin 上，则两边 margin 相同。<br>其中1个在 width 上，则 width 占据尽量多的空间，另一个 auto 为0。<br>3个auto：width 占据尽量多的空间，margin-l/r 都为0</li></ul><ol start="5"><li>替换元素</li></ol><ul><li>替换元素用<code>style="dispalay:block;</code>可将其变成块级元素。</li><li>若width为auto，元素的宽度是内容的固有宽度。</li><li>若设置了width，height保持auto，则height也会成比例变化。</li></ul><ol start="6"><li>应用<figure class="highlight css"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-id">#main</span> {<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto; <br>}<br></code></pre></div></td></tr></tbody></table></figure>设置块级元素的 width 可以防止它从左到右撑满整个容器。设置左右外边距为 auto 来使其水平居中。<br>唯一的问题是，当浏览器窗口比元素的宽度还要窄时，浏览器会显示一个水平滚动条来容纳页面，文本不会自动换行。<br>这时使用 max-width 替代 width 可以使浏览器更好地处理小窗口的情况。</li></ol><h2 id="垂直格式化"><a href="#垂直格式化" class="headerlink" title="垂直格式化"></a>垂直格式化</h2><ol><li>若指定高度大于显示内容所需高度：<code>&lt;p style="height: 10em;&gt;</code>，多余的高度会好像有额外的内边距一样。<br>若指定高度小于显示内容所需高度：<code>&lt;p style="height: 3em;&gt;</code>，浏览器会提供某种方法来查看所有内容，而不是增加元素框的边框。也可用<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/overflow">overflow</a>指定查看方式。</li><li>有7个相关的属性：margin-top、border-top、padding-top、height、padding-bottom、border-bottom、margin-bottom。</li><li>其中，height、margin-top、border-bottom可设置成auto。在正常流中一个块元素的margin-top或margin-bottom设置成auto，会自动计算成0。</li><li>合并垂直外边距，两个外边距中较小的一个会被较大的一个合并。（只应用与外边距，如果元素有内边距和边框，它们不会被合并）</li><li>正负外边距合并。若两个margin都是负数，取较小的数；两个都是正数，取较大的数；一个正数一个负数，相加。</li></ol><h2 id="行内布局"><a href="#行内布局" class="headerlink" title="行内布局"></a>行内布局</h2><ol><li><p><strong>非替换元素的padding、border、margin对行内元素或其生成的框没有垂直效果。</strong></p></li><li><p>行间距（leading）是font-size和line-height值之差。<br>对于非替换元素，元素行内框的高度等于line-height的值。对于替换元素，行内框的高度等于内容区的高度，因为行间距不应用到替换元素。</p></li><li><p>行框包含该行出现的行内框的最低点和最小框。</p></li><li><p>行内布局基本上只有与line-height和<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/vertical-align">vertical-align</a>(垂直对齐)有关。</p></li><li><p>行内块<code>inline-block</code></p><figure class="highlight css"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.box2</span> {<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">1em</span>;<br>}<br></code></pre></div></td></tr></tbody></table></figure><p>行内元素通过使用<code>display: inline-block;</code>可变成行内块元素。<br>它既有块元素的部分特性（支持width/height/maigin），又有行内元素的部分特性（不换行）。<br>有时可取代 float 元素。</p></li><li><p>用<code>inline-block</code>布局时，需要注意</p><ul><li>vertical-align 属性会影响到 inline-block 元素（默认为基线对齐 vertical-block：baseline），可能会把它的值设置为 top 或 bottom。</li><li>需要设置每一列的宽度。</li><li>如果HTML源代码中元素之间有空格，那么列与列之间会产生空隙。</li></ul></li><li><p>解决行内水平布局之间有空格的问题</p><ol><li>直接将HTML代码行内元素之间的换行去掉</li><li>设置整个块元素 font-size: 0; ，设置行内元素为 font-size: initial; ，将最后一行元素设置为 margin-bottom :0;</li><li>用 word-spacing（不推荐，因为要量出像素值）</li></ol></li></ol><h2 id="定位布局"><a href="#定位布局" class="headerlink" title="定位布局"></a>定位布局</h2><p><strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/position">positon</a></strong></p><ul><li>static不定位<br>元素的默认定位属性。<br>位置看display属性即可。<br>这个值可以用来给已定位的元素重置为不定位。</li><li>relative相对定位<br>相对于自身本来的位置定位。<br>无论是否进行移动，元素仍然占据原来的空间。因此，移动元素会导致它覆盖其它框。</li><li>fixed固定<br>被移出常规流。<br>元素相对于窗口定位，不随窗口内容的滚动而滚动。<br>定位的时候定的是元素的margin-box，所以也是m-b的边与定位box的边对齐。<br>元素水平和垂直方向上分别的9个属性之和要等于定位box对应方向上的尺寸。<br>存在过分受限的情况时，重置右方或下方的margin。</li><li>abosolute绝对定位<br>被移出常规流。<br>元素的定位box是最近的定位祖先（position不为static的祖先）的padding-box。<br>其它与fixed一样。<br>【relative和absolute结合使用。可将父级元素设为relative，此时再设置absolute属性即可不再参照浏览器定位，而参照父级元素定位，更加方便。】</li><li>sticky粘黏定位<br>可以认为是融合了fixed定位和relative定位方式。<br>元素的四周都在窗口以内的时候，看起来就在常规流里。<br>当元素的某一边从窗口的对应边离开时，触发该边的fixed定位以及该边的方位距离的生效。<br>而元素本身必须出现在其包含块内部，如果包含块要离开窗口，也会把它带走。</li></ul><p><strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/z-index">z-index</a></strong></p><ul><li>该属性只能用在定位元素上。</li><li>只能为整数。范围是 -2147483648 到 2147483647。</li><li>当元素之间重叠的时候，z-index 较大的元素会覆盖较小的元素在上层进行显示。</li><li>当 z-index 相同时，元素的叠放顺序为其在dom中的出现顺序，出现的越晚，叠放的越高。</li><li>当 z-index 为负的时候，元素会出现在常规流元素的下方。</li><li>如果父子元素都定位的话，子元素无法通过z-index跑到父元素的下方。</li></ul><p>基本上，如果页面中有元素发生了明显的重叠，那么肯定要用到定位。</p><h2 id="表布局"><a href="#表布局" class="headerlink" title="表布局"></a>表布局</h2><ul><li>border-collapse：<br>collapse相邻的单元格共用同一条边框。<br>separate默认值。每个单元格拥有独立的边框。</li><li>hover一行/列：<br>行：<code>tr:hover{background-color: cornflowerblue;}</code><br>列：不能直接用:hover属性。先在<code>&lt;td&gt;&lt;/td&gt;</code>间加上<code>&lt;span&gt;&lt;/span&gt;</code>,设置<code>td{position:relative;}</code>，再设置<code>td:hover span{position:absolute;}</code>使之相对 td 定位，再加上选定范围以及定位位置<code>width:100%; height:9999px top:-9999px; left:0; background-color:plum; z-index、:-10;</code>，最后将表格的<code>overflow: hidden;</code>。</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>    table {<br>      border-collapse: collapse;<br>      overflow: hidden;<br>    }<br><br><span class="css">    <span class="hljs-selector-tag">tr</span><span class="hljs-selector-pseudo">:hover</span> {</span><br>      background-color: cornflowerblue;<br>    }<br><br>    td {<br>      position: relative;<br>    }<br><br>    /* td:hover {<br>      background-color: plum;<br>    } */<br><br><span class="css">    <span class="hljs-selector-tag">td</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-tag">span</span> {</span><br>      position: absolute;<br>      width: 100%;<br>      height: 9999px;<br>      background-color: plum;<br>      top: -9999px;<br>      left: 0;<br>      z-index: -10;<br>    }<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">"1"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">col</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">col</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">col</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>4<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>5<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>6<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>7<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>8<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>9<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>10<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>11<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>12<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>13<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>14<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>15<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>16<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>17<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>18<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><ul><li>表格自适应宽度<br>更改第一个单元格的内容，它的单元格能自适应它自己内容的长度。<figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>    * {<br>      background-color: rgba(0, 0, 0, 0.1);<br>      box-shadow: 0 0 1px blue;<br>    }<br><br>    table {<br>      width: 100%;<br>    }<br><br><span class="css">    <span class="hljs-selector-tag">td</span><span class="hljs-selector-pseudo">:first-child</span> {</span><br>      width: 1px;<br>      white-space: nowrap;<br>    }<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>我可是很灵活的！<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>fffffffff<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure></li></ul><h2 id="浮动布局"><a href="#浮动布局" class="headerlink" title="浮动布局"></a>浮动布局</h2><ul><li>浮动元素也会生成块框。<br>常规流中的块元素感知不到它，行内元素感知得到它并且避开它来摆放。<br>所以说浮动元素同时处于流内和流外。</li><li>浮动元素在排列时，只参考前一个元素位置。<br>浮动元素不会覆盖文字/图片/表单内容。</li><li>清除浮动：某个块框通过向下移动，使其两边没有浮动元素。<br>clear: left/right/both;（只对块级元素起作用）</li></ul><h3 id="触发BFC"><a href="#触发BFC" class="headerlink" title="触发BFC"></a>触发<a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context">BFC</a></h3><ul><li>作用<br>子元素的margin不会跑出去<br>它会包住自己所有的浮动后代（即闭合浮动）<br>自动变窄以避开与浮动元素的重叠</li><li>方法<br><code>dispalay: inline-block;</code><br><code>dispalay: table-cell/table-caption;</code><br><code>dispalay: flow-root;</code><br><code>position: absolute/fixed;</code><br><code>overflow: hidden;（除了visible的值）</code><br><code>float: left;(不是none)</code></li></ul><p>为父级元素 添加 .clearfix 类可以很容易地清除内部的浮动。还可以作为 mixin 使用。</p><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"clearfix"</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight css"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"> <span class="hljs-comment">/* Mixin itself */</span><br><span class="hljs-keyword">@mixin</span> clearfix() {<br>  &amp;<span class="hljs-selector-pseudo">::after</span> {<br>    <span class="hljs-attribute">display</span>: block;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">""</span>;<br>    <span class="hljs-attribute">clear</span>: both;<br>  }<br>}<br><br> <span class="hljs-comment">/* 作为 mixin 使用 */</span><br><span class="hljs-selector-class">.element</span> {<br>  @include clearfix;<br>}<br></code></pre></div></td></tr></tbody></table></figure><h2 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox">flex</a>布局</h2><p>display： flex/inline-flex</p><ul><li><p>主轴<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-direction">flex-direction</a> :row/row-reverse/column/column-reverse</p></li><li><p>交叉轴<br>交叉轴垂直于主轴，所以如果flex-direction (主轴) 设成了 row 或者 row-reverse，交叉轴的方向就是沿着列向下的。<br>如果主轴方向设成了 column 或者 column-reverse，交叉轴就是水平方向。</p></li><li><p>折行<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-wrap">flex-wrap</a>: nowrap/wrap/wrap-reverse;</p></li><li><p>简写<br>flex-flow: <code>&lt;flex-direction&gt; || &lt;flex-wrap&gt;</code></p><hr></li><li><p>一行或一列的元素在主轴方向上的摆放<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/justify-content">justify-content</a>: center/start/end/space-around/space-between;</p></li><li><p>行或列在交叉轴方向上的摆放<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/align-content">align-content</a>: stretch/baseline/start/end/center;</p></li><li><p>为所有盒中的项目定义了默认的 justify-self<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/justify-items">justify-items</a>: stretch/start/end/center;</p></li><li><p>行里的元素在交叉轴方向上的垂直对齐<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/align-items">align-items</a>: stretch/center/start/end;</p><hr></li><li><p>设置在子元素上</p><ul><li>某个元素自己的排列方式<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/align-self">align-self</a>: stretch/center/start/end;<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/justify-self">justify-self</a>: stretch/center/start/end;</li><li>flex子元素的展示顺序<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/order">order</a>: 5</li></ul></li></ul><hr><ul><li>每一行主轴方向上多余的空间分配权重，这个属性不会改变元素在不同行的分布<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-grow">flex-grow</a></li><li>每一行主轴方向上空间不够时元素的收缩系数，收缩权重还要拿flex-shrink乘以元素的宽度或高度，收缩只会发生在不wrap的情况下<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-shrink">flex-shrink</a></li><li>在主轴方向上的初始大小<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-basis">flex-basis</a><br>相当于width或者height，当主轴水平时相当于width，当主轴垂直时相当于height。<br>如果width/height一起用，它为auto，则width/height生效；不为auto，它生效。<figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 简例 --&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>flex_basis_demo<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>    * {<br>      background-color: rgba(0, 0, 0, 0.1);<br>      box-shadow: 0 0 1px red;<br>    }<br><br><span class="css">    <span class="hljs-keyword">@media</span> (<span class="hljs-attribute">max-width:</span> <span class="hljs-number">600px</span>) {</span><br>      section {<br>        flex-direction: column;<br>      }<br>    }<br><br>    section {<br>      display: flex;<br>      height: 100px;<br>    }<br><br>    div {<br>      flex-basis: 70%;<br>    }<br><br>    span {<br>      flex-basis: 30%;<br>    }<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>a<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>b<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure></li><li>简写<br>flex: &lt;flex-grow&gt; | &lt;flex-shrink&gt; | &lt;flex-basis&gt;<hr></li></ul><p>flex布局可以实现双向居中<br>flex父元素的匿名文本也将成为一个flex-item<br>flex子元素的margin auto在可能的情况下将会占据剩余的空间</p><h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><h2 id="计数器"><a href="#计数器" class="headerlink" title="计数器"></a>计数器</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/counter-increment">counter-increment</a></p><figure class="highlight css"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-comment">/*  对段落进行编号  */</span><br><span class="hljs-comment">/*  每遇到一个这样元素的，计数器变量para加1  */</span><br><span class="hljs-selector-tag">p</span> {<br>  <span class="hljs-attribute">counter-increment</span>: para;<br>}<br><span class="hljs-selector-tag">h1</span> {<br>  <span class="hljs-attribute">counter-reset</span>: para;<br>}<br><span class="hljs-selector-tag">P</span><span class="hljs-selector-pseudo">::before</span> {<br>  <span class="hljs-attribute">content</span>: <span class="hljs-built_in">counter</span>(para) <span class="hljs-string">". "</span>;<br>}<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight css"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-comment">/*  二进制按钮  */</span><br><span class="hljs-selector-attr">[name=<span class="hljs-string">"b16"</span>]</span><span class="hljs-selector-pseudo">:checked</span>{<br><span class="hljs-attribute">counter-increment</span>: bin <span class="hljs-number">16</span>;<br>}<br><span class="hljs-selector-attr">[name=<span class="hljs-string">"b8"</span>]</span><span class="hljs-selector-pseudo">:checked</span>{<br><span class="hljs-attribute">counter-increment</span>: bin <span class="hljs-number">8</span>;<br>}<br><span class="hljs-selector-attr">[name=<span class="hljs-string">"b4"</span>]</span><span class="hljs-selector-pseudo">:checked</span>{<br><span class="hljs-attribute">counter-increment</span>: bin <span class="hljs-number">4</span>;<br>}<br><span class="hljs-selector-attr">[name=<span class="hljs-string">"b2"</span>]</span><span class="hljs-selector-pseudo">:checked</span>{<br><span class="hljs-attribute">counter-increment</span>: bin <span class="hljs-number">2</span>;<br>}<br><span class="hljs-selector-attr">[name=<span class="hljs-string">"b1"</span>]</span><span class="hljs-selector-pseudo">:checked</span>{<br><span class="hljs-attribute">counter-increment</span>: bin <span class="hljs-number">1</span>;<br>}<br><br><span class="hljs-selector-tag">span</span><span class="hljs-selector-pseudo">::after</span>{<br><span class="hljs-attribute">counter</span>: <span class="hljs-built_in">counter</span>(bin);<br>}<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight css"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-comment">/*  对列表进行编号  */</span><br><span class="hljs-selector-tag">ul</span>{<br><span class="hljs-attribute">list-style-type</span>: none;<br>}<br><span class="hljs-selector-tag">li</span>{<br><span class="hljs-attribute">counter-increment</span>: a;<br>}<br><span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">::before</span>{<br><span class="hljs-attribute">content</span>: <span class="hljs-built_in">counters</span>(a, <span class="hljs-string">"."</span>) <span class="hljs-string">"."</span><br>}<br><span class="hljs-selector-tag">ul</span>{<br><span class="hljs-attribute">counter-reset</span>: a;<br>}<br></code></pre></div></td></tr></tbody></table></figure><h2 id="媒体设置"><a href="#媒体设置" class="headerlink" title="媒体设置"></a>媒体设置</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/@media">@media</a><br>设置宽度不同时显示不同，可适应各种不同的设备。<br>@media (min-width:300px) and (max-width: 600px){}</p><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/@font-face">@font-face</a></p><figure class="highlight css"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-comment">/*  指定字体  */</span><br><span class="hljs-keyword">@font-face</span>{<br>  <span class="hljs-attribute">font-family</span>: AAA;<br>  <span class="hljs-attribute">src</span>: <span class="hljs-built_in">url</span>();<br>}<br><span class="hljs-comment">/*  使用字体  */</span><br><span class="hljs-selector-tag">div</span>{<br>  <span class="hljs-attribute">font-family</span>: AAA;<br>}<br><br><span class="hljs-comment">/*  使用字体图标  */</span><br><span class="hljs-selector-class">.star</span> {<br>  <span class="hljs-attribute">font-family</span>: FontAwesome;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;<br>}<br><span class="hljs-selector-class">.star</span><span class="hljs-selector-pseudo">::before</span> {<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">"\f006"</span>;<br>}<br></code></pre></div></td></tr></tbody></table></figure><p>图标选择：</p><ul><li><p>图标方案<br>直接用图片<br>每个小图片都得单独下载，流量增大<br>每次使用都要书写图片的地址<br>可以用动图<br>图标放大都会不清晰</p></li><li><p>css sprite<br>所有图片都在一个文件里，只下载一次，节省流量<br>需要使用背景相关的属性裁剪出大图中的小图<br>不能用动图<br>不好维护<br>图标放大都会不清晰</p></li><li><p>字体图标<br>矢量图，放大不失真<br>由于图标其实是文字，所以可以随意改变颜色<br>但由于一个图标是一个字，颜色单一<br>所有的符号形状在一个字体文件里，体积小，省流量<br>不好维护<br>图标也是不能动的<br>不能是彩色的</p><ul><li>SVG图标：<br>图标可以是彩色的<br>还可以是带动画的</li></ul></li></ul><h1 id="其它布局属性"><a href="#其它布局属性" class="headerlink" title="其它布局属性"></a>其它布局属性</h1><h2 id="多列布局"><a href="#多列布局" class="headerlink" title="多列布局"></a>多列布局</h2><table><thead><tr><th align="left">属性</th><th align="left">意义</th></tr></thead><tbody><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/column-count">column-count</a></td><td align="left">元素的列数</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/column-width">column-width</a></td><td align="left">每列的宽度</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/columns">columns</a></td><td align="left"><code>&lt;'column-width'&gt; || &lt;'column-count'&gt;</code></td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/column-fill">column-fill</a></td><td align="left">如何对列进行填充</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/column-gap">column-gap</a></td><td align="left">元素列之间的间隔</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/column-rule">column-rule</a></td><td align="left"><code>&lt;'column-rule-width'&gt; || &lt;'column-rule-style'&gt; || &lt;'column-rule-color'&gt;</code></td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/break-inside">break-inside</a></td><td align="left">多列布局页面下的内容盒子如何中断【更符合想要效果h1,h2{<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/column-span">column-span</a>: all;}】</td></tr></tbody></table><h2 id="文字换行"><a href="#文字换行" class="headerlink" title="文字换行"></a>文字换行</h2><table><thead><tr><th align="left">属性</th><th align="left">意义</th></tr></thead><tbody><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/text-overflow">text-overflow</a></td><td align="left">ellipsis;文字溢出排版</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/hyphens">hyphens</a></td><td align="left">连字符</td></tr><tr><td align="left">&amp;shy;</td><td align="left">Soft hyphen</td></tr></tbody></table><h2 id="手机布局"><a href="#手机布局" class="headerlink" title="手机布局"></a>手机布局</h2><p>viewport声明：<code>&lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;</code><br>只被手机浏览器识别。不被电脑浏览器识别。<br>它的作用是设定手机浏览器使用多宽的窗口（即初始包含块的宽度）来渲染页面。<br>手机上页面一旦渲染，窗口的大小是不再发生变化的，双指缩放也不会让页面重新布局。<br>手机在特定宽度的浏览器上渲染完成后会将结果正好铺满手机屏幕。</p><p>所有的手机都支持viewport的width写成device-width，该值在不同手机上不一样，典型的大小是360，415，425，390，320。<br>一般来讲屏幕越大device-width实际生效的值也越大。安卓5.0以上支持将viewport的width写成具体数值，这样一来开发者就相当于面对了相同宽度的手机浏览器窗口。</p><p>针对不同的网站设计，需要使用不同的方案：</p><ul><li>不同手机上都是等比的，如小米商城移动版。</li></ul><ol><li>如果网站用户的浏览器都支持将viewport的width写成具体数值，那么就直接将width写成视觉稿的宽度（不用带单位），然后整个页面就用从视觉稿里量出来的数据配上px单位。</li><li>如果网站用户的浏览器有比较旧的，不支持将viewport的width写成数值，而只能写成device-width。<br>我们想要的效果其实就是视觉稿宽度就是屏幕宽度<br>假设视觉稿宽度为X，则Xrem = 100vw<br>于是 html {font-size: calc(100vw / X)}<br>开始时使用视觉稿中量出来的尺寸配上rem单位即可。<ol><li>但是，由于Chrome浏览器默认不支持小12px的字号，所以html元素的字号放大100倍，视觉稿中测量出来的数值则要缩小100倍再加上rem单位。</li><li>更旧的浏览器甚至不支持calc/vw，所以使用js读取出窗口宽度的px单位的长度，然后计算出结果并设置到html元素上。</li></ol></li></ol><ul><li><p>对于内容更多以文字为主，没有太多需要保持比例的布局的网站，如github的首页。<br>那么直接将viewport设置为device-width，让不同手机有不同窗口宽度，使用流式布局风格+media query来实现。</p></li><li><p>对于布局想要保持比例，但文字内容跟屏幕大小呈正相关的网站。<br>可以使用device-width，让文字保持默认大小即16px，那么空间越大字就越多。但页面的布局及元素的大小，依然使用rem等比缩放布局。</p></li></ul><h1 id="回流和重绘"><a href="#回流和重绘" class="headerlink" title="回流和重绘"></a>回流和重绘</h1><h2 id="回流-reflow-relayout"><a href="#回流-reflow-relayout" class="headerlink" title="回流(reflow,relayout)"></a>回流(reflow,relayout)</h2><ul><li>定义<br>浏览器为了重新渲染部分或全部的文档而重新计算文档中元素的位置和几何结构的过程。简单来说就是当页面布局或者几何属性改变时就需要reflow。</li><li>触发回流<br>盒模型相关的属性: width，height，margin，display，border，etc<br>定位属性及浮动相关的属性: top,position,float，etc<br>改变节点内部文字结构: text-align, overflow, font-size, line-height, vertival-align，etc<br>除开这三大类的属性变动会触发reflow，以下情况也会触发：<br>调整窗口大小<br>样式表变动<br>元素内容变化，尤其是输入控件<br>dom操作<br>css伪类激活<br>计算元素的offsetWidth、offsetHeight、clientWidth、clientHeight、width、height、scrollTop、scrollHeight</li></ul><p>尽量不使用回流，如果要用的话，尽量把回流限制在一定范围之内。</p><h2 id="重绘-repaint"><a href="#重绘-repaint" class="headerlink" title="重绘(repaint)"></a>重绘(repaint)</h2><ul><li>定义<br>当页面中的元素只需要更新样式风格不影响布局，这个过程就是重绘。</li><li>触发重绘<br>页面中的元素更新样式风格相关的属性时，background，color，cursor，visibility，etc</li></ul>]]></content>
    
    
    <categories>
      
      <category>web前端学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>front-end</tag>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web前端学习笔记1——HTML</title>
    <link href="/posts/41e65d2c.html"/>
    <url>/posts/41e65d2c.html</url>
    
    <content type="html"><![CDATA[<h1 id="路径及注释"><a href="#路径及注释" class="headerlink" title="路径及注释"></a>路径及注释</h1><figure class="highlight xml"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">../               上一级目录<br>../../            上两级目录<br><span class="hljs-comment">&lt;!-- 注释内容 --&gt;</span>  注释（快捷键Ctrl + /）<br></code></pre></div></td></tr></tbody></table></figure><h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>......<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>    一级标题（就是Markdown里的#）<br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>......<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>    二级标题（##）<br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>......<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span>   三级标题（###）<br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>......<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span>   四级标题（####）<br><span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>......<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span>   五级标题（#####）<br><span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>......<span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span>   六级标题（######）<br></code></pre></div></td></tr></tbody></table></figure><h1 id="字体及格式"><a href="#字体及格式" class="headerlink" title="字体及格式"></a>字体及格式</h1><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>............<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>          斜体 <br><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>...........<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span>         斜体（emphasized，内容的着重强调）     <br><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>............<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span>          加粗<br><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>.......<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>     加粗（表示文本十分重要）<br><span class="hljs-tag">&lt;<span class="hljs-name">del</span>&gt;</span>..........<span class="hljs-tag">&lt;/<span class="hljs-name">del</span>&gt;</span>     删除线   <br><span class="hljs-tag">&lt;<span class="hljs-name">u</span>&gt;</span>............<span class="hljs-tag">&lt;/<span class="hljs-name">u</span>&gt;</span>          下划线<br><span class="hljs-tag">&lt;<span class="hljs-name">sup</span>&gt;</span>..........<span class="hljs-tag">&lt;/<span class="hljs-name">sup</span>&gt;</span>     上标<br><span class="hljs-tag">&lt;<span class="hljs-name">sub</span>&gt;</span>..........<span class="hljs-tag">&lt;/<span class="hljs-name">sub</span>&gt;</span>        下标<br><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span>.......<span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span>     居中显示  <br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>............<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>          段落标签<br><span class="hljs-tag">&lt;<span class="hljs-name">blockquote</span>&gt;</span>...<span class="hljs-tag">&lt;<span class="hljs-name">blockquote</span>&gt;</span>  引用<br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span>                       水平线<br><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span>                       换行（自闭合标签）<br><span class="hljs-symbol">&amp;nbsp;</span>                     空格<br><span class="hljs-symbol">&amp;lt;</span>                         左尖括号<br><span class="hljs-symbol">&amp;gt;</span>                         右尖括号                  <br></code></pre></div></td></tr></tbody></table></figure><h1 id="常见标签"><a href="#常见标签" class="headerlink" title="常见标签"></a>常见标签</h1><ul><li><code>&lt;abbr&gt;</code><br>缩写，使用 title 属性可以在鼠标放在上面时显示完整词语<br><code>&lt;abbr title="Cascading Style Sheets"&gt;CSS&lt;/abbr&gt;</code></li><li><code>&lt;pre&gt;</code><br>预定义格式文本，不改变原有格式排版。常与<code>&lt;code&gt;</code>搭配使用。<br><code>&lt;pre&gt;&lt;code class=""&gt;code goes here&lt;/code&gt;&lt;/pre&gt;</code></li><li><code>&lt;base&gt;</code><br>指定用于一个文档中包含的所有相对 URL 的根 URL。如果指定了多个 &lt;base&gt; 元素，只会使用第一个 href 和 target 值, 其余都会被忽略。<figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">给定 <span class="hljs-tag">&lt;<span class="hljs-name">base</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://example.com"</span> <span class="hljs-attr">target</span>=<span class="hljs-string">"_blank"</span>&gt;</span><br>链接 <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#anchor"</span>&gt;</span>first<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>链接指向 https://example.com/#anchor<br></code></pre></div></td></tr></tbody></table></figure></li><li><code>&lt;map&gt;</code><br>与<code>&lt;area&gt;</code>属性一起使用来定义一个图像映射<figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">...usemap</span>=<span class="hljs-string">"#map1"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">map</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"map1"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">area</span> <span class="hljs-attr">title</span>=<span class="hljs-string">""</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span> <span class="hljs-attr">shape</span>=<span class="hljs-string">"rect/circle/poly"</span> <span class="hljs-attr">coords</span>=<span class="hljs-string">""</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 矩形框，坐标以图片左上角为(0,0)--&gt;</span><br>shape="rect" coords="左上角坐标,右下角坐标"  <br><span class="hljs-comment">&lt;!-- 圆形框 --&gt;</span><br>shape="circle" coords="圆心坐标,半径"  <br><span class="hljs-comment">&lt;!-- 多边形框 --&gt;</span><br>shape="poly" coords="顶点1坐标,顶点2坐标,..."  <br></code></pre></div></td></tr></tbody></table></figure></li><li><code>&lt;progress&gt;</code><br>显示为一个进度条<figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"file"</span>&gt;</span>File progress:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">progress</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"file"</span> <span class="hljs-attr">max</span>=<span class="hljs-string">"100"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"70"</span>&gt;</span> 70% <span class="hljs-tag">&lt;/<span class="hljs-name">progress</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure></li></ul><h1 id="常见属性"><a href="#常见属性" class="headerlink" title="常见属性"></a>常见属性</h1><table><thead><tr><th align="center">名称</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes/tabindex">tabindex</a></td><td align="center">全局属性，指示其元素是否可以聚焦</td></tr><tr><td align="center"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes/contenteditable">contenteditable</a></td><td align="center">表示元素是否可被用户编辑</td></tr><tr><td align="center"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes/data-*">data-*</a></td><td align="center">自己编写的属性，存储一些需要记录的信息</td></tr></tbody></table><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br>另外<br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">type</span> = <span class="hljs-string">"disc"</span>&gt;</span>      默认，实心圆<br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">type</span> = <span class="hljs-string">"circle"</span>&gt;</span>    空心圆<br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">type</span> = <span class="hljs-string">"square"</span>&gt;</span>    实心方块<br></code></pre></div></td></tr></tbody></table></figure><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br><br>另外<br><span class="hljs-tag">&lt;<span class="hljs-name">ol</span> <span class="hljs-attr">type</span> = <span class="hljs-string">"1"</span>&gt;</span>        默认，数字排序<br><span class="hljs-tag">&lt;<span class="hljs-name">ol</span> <span class="hljs-attr">type</span> = <span class="hljs-string">"a/A"</span>&gt;</span>      大/小写字母排序<br><span class="hljs-tag">&lt;<span class="hljs-name">ol</span> <span class="hljs-attr">type</span> = <span class="hljs-string">"ⅰ/Ⅰ"</span>&gt;</span>    大/小写罗马字母排序<br></code></pre></div></td></tr></tbody></table></figure><h2 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h2><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>术语<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>描述<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><p>注. 不要将此属性用来在页面创建具有缩进效果的内容。<br>要改变描述列表中描述的缩进量，请使用 CSS margin 属性。</p><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p><code>&lt;a href = "..." target = "_blank"&gt;名称&lt;/a&gt;</code><br>默认为target = “_self”，在当前标签跳转。<br>target = “_blank” 表示在新页面跳转，不加则在当前页面跳转。<br>_blank可以自定义名称，若两个标签此名称相同，则会占用同一个页面。<br>download = “”属性，只能下载来自自己网站的文件。<br>还有一个 download 属性，下载的文件名以它的值来命名。</p><h2 id="外部资源链接-lt-link-gt"><a href="#外部资源链接-lt-link-gt" class="headerlink" title="外部资源链接<link>"></a>外部资源链接<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/link"><code>&lt;link&gt;</code></a></h2><p>外部css<code>&lt;link rel="stylesheet" href="theme.css" type="text/css"&gt;</code><br>网站图标<code>&lt;link rel="icon" href="favicon.ico" type="image/x-icon"&gt;</code></p><h2 id="图片插入"><a href="#图片插入" class="headerlink" title="图片插入"></a>图片插入</h2><p><code>&lt;img src = "" title = "" alt = "" width = "" height = ""&gt;</code><br>titlt 是鼠标滑上去出现的文字(tooltip)，alt 是加载失败后出现的文字，width 可以用”10px”或者100%。</p><h2 id="页面插入"><a href="#页面插入" class="headerlink" title="页面插入"></a>页面插入</h2><ul><li><code>&lt;iframe&gt;</code><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">target</span>=<span class="hljs-string">"frame1"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://www.baidu.com/"</span>&gt;</span>baidu<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">target</span>=<span class="hljs-string">"frame1"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://www.hao123.com/"</span>&gt;</span>hao123<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"500"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"300"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">""</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">"1"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"frame1"</span>&gt;</span>您的浏览器不支持iframe，请升级浏览器<span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span> <br>target="_top"，在嵌套多层时，打开的窗口在顶层。<br>target="_top"，在嵌套多层时，打开的窗口在它的父窗口。<br></code></pre></div></td></tr></tbody></table></figure>只有当页面插入不能显示时，才会显示出中间的文字。</li><li><code>&lt;object&gt;</code><br><code>&lt;object data=""&gt;&lt;/object&gt;</code><br>可以嵌入的资源格式很多，包括文档类，图片类等。<h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1>输入tr*m&gt;td*n，再按一下Tab可快速建立m行n列的表格。<figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span>......<span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span>           表格<br><span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span>......<span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span>           表头<br><span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span>......<span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span>           表格<br><span class="hljs-tag">&lt;<span class="hljs-name">tfoot</span>&gt;</span>......<span class="hljs-tag">&lt;/<span class="hljs-name">tfoot</span>&gt;</span>           表尾<br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>.........<span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>              表示一行<br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>.........<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>              表示单元格<br><span class="hljs-tag">&lt;<span class="hljs-name">col</span>&gt;</span>                           表示一列<br><span class="hljs-tag">&lt;<span class="hljs-name">caption</span>&gt;</span>....<span class="hljs-tag">&lt;/<span class="hljs-name">caption</span>&gt;</span>         表格标题<br>border = "1px"                  表格边框属性<br>cellspacing = "0"               单元格空隙<br>align = "center/left/right"     左右对齐方式<br>valign = "center/left/right"    上下对齐方式<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 最基本的使用 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span> = <span class="hljs-string">"1px"</span> <span class="hljs-attr">cellspacing</span> = <span class="hljs-string">"0"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">caption</span>&gt;</span>成绩表<span class="hljs-tag">&lt;/<span class="hljs-name">caption</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">col</span> <span class="hljs-attr">width</span> = <span class="hljs-string">"100px"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">col</span> <span class="hljs-attr">width</span> = <span class="hljs-string">"100px"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">col</span> <span class="hljs-attr">width</span> = <span class="hljs-string">"100px"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">col</span> <span class="hljs-attr">width</span> = <span class="hljs-string">"100px"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">align</span> = <span class="hljs-string">"center"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>李四<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>王五<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">align</span> = <span class="hljs-string">"center"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>智育<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>40<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>50<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">align</span> = <span class="hljs-string">"center"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>体育<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>35<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>56<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>20<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">align</span> = <span class="hljs-string">"center"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>德育<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>56<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>36<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>47<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">colspan = ""     合并几列<br>rowspan = ""     合并几行<br>th               加粗并水平居中的td<br>colgroup         用来定义表中的一组列表<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span> = <span class="hljs-string">"1px"</span> <span class="hljs-attr">cellspacing</span> = <span class="hljs-string">"0"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">colgroup</span> <span class="hljs-attr">span</span> = <span class="hljs-string">"6"</span> <span class="hljs-attr">width</span> = <span class="hljs-string">"100px"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">colgroup</span> <span class="hljs-attr">span</span> = <span class="hljs-string">"1"</span> <span class="hljs-attr">width</span> = <span class="hljs-string">"200px"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">align</span> = <span class="hljs-string">"center"</span> <span class="hljs-attr">height</span> = <span class="hljs-string">"40px"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">colspan</span> = <span class="hljs-string">'7'</span>&gt;</span>个人简历<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">align</span> = <span class="hljs-string">"center"</span> <span class="hljs-attr">height</span> = <span class="hljs-string">"40px"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>性别<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">rowspan</span> = <span class="hljs-string">"4"</span>&gt;</span>照片<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">align</span> = <span class="hljs-string">"center"</span> <span class="hljs-attr">height</span> = <span class="hljs-string">"40px"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>学历<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>籍贯<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">align</span> = <span class="hljs-string">"center"</span> <span class="hljs-attr">height</span> = <span class="hljs-string">"40px"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>电话<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>政治面貌<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span> = <span class="hljs-string">"3"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">align</span> = <span class="hljs-string">"center"</span> <span class="hljs-attr">height</span> = <span class="hljs-string">"40px"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>毕业院校<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span> = <span class="hljs-string">"5"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">align</span> = <span class="hljs-string">"center"</span> <span class="hljs-attr">height</span> = <span class="hljs-string">"40px"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>求职意向<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span> = <span class="hljs-string">"6"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure>实际显示效果：<table border="1px" cellspacing="0">  <colgroup span="6" width="100px">  </colgroup><colgroup span="1" width="200px">          </colgroup><tbody><tr align="center" height="40px">      <th colspan="7">个人简历   </th></tr>  <tr align="center" height="40px">      <td>姓名</td>       <td></td>      <td>性别</td>      <td></td>       <td>年龄</td>      <td></td>      <td rowspan="4">照片</td>  </tr>  <tr align="center" height="40px">          <td>学历</td>       <td></td>      <td>籍贯</td>      <td></td>       <td></td>      <td></td>  </tr>  <tr align="center" height="40px">      <td>电话</td>       <td></td>      <td>政治面貌</td>      <td colspan="3"></td>   </tr>  <tr align="center" height="40px">      <td>毕业院校</td>       <td colspan="5"></td>  </tr>  <tr align="center" height="40px">      <td>求职意向</td>       <td colspan="6"></td>  </tr></tbody></table></li></ul><h1 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h1><h2 id="lt-form-gt"><a href="#lt-form-gt" class="headerlink" title="<form>"></a><code>&lt;form&gt;</code></h2><p>用于向 Web 服务器提交信息。常见属性如下：</p><ul><li>action = “”<br>表单提交的地址</li><li>method = “get/post”<br>表单数据提交的方式</li></ul><table><thead><tr><th align="center">get请求</th><th align="center">post请求</th></tr></thead><tbody><tr><td align="center">通常表示获取数据</td><td align="center">通常表示提交数据</td></tr><tr><td align="center">发送的数据写在地址栏上，用户可见</td><td align="center">发送的数据用户不可见</td></tr><tr><td align="center">不能提交大量数据</td><td align="center">可以提交大量数据，不要混用</td></tr></tbody></table><ul><li>name = “”<br>表单的名称。该值必须是所有表单中独一无二的，而且不能是空字符串。（HTML 4中应使用 id 属性）</li></ul><h2 id="lt-input-gt"><a href="#lt-input-gt" class="headerlink" title="<input>"></a><code>&lt;input&gt;</code></h2><ul><li>type = “”</li></ul><table><thead><tr><th align="left">功能</th><th align="left">写法</th></tr></thead><tbody><tr><td align="left">文本输入</td><td align="left">type = “text”</td></tr><tr><td align="left">密码输入</td><td align="left">type = “password”</td></tr><tr><td align="left">数字输入</td><td align="left">type = “number”</td></tr><tr><td align="left">邮箱输入</td><td align="left">type = “email”</td></tr><tr><td align="left">网址输入</td><td align="left">type = “url”</td></tr><tr><td align="left">电话输入</td><td align="left">type = “tel”</td></tr><tr><td align="left">【属性】文本框</td><td align="left">maxlength=””，minlength=””，placeholder=””(输入预期值的提示信息)，required(必须要填)，autofous(页面加载时自动聚焦到此表单控件)</td></tr><tr><td align="left">单选框</td><td align="left">type = “radio”</td></tr><tr><td align="left">复选框</td><td align="left">type = “checkbox”</td></tr><tr><td align="left">【属性】选择框</td><td align="left">checked，默认选中；disabled，不能选择</td></tr><tr><td align="left">普通按钮</td><td align="left">type = “button”(<code>&lt;button&gt;...&lt;/button&gt;</code>)</td></tr><tr><td align="left">提交按钮</td><td align="left">type = “submit”</td></tr><tr><td align="left">重置按钮</td><td align="left">type = “reset”</td></tr><tr><td align="left">提交按钮，形态是一张图片</td><td align="left">type=”image” src=””</td></tr><tr><td align="left">隐藏</td><td align="left">type = “hidden”</td></tr><tr><td align="left">颜色</td><td align="left">type = “color”</td></tr><tr><td align="left">日期</td><td align="left">type = “date”</td></tr><tr><td align="left">当地日期</td><td align="left">type = “datetime-local”</td></tr><tr><td align="left">时/周/月</td><td align="left">type = “time/week/month”</td></tr><tr><td align="left">范围选择，滑条</td><td align="left">type = “range” max=”” min=”” step=””</td></tr><tr><td align="left">文件选择</td><td align="left">type = “file”</td></tr><tr><td align="left">【属性】文件默认选择格式</td><td align="left">accept = “image/*”</td></tr><tr><td align="left">【属性】文件可以选择多个</td><td align="left">multiple，”email”和”file”可用</td></tr></tbody></table><ul><li>name = “”<br>表单控件的名字。以名字/值对的形式随表单一起提交。</li><li>value = “”<br>表单控件的值。以名字/值对的形式随表单一起提交。若选择框不写此属性，则选择默认value值为”on”。</li></ul><h2 id="lt-label-gt"><a href="#lt-label-gt" class="headerlink" title="<label>"></a><code>&lt;label&gt;</code></h2><p>可以和一个&lt;input&gt;标签关联起来，使用方法<br><code>&lt;label&gt;Click &lt;input type="text"&gt;&lt;/label&gt;</code><br>或者</p><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"username"</span>&gt;</span>Click me<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"username"</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><h2 id="lt-select-gt"><a href="#lt-select-gt" class="headerlink" title="<select>"></a><code>&lt;select&gt;</code></h2><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"birthdat"</span>&gt;</span>出生日期<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"birthday"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"birth"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">hidden</span> <span class="hljs-attr">disabled</span> <span class="hljs-attr">selected</span>&gt;</span>请选择<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">optgroup</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"91-92"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span> = <span class="hljs-string">"91"</span> &gt;</span>1991<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span> = <span class="hljs-string">"92"</span> &gt;</span>1992<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">optgroup</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"93-94"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span> = <span class="hljs-string">"93"</span> <span class="hljs-attr">disabled</span>&gt;</span>1993<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span> = <span class="hljs-string">"94"</span> &gt;</span>1994<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>......<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><p>上面展示了一个下拉菜单。。<br>&lt;option&gt;如果不含 value 属性，则 value 值默认为元素中的文本<br>&lt;optgroup&gt;分组。<br>selected 属性，使其默认被选中。<br>disabled 属性，禁用。<br>hidden 属性，隐藏。</p><h2 id="lt-textarea-gt"><a href="#lt-textarea-gt" class="headerlink" title="<textarea>"></a><code>&lt;textarea&gt;</code></h2><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"proverb"</span>&gt;</span>你的座右铭：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"proverb"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"pb"</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">"20"</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">"3"</span>&gt;</span>Where there's a will there's a way<br><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><p>上面展示了一个多行文本框。<br>rows 和 cols 属性设置文本输入窗口的高度和宽度。</p><h2 id="lt-fileset-gt"><a href="#lt-fileset-gt" class="headerlink" title="<fileset>"></a><code>&lt;fileset&gt;</code></h2><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">fileset</span> <span class="hljs-attr">disabled</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">legend</span>&gt;</span>个人信息<span class="hljs-tag">&lt;/<span class="hljs-name">legend</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">fileset</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">name</span> = <span class="hljs-string">""</span> <span class="hljs-attr">method</span> = <span class="hljs-string">""</span> <span class="hljs-attr">action</span> = <span class="hljs-string">""</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">height</span> = <span class="hljs-string">"40px"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">rowspan</span> = <span class="hljs-string">"7"</span> <span class="hljs-attr">align</span> =<span class="hljs-string">"center"</span>&gt;</span>总体信息<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span> = <span class="hljs-string">"2"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">height</span> = <span class="hljs-string">"40px"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">align</span> =<span class="hljs-string">"right"</span>&gt;</span>用户名：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">"text"</span> <span class="hljs-attr">name</span> = <span class="hljs-string">"login"</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">height</span> = <span class="hljs-string">"40px"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">align</span> = <span class="hljs-string">"right"</span>&gt;</span>密码：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">"password"</span> <span class="hljs-attr">name</span> = <span class="hljs-string">"pwd"</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">height</span> = <span class="hljs-string">"40px"</span> <span class="hljs-attr">align</span> = <span class="hljs-string">"center"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>  <span class="hljs-attr">colspan</span> = <span class="hljs-string">"2"</span>&gt;</span><br>男<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">"radio"</span> <span class="hljs-attr">name</span> = <span class="hljs-string">"gender"</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><br>女<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">"radio"</span> <span class="hljs-attr">name</span> = <span class="hljs-string">"gender"</span> <span class="hljs-attr">checked</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">height</span> = <span class="hljs-string">"40px"</span> <span class="hljs-attr">align</span> = <span class="hljs-string">"center"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span> = <span class="hljs-string">"2"</span>&gt;</span>出生年份：<br><span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>1996<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>1997<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>1998<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>1999<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">height</span> = <span class="hljs-string">"40px"</span> <span class="hljs-attr">align</span> = <span class="hljs-string">"center"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">align</span> = <span class="hljs-string">"right"</span>&gt;</span>个人简介：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">"24"</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">"5"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">height</span> = <span class="hljs-string">"40px"</span> <span class="hljs-attr">align</span> = <span class="hljs-string">"center"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span> = <span class="hljs-string">"2"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">"submit"</span> <span class="hljs-attr">value</span> =<span class="hljs-string">"提交"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">"reset"</span> <span class="hljs-attr">value</span> =<span class="hljs-string">"重置"</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><p>显示效果：</p><form name="" method="" action="">    <table>        <tbody>            <tr height="40px">                <td rowspan="7" align="center">总体信息</td>                <td colspan="2"></td>            </tr>            <tr height="40px">                <td align="right">用户名：</td>                <td>                    <input type="text" name="login">                 </td>            </tr>            <tr height="40px">                <td align="right">密码：</td>                <td>                    <input type="password" name="pwd">                 </td>            </tr>            <tr height="40px" align="center">                <td colspan="2">                    男<input type="radio" name="gender">&nbsp;&nbsp;&nbsp;&nbsp;                    女<input type="radio" name="gender" checked="">                  </td>            </tr>            <tr height="40px" align="center">                <td colspan="2">出生年份：                    <select>                        <option>1996</option>                        <option>1997</option>                        <option>1998</option>                        <option>1999</option>                    </select>                 </td>            </tr>            <tr height="40px" align="center">                <td align="right">个人简介：</td>                <td>                    <textarea cols="24" rows="5"></textarea>                </td>            </tr>            <tr height="40px" align="center">                <td colspan="2">                    <input type="submit" value="提交">                    <input type="reset" value="重置">                </td>            </tr>        </tbody>    </table></form>]]></content>
    
    
    <categories>
      
      <category>web前端学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>front-end</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搜索技巧</title>
    <link href="/posts/982ff584.html"/>
    <url>/posts/982ff584.html</url>
    
    <content type="html"><![CDATA[<table><thead><tr><th align="center">方法</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">双引号””</td><td align="center">在搜索词上加双引号，代表完全匹配搜索</td></tr><tr><td align="center">减号-</td><td align="center">搜索不包含减号后面的词，例“谷歌 -百度”表示搜索结果包含“谷歌”这个词，不包含“百度”这个词</td></tr><tr><td align="center">星号*</td><td align="center">通配符搜索，例“搜索*巧”其中*号代表任何文字</td></tr><tr><td align="center">OR</td><td align="center">会得到分别与两个搜索词相关或者和两者都有关的结果。</td></tr><tr><td align="center">site:</td><td align="center">限定在某个网站内搜索</td></tr><tr><td align="center">filetype:</td><td align="center">搜索指定格式文件</td></tr><tr><td align="center">related:</td><td align="center">查找和搜索域名相关的网站</td></tr><tr><td align="center">intitle:</td><td align="center">限定搜索内容是网页标题包含的关键词</td></tr><tr><td align="center">intext:</td><td align="center">限定搜索内容是网页内文包含的关键词</td></tr><tr><td align="center">inanchor:</td><td align="center">限定搜索内容是网页中链接包含的关键词</td></tr><tr><td align="center">inurl:</td><td align="center">限定搜索内容是网址中包含的关键词</td></tr><tr><td align="center">allintitle:</td><td align="center">限定搜索内容是网页标题包含的关键词，可使用多个关键词</td></tr><tr><td align="center">allintext:</td><td align="center">限定搜索内容是网页内文包含的关键词，可使用多个关键词</td></tr><tr><td align="center">allinanchor:</td><td align="center">限定搜索内容是网页中链接包含的关键词，可使用多个关键词</td></tr><tr><td align="center">allinurl:</td><td align="center">限定搜索内容是网址中包含的关键词，可使用多个关键词</td></tr><tr><td align="center">AROUND(X)</td><td align="center">临近搜索，查找两个关键词的距离不超过X的网页</td></tr><tr><td align="center">define:</td><td align="center">查询谷歌内置词典，就是在搜索结果的卡片中展示词义，例<a href="https://www.google.com/search?q=define:website&amp;oq=define:website&amp;aqs=chrome..69i57j69i58.8741j0j1&amp;sourceid=chrome&amp;ie=UTF-8">define:website</a></td></tr><tr><td align="center">weather:</td><td align="center">查阅指定地点的天气，结果会展示在天气小部件中，例<a href="https://www.google.com/search?sxsrf=ALeKk00Scw1zKjpYiQUiUZbMAVhF26CcQg:1591810429202&amp;ei=fRnhXuHzC8mq0PEPm_KFgAQ&amp;q=weather:beijing&amp;oq=weather:beijing&amp;gs_lcp=CgZwc3ktYWIQAzoECCMQJzoECAAQQzoCCAA6BQgAEMsBUKvHBFj29gRg3PgEaABwAHgAgAHgB4gBoSuSAQsyLTYuMy4xLjEuMpgBAKABAaoBB2d3cy13aXo&amp;sclient=psy-ab&amp;ved=0ahUKEwihprr54_fpAhVJFTQIHRt5AUAQ4dUDCAw&amp;uact=5">weather:beijing</a></td></tr><tr><td align="center">maps:</td><td align="center">查询指定地点的地图结果，例<a href="https://www.google.com/search?sxsrf=ALeKk03_3Bq-Cv72XZnmbM8zqTYUL3_qCw:1591810512124&amp;ei=0BnhXviMB9rK0PEPz76p6A8&amp;q=maps:beijing&amp;oq=maps:beijing&amp;gs_lcp=CgZwc3ktYWIQAzoECCMQJzoCCAA6BAgAEEM6BQgAEMsBUJfYAljO9AJguPcCaABwAHgBgAGrCogBvTaSAQsyLTIuNi42LTEuM5gBAKABAaoBB2d3cy13aXo&amp;sclient=psy-ab&amp;ved=0ahUKEwj4tP-g5PfpAhVaJTQIHU9fCv0Q4dUDCAw&amp;uact=5">maps:beijing</a></td></tr><tr><td align="center">stocks:</td><td align="center">查阅指定的股票信息，例<a href="https://www.google.com/search?sxsrf=ALeKk02LXUPWoPzByISr65xsVETZeN8JKA:1591810717535&amp;ei=nRrhXuWjIKi00PEP0aCUoA0&amp;q=stocks:google&amp;oq=stocks:google&amp;gs_lcp=CgZwc3ktYWIQAzoECCMQJzoFCAAQywFQvuACWK2AA2DwhQNoAHAAeACAAegFiAHIGZIBBzMtOC42LTGYAQCgAQGqAQdnd3Mtd2l6&amp;sclient=psy-ab&amp;ved=0ahUKEwil5viC5ffpAhUoGjQIHVEQBdQQ4dUDCAw&amp;uact=5">stocks:google</a></td></tr><tr><td align="center">in</td><td align="center">单位换算，支持货币、长度、温度等的换算。例<a href="https://www.google.com/search?q=$1+in+CNY&amp;oq=$1+in+CNY&amp;aqs=chrome.0.69i59j0l7.311j0j9&amp;sourceid=chrome&amp;ie=UTF-8">$1 in CNY</a></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>实用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Search</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>win10小技巧</title>
    <link href="/posts/d50f6bf6.html"/>
    <url>/posts/d50f6bf6.html</url>
    
    <content type="html"><![CDATA[<h1 id="输入法"><a href="#输入法" class="headerlink" title="输入法"></a>输入法</h1><p>当win10自带输入法右键选择“显示语言栏”后，没有选项可以直接还原。<br>它的设置选项应该在：设置-设备-输入-高级键盘选项-去掉勾选“使用桌面语言栏(如果可用)”</p><p>2020.5.30更新：2004版已解决此问题，可以直接点击设置按钮关闭，且输入法工具栏也改进了界面，变得终于能看了。</p><h1 id="关闭时间轴"><a href="#关闭时间轴" class="headerlink" title="关闭时间轴"></a>关闭时间轴</h1><p>设置 - 隐私 - 活动历史记录 - 去掉勾选“在此设备上存储我的活动历史记录”，关闭“显示这些账户的活动”下的账户，顺便清除活动历史记录</p><h1 id="关闭笔记本自带键盘"><a href="#关闭笔记本自带键盘" class="headerlink" title="关闭笔记本自带键盘"></a>关闭笔记本自带键盘</h1><ol><li>命令提示符 右键 “以管理员身份运行”</li><li>输入<code>sc config i8042prt start= disabled</code></li><li>重启</li><li>若要启用，输入<code>sc config i8042prt start= auto</code>即可</li></ol>]]></content>
    
    
    <categories>
      
      <category>实用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Win10</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows常用快捷键</title>
    <link href="/posts/e79721a0.html"/>
    <url>/posts/e79721a0.html</url>
    
    <content type="html"><![CDATA[<h1 id="常规快捷键"><a href="#常规快捷键" class="headerlink" title="常规快捷键"></a>常规快捷键</h1><table><thead><tr><th align="center">快捷键</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">Ctrl + X</td><td align="center">剪切</td></tr><tr><td align="center">Ctrl + C</td><td align="center">复制</td></tr><tr><td align="center">Ctrl + V</td><td align="center">粘贴</td></tr><tr><td align="center">Ctrl + Z</td><td align="center">撤销操作</td></tr><tr><td align="center">Ctrl + S</td><td align="center">保存</td></tr><tr><td align="center">Ctrl + A</td><td align="center">全选</td></tr><tr><td align="center">Ctrl + D（或Delete）</td><td align="center">删除选定项</td></tr><tr><td align="center">Ctrl + ↑</td><td align="center">光标移动到上一段落的起始处</td></tr><tr><td align="center">Ctrl + ↓</td><td align="center">光标移动到下一段落的起始处</td></tr><tr><td align="center">Ctrl + 鼠标左键</td><td align="center">多选</td></tr><tr><td align="center">Shift + 鼠标最后的选择点</td><td align="center">选择之间的所有项</td></tr><tr><td align="center">Ctrl + Enter</td><td align="center">新增下一行</td></tr><tr><td align="center">Ctrl + Shift + Enter</td><td align="center">新增上一行</td></tr></tbody></table><h1 id="Win徽标快捷键"><a href="#Win徽标快捷键" class="headerlink" title="Win徽标快捷键"></a>Win徽标快捷键</h1><table><thead><tr><th align="center">快捷键</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">Win（或Ctrl + Esc）</td><td align="center">打开“开始”菜单</td></tr><tr><td align="center">Win + D</td><td align="center">显示/隐藏桌面</td></tr><tr><td align="center">Win + E</td><td align="center">打开文件资源管理器</td></tr><tr><td align="center">Win + G</td><td align="center">打开游戏栏</td></tr><tr><td align="center">Win‌ + H</td><td align="center">开始听写</td></tr><tr><td align="center">Win + I</td><td align="center">打开设置</td></tr><tr><td align="center">Win + R</td><td align="center">打开“运行”对话框</td></tr><tr><td align="center">Win + S</td><td align="center">搜索</td></tr><tr><td align="center">Win + V</td><td align="center">打开剪贴板</td></tr><tr><td align="center">Win + X</td><td align="center">打开“快速链接”菜单</td></tr><tr><td align="center">Win + 数字</td><td align="center">打开任务栏应用（位于数字所指明的位置）</td></tr><tr><td align="center">Win + ↑</td><td align="center">最大化窗口</td></tr><tr><td align="center">Win + ↑</td><td align="center">最小化窗口</td></tr><tr><td align="center">Win + ←</td><td align="center">将窗口沿左边最大化（占半屏）</td></tr><tr><td align="center">Win + →</td><td align="center">将窗口沿右边最大化（占半屏）</td></tr></tbody></table><h1 id="虚拟桌面快捷键"><a href="#虚拟桌面快捷键" class="headerlink" title="虚拟桌面快捷键"></a>虚拟桌面快捷键</h1><table><thead><tr><th align="center">快捷键</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">Win + Ctrl + D</td><td align="center">新建桌面</td></tr><tr><td align="center">Win + Ctrl + ←</td><td align="center">切换左侧桌面</td></tr><tr><td align="center">Win + Ctrl + →</td><td align="center">切换右侧桌面</td></tr><tr><td align="center">Win + Ctrl + F4</td><td align="center">关闭当前桌面</td></tr></tbody></table><h1 id="Windows自带输入法快捷键"><a href="#Windows自带输入法快捷键" class="headerlink" title="Windows自带输入法快捷键"></a>Windows自带输入法快捷键</h1><table><thead><tr><th align="center">快捷键</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">Win + 句号(.)或冒号(:)</td><td align="center">打开表情符号</td></tr><tr><td align="center">Ctrl + Shift + B</td><td align="center">打开表情面板（需处于中文状态下）</td></tr><tr><td align="center">Ctrl + Shift + F</td><td align="center">简体/繁体中文输入切换（可在设置里修改）</td></tr></tbody></table><h1 id="其他快捷键"><a href="#其他快捷键" class="headerlink" title="其他快捷键"></a>其他快捷键</h1><table><thead><tr><th align="center">快捷键</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">Ctrl + Shift + Esc</td><td align="center">打开任务管理器</td></tr><tr><td align="center">Alt + Enter</td><td align="center">显示所选项目的属性</td></tr><tr><td align="center">Shift + Delete</td><td align="center">删除选定项，无需先移动到回收站</td></tr><tr><td align="center">Alt + ←</td><td align="center">返回</td></tr><tr><td align="center">Alt + →</td><td align="center">前进</td></tr><tr><td align="center">Alt + F4</td><td align="center">关闭活动项</td></tr><tr><td align="center">Ctrl + F4</td><td align="center">关闭活动文档</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>实用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hotkeys</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>截屏的正确姿势</title>
    <link href="/posts/6e0f9c11.html"/>
    <url>/posts/6e0f9c11.html</url>
    
    <content type="html"><![CDATA[<h1 id="Print-Screen截屏"><a href="#Print-Screen截屏" class="headerlink" title="Print Screen截屏"></a>Print Screen截屏</h1><table><thead><tr><th align="left">快捷键</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">PrtSc</td><td align="left">截屏保存在剪贴板中</td></tr><tr><td align="left">Alt + PrtSc</td><td align="left">截取活动窗口（即当前的工作窗口。在有多个打开的窗口时，只有一个是活动窗口）</td></tr><tr><td align="left">Win + PrtSc</td><td align="left">截屏保存在电脑&gt;图片&gt;屏幕截图</td></tr><tr><td align="left">Win + V</td><td align="left">可打开剪贴板</td></tr></tbody></table><h1 id="Win10截屏工具"><a href="#Win10截屏工具" class="headerlink" title="Win10截屏工具"></a>Win10截屏工具</h1><table><thead><tr><th align="left">快捷键</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">Win + Shift + S</td><td align="left">按住鼠标左键拖动框选区域即可截屏</td></tr><tr><td align="left">Win + W</td><td align="left">右下角会出现“全屏截图”按钮</td></tr><tr><td align="left">在Win10开始菜单中输入“截图工具”<br>【最新Windows版本提示将移动到“截图与草图”（Win+Shift+S快捷键）里】</td><td align="left"></td></tr></tbody></table><h1 id="第三方截屏工具"><a href="#第三方截屏工具" class="headerlink" title="第三方截屏工具"></a>第三方截屏工具</h1><table><thead><tr><th align="left">工具</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">MS里的“Snipaste”软件</td><td align="left">可分区域截屏。自定义截屏键（默认F1）。</td></tr><tr><td align="left">QQ自带截屏工具</td><td align="left">Ctrl + Alt + A</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>实用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hotkeys</tag>
      
      <tag>Screenshot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于我所使用的软件，插件及网站</title>
    <link href="/posts/fe694041.html"/>
    <url>/posts/fe694041.html</url>
    
    <content type="html"><![CDATA[<p>怎么将你日常使用的设备环境打造的舒服，或许这篇会有所帮助。</p><span id="more"></span><h1 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h1><p>前言：我用软件最大的雷点是内置广告和弹窗，所以有些虽然好用但是不升级为高级会员广告就不会消失的软件不予推荐。为了软件及时更新与不带其他流氓软件，都推荐去官网下。</p><h2 id="阅读类"><a href="#阅读类" class="headerlink" title="阅读类"></a>阅读类</h2><table><thead><tr><th align="center">软件</th><th align="left">功能</th></tr></thead><tbody><tr><td align="center"><a href="https://calibre-ebook.com/download">calibre</a></td><td align="left">支持格式最多，但是排版不是很好，主要用途是书籍的格式转换。最大的缺点是更新太频繁了，几乎每次我打开的时候都有新版本，而且官网下载速度很慢，对强迫症极不友好<span class="github-emoji"><span>😡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f621.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><br>（我最常用的是转换成awz3格式在kindle上看。虽然可以转换成mobi和awz，推荐awz3，现在在Amazon购买的书大部分都是这个格式了，优点主要是丰富内容排版。<span class="heimu">还有DRM保护，但对于转换来说这不是优点。</span>顺便一提，kindle最好不要用txt，很容易跳行；对pdf的支持也不是很好）</td></tr><tr><td align="center"><a href="https://www.sumatrapdfreader.org/download-free-pdf-viewer.html">Sumatra PDF</a></td><td align="left">PDF阅读器，高级选项是直接用参数设置的，我懒，没有改，默认的布局也挺好看的。</td></tr><tr><td align="center"><a href="https://icecreamapps.com/Download-Ebook-Reader/">Icecream Ebook Reader</a></td><td align="left">支持ePub，mobi格式。缺点：排版的页边距太宽了且不能调，支持的中文文本字体很少（几乎没有），全是衬线字体。但作为不买会员能享受到的服务还是挺好的（主要是没广告）。<span class="heimu">怀念edge自带的ePub阅读器啊，微软是专砍好用的功能吗？</span></td></tr><tr><td align="center"><a href="https://www.microsoft.com/zh-cn/p/justread/9mznwv26g446?activetab=pivot:overviewtab">Justread</a></td><td align="left">ePub阅读器，UWP应用。免费！自带的字体也够用，缺点是对插图排版不好，图片会从中间被裁开。</td></tr><tr><td align="center"><a href="https://github.com/edrlab/thorium-reader/releases">Thorium</a></td><td align="left">ePub阅读器。除了不能做批注和鼠标滚轮翻页外，其它都可以。</td></tr></tbody></table><h2 id="图片与视频"><a href="#图片与视频" class="headerlink" title="图片与视频"></a>图片与视频</h2><table><thead><tr><th align="center">软件</th><th align="left">功能</th></tr></thead><tbody><tr><td align="center"><a href="https://www.bandisoft.com/honeyview/">Honeyview</a></td><td align="left">图片查看器，比windows自带的图片查看好用多了，特别是阅读长条漫画很好用。注意：最好不要下载便携版，因为默认布局太丑了，配置会改很多，我上次下载了新版本，又把自己的配置照着旧版重新改了一遍，很麻烦。</td></tr><tr><td align="center"><a href="https://daumpotplayer.com/download/">PotPlayer</a></td><td align="left">视频播放器。<a href="http://potplayer.ys168.com/">其它下载地址</a><br>皮肤下载推荐去贴吧，我自用的一直是<a href="https://www.baidupcs.com/rest/2.0/pcs/file?method=batchdownload&amp;app_id=250528&amp;zipcontent=%7B%22fs_id%22:%5B950500468740866%5D%7D&amp;sign=DCb740ccc5511e5e8fedcff06b081203:vdc0n4QwrR1VBzi3bDgaahfT1FI=&amp;uid=4036931918&amp;time=1616762134&amp;dp-logid=8862433624511983644&amp;dp-callid=0&amp;vuk=4036931918&amp;zipname=potplayer_skin%20%E7%AD%891%E4%B8%AA%E6%96%87%E4%BB%B6.zip">Modern-X</a>。</td></tr><tr><td align="center"><a href="https://www.foobar2000.org/download">foobar2000</a></td><td align="left">很有名的音乐播放器，功能超全。也推荐去贴吧下载，有大佬汉化，也有很多炫酷好看的皮肤，推荐音乐发烧友下载。<span class="heimu">我已经退坑了，在用自带的groove听歌。</span></td></tr><tr><td align="center"><a href="https://listen1.github.io/listen1/">Listen 1</a></td><td align="left">能导入歌单，但歌词不支持翻译，而且没有小窗口，热键也不能设置。但是！能听一些要收费的歌</td></tr><tr><td align="center"><a href="https://mkvtoolnix.download/downloads.html">MKVToolnix</a></td><td align="left">好用的mkv的提取与封装软件，<del>像我一样的小白</del>最简单的用法就是把视频内置的音轨和字幕导出导入。</td></tr></tbody></table><h2 id="界面美观"><a href="#界面美观" class="headerlink" title="界面美观"></a>界面美观</h2><table><thead><tr><th align="center">软件</th><th align="left">功能</th></tr></thead><tbody><tr><td align="center"><a href="https://www.microsoft.com/zh-cn/p/%e7%88%b1%e5%a3%81%e7%ba%b8uwp/9nblggh5kccf?activetab=pivot:overviewtab">爱壁纸UWP</a></td><td align="left">UWP应用。图片比较多，关键是速度很快。</td></tr><tr><td align="center"><a href="https://www.microsoft.com/zh-cn/p/splash-wallpaper/9pbkz29xmpf8?activetab=pivot:overviewtab">Splash Wallpaper</a></td><td align="left">UWP应用。速度有点慢，但其他splash图片应用要么有广告，要么要收费，这个很良心了。</td></tr><tr><td align="center"><a href="https://support.microsoft.com/zh-cn/windows/%E6%A1%8C%E9%9D%A2%E4%B8%BB%E9%A2%98-94880287-6046-1d35-6d2f-35dee759701e">Windows 主题</a></td><td align="left">直接从Microsoft Store里面下载，图片质量很不错的</td></tr><tr><td align="center"><a href="https://fliqlo.com/">Fliqlo</a></td><td align="left">简约漂亮的时钟屏保，官网打不开的点<a href="https://pcs.baidu.com/rest/2.0/pcs/file?method=download&amp;app_id=250528&amp;filename=Fliqlo%201.3.3.zip&amp;path=/share/Fliqlo%201.3.3.zip&amp;filename=Fliqlo%201.3.3.zip">这里</a>下载【更新：由于flash不被支持，此软件已不能使用】</td></tr><tr><td align="center"><a href="https://www.microsoft.com/zh-cn/p/translucenttb-%e6%b1%89%e5%8c%96-by-tpxxn/9n5w18jc9bg2">TranslucentTB(汉化)</a></td><td align="left">UWP应用。可以控制任务栏外观，使其透明化或者其它效果。</td></tr><tr><td align="center"><a href="https://www.stardock.com/products/fences/download">Fences</a></td><td align="left">桌面图标整理工具，steam也有卖，但是换设备激活密钥比较麻烦，推荐在官网买</td></tr></tbody></table><h2 id="资源管理与传输"><a href="#资源管理与传输" class="headerlink" title="资源管理与传输"></a>资源管理与传输</h2><table><thead><tr><th align="center">软件</th><th align="left">功能</th></tr></thead><tbody><tr><td align="center"><a href="https://www.voidtools.com/zh-cn/downloads/">Everything</a></td><td align="left">强大的本地搜索工具，用过都说好，与wox搭配使用效果更佳。</td></tr><tr><td align="center"><a href="https://github.com/Wox-launcher/Wox/releases">Wox</a></td><td align="left">软件快捷启动工具，效率神器，可快速启动、计算、查找等，与everything一起使用。</td></tr><tr><td align="center"><a href="https://www.advanced-ip-scanner.com/cn/">Advanced IP Scanner</a></td><td align="left">局域网扫描器，不知道或者忘记了家里路由器的用户名和密码，不能用192.168.1.1查询的，这个软件很方便。</td></tr><tr><td align="center"><a href="https://www.filezilla.cn/download/client">FileZilla</a></td><td align="left">免费开源的FTP软件，可用于FTP和SFTP传输，虽然windows资源管理器就可以进行FTP传输，但耐不住它界面好。</td></tr><tr><td align="center"><a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html">PuTTY</a></td><td align="left">是一款集成虚拟终端、系统控制台和网络文件传输为一体的自由及开放源代码的程序。支持多种网络协议，包括SCP，SSH，Telnet，rlogin和原始的套接字连接。它也可以连接到串行端口。</td></tr><tr><td align="center"><a href="https://www.realvnc.com/en/connect/download/viewer/">VNC Viewer</a></td><td align="left">远程桌面控制</td></tr></tbody></table><h2 id="磁盘相关"><a href="#磁盘相关" class="headerlink" title="磁盘相关"></a>磁盘相关</h2><table><thead><tr><th align="center">软件</th><th align="left">功能</th></tr></thead><tbody><tr><td align="center"><a href="http://www.uderzo.it/main_products/space_sniffer/download.html">SpaceSniffer</a></td><td align="left">计算机磁盘空间分析器。它使用树状图来可视化磁盘使用情况。</td></tr><tr><td align="center"><a href="https://www.sdcard.org/downloads/formatter/index.html">SD Card Formatter</a></td><td align="left">SD卡格式化工具，有时候windows自带格式化不是很好，这个软件不错。</td></tr><tr><td align="center"><a href="https://rufus.ie/">Rufus</a></td><td align="left">是一个可以帮助格式化和创建可引导U盘的工具，可以制作Windows、Linux、Android-x86 等操作系统的启动盘。</td></tr><tr><td align="center"><a href="https://as-ssd-benchmark.en.softonic.com/">AS SSD benchmark</a></td><td align="left">硬盘速度测试工具</td></tr><tr><td align="center"><a href="https://crystalmark.info/en/software/crystaldiskmark/">Crystal DiskMark</a></td><td align="left">也是硬盘速度测试工具，可以更详细地设置队列数与线程数。</td></tr><tr><td align="center"><a href="http://www.hdtune.com/download.html">HD Tune</a></td><td align="left">有检测机械硬盘坏道，温度检测，磁盘表面扫描等功能。pro版挺好用的，下载渠道嘛，网上找一下。</td></tr><tr><td align="center">芯片精灵</td><td align="left">可以查询U盘的很多参数（实在找不到官网随便在网上下载一个绿色版吧）</td></tr></tbody></table><h2 id="系统优化"><a href="#系统优化" class="headerlink" title="系统优化"></a>系统优化</h2><table><thead><tr><th align="center">软件</th><th align="left">功能</th></tr></thead><tbody><tr><td align="center"><a href="https://www.chuyu.me/zh-Hans/index.html">Dism++</a></td><td align="left">强大的Windows系统实用工具</td></tr><tr><td align="center"><a href="https://geekuninstaller.com/download">Geek Uninstall</a></td><td align="left">卸载工具，可能不是卸载的最干净的，但界面简单漂亮。</td></tr><tr><td align="center"><a href="https://chocolatey.org/install">Chocolatey</a></td><td align="left">用指令快速安装软件，管理软件</td></tr><tr><td align="center"><a href="https://www.huorong.cn/person5.html">火绒</a></td><td align="left">杀毒软件，要装杀软只推荐这个，要么就别装，用自带的defender。我用它的主要功能不是杀毒，是垃圾清理，强行粉碎文件等功能。最重要的用处是当你下载了破解软件时windows在告诉你之前就自动删除了，去还原很麻烦，这个在它提醒你时选择不处理就行了。【更新：好像也开始自动隔离删除文件了，你没用了😒】</td></tr><tr><td align="center"><a href="https://www.microsoft.com/zh-cn/p/quicklook/9nv4bs3l1h4s?activetab=pivot:overviewtab">QuickLook</a></td><td align="left">UWP应用。在不运行关联程序的情况下，通过敲击空格键来快速预览文件内容。</td></tr><tr><td align="center"><a href="https://github.com/microsoft/PowerToys/releases">PowerToys</a></td><td align="left">微软发布的实用工具集，开源免费</td></tr><tr><td align="center">RightMenuMgr</td><td align="left">右键菜单管理工具</td></tr><tr><td align="center"><a href="https://github.com/BluePointLilac/ContextMenuManager/releases">ContextMenuManager</a></td><td align="left">右键菜单管理工具</td></tr></tbody></table><h2 id="下载相关"><a href="#下载相关" class="headerlink" title="下载相关"></a>下载相关</h2><table><thead><tr><th align="center">软件</th><th align="left">功能</th></tr></thead><tbody><tr><td align="center"><a href="https://www.internetdownloadmanager.com/">IDM</a></td><td align="left">总所周知的下载管理器，搭配浏览器idm插件使用更好。</td></tr><tr><td align="center"><a href="http://client.jijidown.com/">唧唧</a></td><td align="left">b站视频下载工具，只要不是番剧，视频和弹幕都能下载。</td></tr></tbody></table><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><table><thead><tr><th align="center">软件</th><th align="left">功能</th></tr></thead><tbody><tr><td align="center"><a href="https://www.foxmail.com/">Foxmail</a></td><td align="left">邮件客户端，延迟时间有点长，界面也不好看，能用。原来用的是YoMail，还可以直接接收Gmail邮件，但已经凉了。（其实Windows自带的“邮件”挺好用的）</td></tr><tr><td align="center"><a href="https://cn.bandisoft.com/bandizip/">Bandizip</a></td><td align="left">美观好用的解压工具，就是添加密码不能加中文，但解压可以正常用。</td></tr><tr><td align="center"><a href="http://www.wofficebox.com/">万彩办公大师</a></td><td align="left">小工具箱，有很多便利的功能。推荐下载，就算现在用不到，说不定以后哪天就有用了。占内存很小，想用哪个功能可以再下。</td></tr><tr><td align="center"><a href="https://www.abbyychina.com/">ABBYY FineReader</a></td><td align="left">说起OCR，不得不提这个软件。但作为个体用户购买有点贵，也没有必要，其实用不到几次。除非是专门从事相关工作，不然还是自行去搜一下破解版吧。</td></tr><tr><td align="center"><a href="https://www.fosshub.com/Caesium-Image-Compressor.html">Caesium Image Compressor</a></td><td align="left">压缩图片</td></tr><tr><td align="center"><a href="https://www.microsoft.com/zh-cn/p/%E5%8F%96%E8%89%B2%E5%99%A8/9mzhgfqsrfhg?activetab=pivot:overviewtab">取色器</a></td><td align="left">通过鼠标选取屏幕中像素的颜色</td></tr><tr><td align="center"><a href="https://zh.snipaste.com/">Snipaste</a></td><td align="left">默认F1快捷键截图，而且截图时会自动分块，很方便。还有取色功能，可以取代上一个软件。有UWP版本。</td></tr><tr><td align="center"><a href="https://notepad-plus-plus.org/downloads/">Notepad++</a></td><td align="left">替代Windows自带的记事本使用，把编码方式设置成UTF-8(无BOM)【更新：作者是港独，而且软件上写了，介意的不要用】</td></tr><tr><td align="center"><a href="https://www.sublimetext.com/3">Sublime Text 3</a></td><td align="left">轻量级文本编辑器，打开速度很快，就算不是从事CS的，也可以替代Windows自带的notepad使用。（其实我主要是用来写markdown的）</td></tr><tr><td align="center"><a href="https://code.visualstudio.com/download">Visual Studio Code</a></td><td align="left">这个还用推荐吗</td></tr></tbody></table><h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><p>前言：插件都是基于谷歌浏览器</p><table><thead><tr><th align="center">插件</th><th align="left">功能</th></tr></thead><tbody><tr><td align="center"><a href="https://chrome.google.com/webstore/detail/%E9%9B%86%E8%A3%85%E7%AE%B1/kbgigmcnifmaklccibmlepmahpfdhjch">集装箱</a></td><td align="left">可以使用谷歌的一些基本服务，建议最先安装，之后就可以顺利进入Chrome网上商店安装扩展了。还有网盘助手等一系列功能。</td></tr><tr><td align="center"><a href="https://chrome.google.com/webstore/detail/%E8%B0%B7%E6%AD%8C%E4%B8%8A%E7%BD%91%E5%8A%A9%E6%89%8B/nonmafimegllfoonjgplbabhmgfanaka">谷歌上网助手</a></td><td align="left">可以访问谷歌google搜索，gmail邮箱，google+等谷歌产品，建议最先安装，和“集装箱”任选一个</td></tr><tr><td align="center"><a href="https://chrome.google.com/webstore/detail/clean-crxmouse-gestures/mjidkpedjlfnanainpdfnedkdlacidla">CLEAN crxMouse Gestures</a></td><td align="left">必装！！！鼠标手势，用了就回不去了</td></tr><tr><td align="center"><a href="https://chrome.google.com/webstore/detail/download-plus/gokgophibdidjjpildcdbfpmcahilaaf">下载+</a></td><td align="left">谷歌自带的下载实在不怎么好用，这个可以解决问题，还带有嗅探</td></tr><tr><td align="center"><a href="https://chrome.google.com/webstore/detail/chrono-download-manager/mciiogijehkdemklbdcbfkefimifhecn?hl=zh-CN">Chrono下载管理器</a></td><td align="left">界面美观，功能强大的下载管理器</td></tr><tr><td align="center"><a href="https://chrome.google.com/webstore/detail/disable-automatic-tab-dis/dnhngfnfolbmhgealdpolmhimnoliiok/related?hl=zh-CN">Disable automatic tab discarding</a></td><td align="left">过一段时间后回到已打开的标签页会重新加载，谷歌自带的设置里也去掉了关掉此功能的选项，这个拓展解决了这个问题</td></tr><tr><td align="center"><a href="https://chrome.google.com/webstore/detail/bookmark-sidebar/jdbnofccmhefkmjbkkdkfiicjkgofkdh">书签侧边栏</a></td><td align="left">管理书签，要设置内容有点多，但设置好了非常好看和便利</td></tr><tr><td align="center"><a href="https://chrome.google.com/webstore/detail/infinity-new-tab-pro/nnnkddnnlpamobajfibfdgfnbcnkgngh">Infinity新标签页(Pro)</a></td><td align="left">自定义新标签页，更新标签页壁纸</td></tr><tr><td align="center"><a href="https://chrome.google.com/webstore/detail/dark-reader/eimadpbcbfnmbkopoojfekhnkhdbieeh">Dark Reader</a></td><td align="left">网页调成黑色主题，适合于夜间浏览网页</td></tr><tr><td align="center"><a href="https://chrome.google.com/webstore/detail/take-webpage-screenshots/mcbpblocgmgfnpjjppndjkmgjaogfceg">捕捉网页截图</a></td><td align="left">可以以各种方式截取网页</td></tr><tr><td align="center"><a href="https://chrome.google.com/webstore/detail/qcode-%E4%BA%8C%E7%BB%B4%E7%A0%81%E3%80%81%E7%9F%AD%E9%93%BE%E6%8E%A5-%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/aefjmcpolambjjegdnmpcblmldcoebdm">QCODE 二维码</a></td><td align="left">网页生成二维码和短链，方便手机观看(更新：最新版谷歌浏览器已自带二维码功能)</td></tr><tr><td align="center"><a href="https://chrome.google.com/webstore/detail/video-speed-controller/nffaoalbilbmmfgbnbgppjihopabppdk">Video Speed Controller</a></td><td align="left">这个真的超有用！随时调视频加速倍速，对于我这样不加速就不想看视频的人简直是救星。但只支持HTML5视频，不过现在大多数都换成了这种格式。今年flash就要停止更新了。</td></tr><tr><td align="center"><a href="https://chrome.google.com/webstore/detail/cursor-style-custom-curso/bmjmipppabdlpjccanalncobmbacckjn">Cursor style</a></td><td align="left">浏览器自定义光标，自带光标挺多的，也可以自己上传。</td></tr><tr><td align="center"><a href="https://chrome.google.com/webstore/detail/idm-integration-module/ngpampappnmepgilojfohadhhmbhlaek">IDM Integration Module</a></td><td align="left">搭配IDM使用</td></tr><tr><td align="center"><a href="https://chrome.google.com/webstore/detail/bilibili%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9%E4%B8%8B%E8%BD%BD%E5%8A%A9%E6%89%8B/bfcbfobhcjbkilcbehlnlchiinokiijp">哔哩哔哩下载助手</a></td><td align="left">下载b站版权受限（能看不能缓存）的番剧视频，一般的视频当然也能下</td></tr><tr><td align="center"><a href="https://chrome.google.com/webstore/detail/onetab-plustab-manage-pro/lepdjbhbkpfenckechpdfohdmkhogojf">One Tab Plus:标签效率管理</a></td><td align="left">减少标签混用（更新：最新版浏览器自身已支持标签页分组）</td></tr><tr><td align="center"><a href="https://chrome.google.com/webstore/detail/save-to-pocket/niloccemoadcdkdjlinkgdfekeahmflj">Save to Pocket</a></td><td align="left">收集暂时不想读的网页，有时间了再来慢慢看，优点在于全平台（我建一个暂时收藏夹，所以不怎么用）</td></tr><tr><td align="center"><a href="https://chrome.google.com/webstore/detail/currency-converter/dkpedpjjafnceedhomeijlphmjbblmdj">货币转换器</a></td><td align="left">随时调用查汇率，在买外国东西时估算价格很方便</td></tr><tr><td align="center"><a href="https://chrome.google.com/webstore/detail/%E5%88%92%E8%AF%8D%E7%BF%BB%E8%AF%91/ikhdkkncnoglghljlkmcimlnlhkeamad">划词翻译</a></td><td align="left">一个强大的翻译拓展（更新：我写某个CSS出现了莫名其妙的布局，除此之外，都挺好用的）</td></tr><tr><td align="center"><a href="https://chrome.google.com/webstore/detail/cdonnmffkdaoajfknoeeecmchibpmkmg">沙拉查词</a></td><td align="left">集合了很多词典，界面比较美观，推荐</td></tr><tr><td align="center"><a href="https://chrome.google.com/webstore/detail/lingocloud-web-translatio/jmpepeebcbihafjjadogphmbgiffiajh">彩云小译</a></td><td align="left">日语翻译质量很高，啃生肉利器</td></tr><tr><td align="center"><a href="https://chrome.google.com/webstore/detail/adblock-%E2%80%94-best-ad-blocker/gighmmpiobklfepjocnamgkkbiglidom">AdBlock</a></td><td align="left">广告拦截工具，和”Adblock Plus”任选一个安装</td></tr><tr><td align="center"><a href="https://chrome.google.com/webstore/detail/adblock-plus-free-ad-bloc/cfhdojbkjhnklbpkdaibdccddilifddb">Adblock Plus</a></td><td align="left">广告拦截工具，和”Adblock”任选一个安装</td></tr><tr><td align="center"><a href="https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo">Tampermonkey</a></td><td align="left">著名的油猴插件</td></tr><tr><td align="center"><a href="https://chrome.google.com/webstore/detail/github-repository-size/apnjnioapinblneaedefcnopcjepgkci">GitHub Repository Size</a></td><td align="left">可以显示GitHub仓库和文件库的大小</td></tr><tr><td align="center"><a href="https://chrome.google.com/webstore/detail/gitzip-for-github/ffabmkklhbepgcgfonabamgnfafbdlkn">GitZip for github</a></td><td align="left">可以下载GitHub一个项目的单个文件或文件夹</td></tr><tr><td align="center"><a href="https://chrome.google.com/webstore/detail/enhanced-github/anlikcnbgdeidpacdbdljnabclhahhmd">Enhanced GitHub</a></td><td align="left">在GitHub上显示项目大小和下载等功能</td></tr></tbody></table><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><p>前言：脚本都是用油猴安装的。功能也不用多解释吧，大部分名字都已说明了一切</p><h2 id="油猴脚本推荐"><a href="#油猴脚本推荐" class="headerlink" title="油猴脚本推荐"></a>油猴脚本推荐</h2><table><thead><tr><th align="left">脚本</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left"><a href="https://greasyfork.org/scripts/2312-resize-image-on-open-image-in-new-tab">右键在新标签中打开图片时显示最优化图像质量</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greasyfork.org/scripts/4233-miniblogimgpop-%E5%BE%AE%E5%8D%9A%E6%B5%AE%E5%9B%BE">微博浮图</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greasyfork.org/scripts/3249-yet-another-weibo-filter">药方(YAWF)</a></td><td align="left">微博排版修改</td></tr><tr><td align="left"><a href="https://greasyfork.org/scripts/21659-%E7%9F%A5%E4%B9%8E%E6%8E%92%E7%89%88%E4%BC%98%E5%8C%96">知乎排版优化</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greasyfork.org/scripts/329484-%E8%B1%86%E7%93%A3%E8%B5%84%E6%BA%90%E4%B8%8B%E8%BD%BD%E5%A4%A7%E5%B8%88-1%E7%A7%92%E6%90%9E%E5%AE%9A%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1-%E9%9F%B3%E4%B9%90-%E5%9B%BE%E4%B9%A6%E4%B8%8B%E8%BD%BD">豆瓣资源下载大师</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greasyfork.org/scripts/23687-%E8%B4%B4%E5%90%A7%E9%A1%B5%E9%9D%A2%E7%B2%BE%E7%AE%80">贴吧页面精简</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greasyfork.org/scripts/33729-%E4%BA%AC%E4%B8%9C%E8%87%AA%E8%90%A5%E8%BF%87%E6%BB%A4">京东自营过滤</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greasyfork.org/scripts/27183-%E6%8B%92%E7%BB%9D%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%99%BB%E5%BD%95-%E6%B7%98%E5%AE%9D-%E4%BA%AC%E4%B8%9C%E7%AD%89%E7%BD%91%E7%AB%99%E9%BB%98%E8%AE%A4%E5%87%BA%E7%8E%B0%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95%E7%95%8C%E9%9D%A2">拒绝二维码登录</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://greasyfork.org/scripts/28497-remove-web-limits-modified">网页限制解除(改)</a></td><td align="left">实用！！！可以复制一些不允许复制的文字</td></tr><tr><td align="left"><a href="https://greasyfork.org/scripts/24508-userscript-show-site-all-userjs">显示当前网站所有可用的UserJS脚本</a></td><td align="left"></td></tr></tbody></table><h2 id="将油猴脚本同步"><a href="#将油猴脚本同步" class="headerlink" title="将油猴脚本同步"></a>将油猴脚本同步</h2><ol><li>打开油猴，在设置中将”配置模式“改为“高级”</li><li>往下拉，将同步脚本中“启用TESLA”打勾，“同步类型”选择“浏览器同步”</li><li>油猴脚本与你的浏览器同步成功。记得要注册谷歌账号，不然你浏览器本身就没同步脚本当然也不会同步</li></ol><h1 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h1><h2 id="搜书"><a href="#搜书" class="headerlink" title="搜书"></a>搜书</h2><table><thead><tr><th align="center">网站</th><th align="left">备注</th></tr></thead><tbody><tr><td align="center"><a href="https://www.jiumodiary.com/">鸠摩搜索</a></td><td align="left"></td></tr><tr><td align="center"><a href="http://gen.lib.rus.ec/">Library Genesis</a></td><td align="left">基本上出版的书这里都找得到，也可以搜索论文和杂志等。</td></tr><tr><td align="center"><a href="https://b-ok.org/">ZLibrary</a></td><td align="left">是上面的镜像网站，一般可以直连。</td></tr><tr><td align="center"><a href="https://volmoe.com/">volmoe</a></td><td align="left">可推送书籍到kindle上（不过我觉得在kindle上看漫画简直伤眼睛，还不如下载到电脑上看，小说倒是不错）</td></tr></tbody></table><h2 id="图片相关"><a href="#图片相关" class="headerlink" title="图片相关"></a>图片相关</h2><table><thead><tr><th align="center">网站</th><th align="left">备注</th></tr></thead><tbody><tr><td align="center"><a href="https://www.saucenao.com/">SauceNAo</a></td><td align="left">可以直接搜出图片的p站号以及作者，很方便</td></tr><tr><td align="center"><a href="https://www.remove.bg/zh">removebg</a></td><td align="left">一键抠图，不需要任何操作，适合就想弄个登记照或其它要求不高的情况</td></tr></tbody></table><h2 id="文档相关"><a href="#文档相关" class="headerlink" title="文档相关"></a>文档相关</h2><table><thead><tr><th align="center">网站</th><th align="left">功能</th></tr></thead><tbody><tr><td align="center"><a href="https://docsmall.com/">docsmall</a></td><td align="left">pdf合并、分割、压缩</td></tr><tr><td align="center"><a href="http://ocr.space/">ocr.space</a></td><td align="left">免费OCR工具</td></tr><tr><td align="center"><a href="https://web.baimiaoapp.com/">白描</a></td><td align="left">比较好用的OCR</td></tr></tbody></table><h2 id="壁纸"><a href="#壁纸" class="headerlink" title="壁纸"></a>壁纸</h2><table><thead><tr><th align="center">网站</th><th align="left">备注</th></tr></thead><tbody><tr><td align="center"><a href="https://bz.zzzmh.cn/">极简壁纸</a></td><td align="left"></td></tr><tr><td align="center"><a href="https://wallhaven.cc/">wallhaven</a></td><td align="left"></td></tr><tr><td align="center"><a href="https://store.steampowered.com/app/431960/Wallpaper_Engine/">Wallpaper Engine</a></td><td align="left">很多好玩的壁纸我的电脑用着都很卡，所以买了几天就没用了</td></tr></tbody></table><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><table><thead><tr><th align="center">网站</th><th align="left">功能</th></tr></thead><tbody><tr><td align="center"><a href="https://www.speedtest.cn/">speedtest</a></td><td align="left">测网速</td></tr><tr><td align="center"><a href="https://www.dogedoge.com/">dogedoge</a></td><td align="left">搜索引擎，效仿duckduckgo，注重隐私保护。<br>搜索字符串<a href="https://dogedoge.com/results?q=%25s">https://dogedoge.com/results?q=%s</a></td></tr><tr><td align="center"><a href="https://tiansh.github.io/us-danmaku/bilibili/">bilibili ASS</a></td><td align="left">下载了XML弹幕文件，可在此网站转化为ASS格式</td></tr><tr><td align="center"><a href="https://www.webfx.com/tools/emoji-cheat-sheet/">emoji</a></td><td align="left">emoji具体怎么写</td></tr><tr><td align="center"><a href="https://zh.wikihow.com/%E9%A6%96%E9%A1%B5">wikiHow</a></td><td align="left">进去看看就知道啦</td></tr><tr><td align="center"><a href="https://www.runoob.com/">菜鸟教程</a></td><td align="left">有很多基本的计算机语言学习</td></tr></tbody></table><h1 id="手机app"><a href="#手机app" class="headerlink" title="手机app"></a>手机app</h1><h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><p>前言：手机软件的广告是真的无法完全避免，所以对广告的要求低一点，以实用为主。</p><table><thead><tr><th align="center">APP</th><th align="left">功能</th></tr></thead><tbody><tr><td align="center"><del>夸克浏览器</del></td><td align="left"><del>无广告，可以倍速看视频，强推</del><br>安装包越来越大，很臃肿，不是很推荐了。</td></tr><tr><td align="center">via浏览器</td><td align="left">不到1M，支持安装插件，可以直接在<a href="http://via-app.cn/#/tabBar/home">这里</a>下载一些插件。</td></tr><tr><td align="center">酷安</td><td align="left">应用很全，相当于国内的play商店。有些软件下的评论有惊喜。</td></tr><tr><td align="center">静读天下</td><td align="left">电子书阅读器，支持多种格式包括epub，pdf，azw3，mobi，手机上只需下载这一个阅读器就够了。</td></tr><tr><td align="center">欧路词典</td><td align="left">界面简洁，支持自定义导入词典。</td></tr><tr><td align="center">一个木函</td><td align="left">体积小，很多实用工具的集合</td></tr><tr><td align="center">Microsoft Office</td><td align="left">新版本已把Word、Excel和PowerPoint合并在这一个软件中，通过OneDrive同步文件，非常好用。（写这个人尽皆知的软件主要是为了批评一下WPS，为什么广告超多还有那么多人在用）</td></tr><tr><td align="center">OneDrive</td><td align="left">微软推出的网络硬盘及云端服务，免费用户有5G存储空间，就是同步速度有点慢。</td></tr><tr><td align="center">ES文件浏览器</td><td align="left">文件资源管理器，自带的解压和看图功能很方便。</td></tr><tr><td align="center">MX Player</td><td align="left">超好用的手机视频播放器</td></tr><tr><td align="center">白描</td><td align="left">OCR，中文识别率还行，免费用户可以每日识别5次</td></tr><tr><td align="center">极度扫描</td><td align="left">OCR，最大的优点是支持公式识别</td></tr><tr><td align="center">TextGrabber</td><td align="left">ABBYY出品的手机OCR软件</td></tr><tr><td align="center">什么值得买</td><td align="left">网购之前先查一下，有很多优惠券，可以看到史低。运气好可以上到神车。</td></tr></tbody></table><h2 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h2><p>前言：安卓上有的大部分就不再推荐，主要写一些苹果专有的软件。</p><table><thead><tr><th align="center">APP</th><th align="left">功能</th></tr></thead><tbody><tr><td align="center">‎<a href="https://apps.apple.com/cn/app/cerulean-%E5%B0%8F%E5%B7%A5%E5%85%B7%E5%90%88%E9%9B%86/id1381352370">Cerulean</a></td><td align="left">功能类似与安卓上的“一个木函”，小工具箱，但体积比它大，IOS上现在的“一个木函”都是假的</td></tr><tr><td align="center"><a href="https://apps.apple.com/cn/app/es%E6%96%87%E4%BB%B6%E6%B5%8F%E8%A7%88%E5%99%A8-zip-rar-7z%E5%8E%8B%E7%BC%A9%E5%92%8C%E8%A7%A3%E5%8E%8B%E7%BC%A9/id1441621965">ES文件浏览器</a></td><td align="left">每次用数据线传输东西，都只能传到几个特定的软件，这个就可以直接被传入。毕竟是文件管理器，也不算什么。关键是它可以直接解压压缩包和看视频，还自带倍速。不用专门再去下载播放器。</td></tr><tr><td align="center"><a href="https://apps.apple.com/cn/app/%E5%A5%87%E7%82%B9-3/id947792507">奇点</a></td><td align="left">第三方微博客户端，很好用</td></tr><tr><td align="center"><a href="https://apps.apple.com/cn/app/alook%E6%B5%8F%E8%A7%88%E5%99%A8-2%E5%80%8D%E9%80%9F/id1261944766">Alook</a></td><td align="left">6元你买不了吃亏。自带解压功能，支持大部分图书格式。</td></tr><tr><td align="center"><a href="https://apps.apple.com/cn/app/%E5%A4%9A%E7%9C%8B%E9%98%85%E8%AF%BB-%E5%B0%8F%E7%B1%B3%E5%87%BA%E5%93%81%E7%9A%84%E5%B0%8F%E8%AF%B4%E5%9B%BE%E4%B9%A6%E9%98%85%E8%AF%BB%E8%BD%AF%E4%BB%B6/id517850153">多看阅读</a></td><td align="left">txt阅读器。因为是一个书城，所以没有纯粹的txt阅读器那么简洁。但是只用书架功能就还可以，开屏无广告。设置齐全但不繁琐，基础功能都有。</td></tr></tbody></table><table><thead><tr><th align="center">txt阅读器</th><th align="left">简评</th></tr></thead><tbody><tr><td align="center">ES文件浏览器</td><td align="left">自带的txt阅读器容易出现断页的情况，而且黑色背景下的字体颜色太刺眼。</td></tr><tr><td align="center">Anyview</td><td align="left">众多人推荐的，UI做的确实漂亮，而且无广告。但是不能滚动阅读，这对我来说是刚需。</td></tr><tr><td align="center">简读</td><td align="left">又是没有滚动阅读！简约风，无广告。</td></tr><tr><td align="center">多多阅读</td><td align="left">这是由于一个奇怪理由被我放弃的阅读器——可设置的选项太多了！我并不需要把每个间距都可设置，状态栏可定制！但是自带的几个主题又不太好用。<br>主要是设置界面做的太不友好了，要定制一个主题，就一刷地让你设置一满页。还全是文字，没有图形示意，看着就头疼。无广告。</td></tr><tr><td align="center">掌阅</td><td align="left">最大的缺点是滚动得太快了，滑一下页面就向下滚很远，不好操作。有广告。</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>实用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Software</tag>
      
      <tag>Plugins</tag>
      
      <tag>Website</tag>
      
      <tag>Tampermonkey</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown语法</title>
    <link href="/posts/87f960c2.html"/>
    <url>/posts/87f960c2.html</url>
    
    <content type="html"><![CDATA[<p>Markdown语法及emoji输出</p><span id="more"></span><h1 id="Markdown语法"><a href="#Markdown语法" class="headerlink" title="Markdown语法"></a>Markdown语法</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><figure class="highlight md"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs md">一级标题：#<br>二级标题：##<br>以此类推<br></code></pre></div></td></tr></tbody></table></figure><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><figure class="highlight md"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs md">加删除线：~~text~~<br>PS. text两边加中括号删除线不起作用，也可以用<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">del</span>&gt;</span></span>text<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">del</span>&gt;</span></span><br>字体倾斜：<span class="hljs-emphasis">*text*</span><br>字体加粗：<span class="hljs-strong">**text**</span><br>斜体加粗：<span class="hljs-strong">**<span class="hljs-emphasis">*text<span class="hljs-strong">**<span class="hljs-emphasis">*</span></span></span></span><br></code></pre></div></td></tr></tbody></table></figure><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>三个以上-或*<br>例如</p><figure class="highlight md"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs md">---<br>----<br><span class="hljs-strong">**<span class="hljs-emphasis">*</span></span><br><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">****</span></span></span><br></code></pre></div></td></tr></tbody></table></figure><hr><hr><hr><hr><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><figure class="highlight md"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs md">引用内容：&gt;　　　<br>引用引用的内容：&gt;&gt;　<br>以此类推<br></code></pre></div></td></tr></tbody></table></figure><h2 id="代码使用"><a href="#代码使用" class="headerlink" title="代码使用"></a>代码使用</h2><ul><li>行内代码用两个反引号 `kkkk`</li><li>多行代码用两个三反引号，反引号要单独一行。<br>```C<br>int main()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;printf(“Hello, World!”);<br>&nbsp;&nbsp;&nbsp;&nbsp;return 0;<br>}<br>```</li></ul><p>效果：<br>行内代码<code>kkkk</code><br>多行代码</p><figure class="highlight c"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Hello, World!"</span>);<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></div></td></tr></tbody></table></figure><h2 id="空格与换行"><a href="#空格与换行" class="headerlink" title="空格与换行"></a>空格与换行</h2><p>缩进一个空格（半角空格）：添加<code>&amp;ensp;</code><br>缩进两个空格（全角空格）：添加<code>&amp;emsp;</code>或者使用全角空格<br>P.S.一个汉字占两个空格</p><p>换行：<code>&lt;br /&gt;</code></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>有序列表：<code>数字 + 点</code><br>无序列表：<code>- / + / * + 文字</code><br>嵌套只需要在符号前加 <code>Tab</code></p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight markdown"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">表头|表头|表头<br>-|:-:|-:<br>内容|内容|内容<br>内容|内容|内容<br><br>第二行分割表头和内容。<br>-可以有一个或多个<br>文字默认居左<br>两边加：文字居中<br>右边加：文字居右<br></code></pre></div></td></tr></tbody></table></figure><p>例如</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">姓名|分数|排行<br>:-:|-|-:<br>张三|56|2<br>刘四|45|3<br>李五|70|1<br></code></pre></div></td></tr></tbody></table></figure><table><thead><tr><th align="center">姓名</th><th>分数</th><th align="right">排行</th></tr></thead><tbody><tr><td align="center">张三</td><td>56</td><td align="right">2</td></tr><tr><td align="center">刘四</td><td>45</td><td align="right">3</td></tr><tr><td align="center">李五</td><td>70</td><td align="right">1</td></tr></tbody></table><h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><figure class="highlight markdown"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">![<span class="hljs-string">图片alt</span>](<span class="hljs-link">图片地址 "图片title"</span>)<br><br>图片alt是描述图片的关键词，可不写。当图片因为某种原因不能被显示时而出现的替代文字。<br>图片title是图片的标题，可不写。当鼠标移到图片上时显示的内容。<br></code></pre></div></td></tr></tbody></table></figure><p>例如：</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">![<span class="hljs-string">百度搜索</span>](<span class="hljs-link">https://www.baidu.com/img/bd_logo1.png "百度"</span>)<br></code></pre></div></td></tr></tbody></table></figure><p><img src="https://www.baidu.com/img/bd_logo1.png" alt="百度搜索" title="百度"></p><h2 id="插入链接"><a href="#插入链接" class="headerlink" title="插入链接"></a>插入链接</h2><figure class="highlight markdown"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">[<span class="hljs-string">超链接名</span>](<span class="hljs-link">超链接地址 "超链接title"</span>)，title可加可不加<br></code></pre></div></td></tr></tbody></table></figure><p>例如：</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">[<span class="hljs-string">blog</span>](<span class="hljs-link">https://fehek.xyz "Fehek的博客"</span>)<br></code></pre></div></td></tr></tbody></table></figure><p><a href="https://fehek.xyz/" title="Fehek的博客">blog</a></p><h1 id="输出emoji"><a href="#输出emoji" class="headerlink" title="输出emoji"></a>输出emoji</h1><figure class="highlight markdown"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">:laughing: :smirk: :exclamation: :question: :octocat:<br></code></pre></div></td></tr></tbody></table></figure><p><span class="github-emoji"><span>😆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <span class="github-emoji"><span>😏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <span class="github-emoji"><span>❗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <span class="github-emoji"><span>❓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2753.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <span class="github-emoji"><span> </span><img src="https://github.githubassets.com/images/icons/emoji/octocat.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><br>更多：<a href="https://www.webfx.com/tools/emoji-cheat-sheet/">https://www.webfx.com/tools/emoji-cheat-sheet/</a><br><a href="https://www.einsition.com/tools/emojicheatsheet">https://www.einsition.com/tools/emojicheatsheet</a></p>]]></content>
    
    
    <categories>
      
      <category>实用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown syntax</tag>
      
      <tag>Emoji</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>完善blog2</title>
    <link href="/posts/659a9035.html"/>
    <url>/posts/659a9035.html</url>
    
    <content type="html"><![CDATA[<p>一些小改进。</p><span id="more"></span><h1 id="修改永久链接"><a href="#修改永久链接" class="headerlink" title="修改永久链接"></a>修改永久链接</h1><p>安装插件</p><figure class="highlight bash"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ npm install hexo-abbrlink --save <br></code></pre></div></td></tr></tbody></table></figure><p>打开根目录下的 _config.yml文件，修改为</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment"># permalink: :year/:month/:day/:title/</span><br><span class="hljs-attr">permalink:</span> <span class="hljs-string">posts/:abbrlink.html</span><br><span class="hljs-attr">abbrlink:</span><br>  <span class="hljs-attr">alg:</span> <span class="hljs-string">crc32</span>  <span class="hljs-comment"># 算法：crc16(default) and crc32</span><br>  <span class="hljs-attr">rep:</span> <span class="hljs-string">hex</span>    <span class="hljs-comment"># 进制：dec(default) and hex</span><br></code></pre></div></td></tr></tbody></table></figure><h1 id="修改排序配置"><a href="#修改排序配置" class="headerlink" title="修改排序配置"></a>修改排序配置</h1><p>top值越高，排序越在前，不设置top值得博文按照时间顺序排序。<br>打开node_modules/hexo-generator-index/lib/generator.js文件，添加</p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">posts.data = posts.data.sort(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">a, b</span>) </span>{<br><span class="hljs-keyword">if</span>(a.top &amp;&amp; b.top) {                             <span class="hljs-comment">// 两篇文章top都有定义</span><br>    <span class="hljs-keyword">if</span>(a.top == b.top) <span class="hljs-keyword">return</span> b.date - a.date;   <span class="hljs-comment">// 若top值一样则按照文章日期降序排</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> b.top - a.top;                   <span class="hljs-comment">// 否则按照top值降序排</span><br>}<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a.top &amp;&amp; !b.top) {                       <span class="hljs-comment">// 只有一篇文章top有定义，那么将有top的排在前面</span><br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>}<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!a.top &amp;&amp; b.top) {<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>}<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> b.date - a.date;                    <span class="hljs-comment">// 都没定义按照文章日期降序排</span><br>});<br></code></pre></div></td></tr></tbody></table></figure><p>最终显示</p><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-meta">'use strict'</span>;<br><br><span class="hljs-keyword">var</span> pagination = <span class="hljs-built_in">require</span>(<span class="hljs-string">'hexo-pagination'</span>);<br><br><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">locals</span>) </span>{<br>  <span class="hljs-keyword">var</span> config = <span class="hljs-built_in">this</span>.config;<br>  <span class="hljs-keyword">var</span> posts = locals.posts.sort(config.index_generator.order_by);<br><br>  posts.data = posts.data.sort(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">a, b</span>) </span>{<br>      <span class="hljs-keyword">if</span>(a.top &amp;&amp; b.top) {<br>          <span class="hljs-keyword">if</span>(a.top == b.top) <span class="hljs-keyword">return</span> b.date - a.date;<br>          <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> b.top - a.top;<br>      }<br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a.top &amp;&amp; !b.top) {<br>          <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>      }<br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!a.top &amp;&amp; b.top) {<br>          <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>      }<br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> b.date - a.date;<br>  });<br><br>  <span class="hljs-keyword">var</span> paginationDir = config.pagination_dir || <span class="hljs-string">'page'</span>;<br><br>  <span class="hljs-keyword">return</span> pagination(<span class="hljs-string">''</span>, posts, {<br>    perPage: config.index_generator.per_page,<br>    layout: [<span class="hljs-string">'index'</span>, <span class="hljs-string">'archive'</span>],<br>    format: paginationDir + <span class="hljs-string">'/%d/'</span>,<br>    data: {<br>      __index: <span class="hljs-literal">true</span><br>    }<br>  });<br>};<br></code></pre></div></td></tr></tbody></table></figure><p>更新：hexo-generator-index 从 2.0.0 开始，已经支持文章置顶功能。可以直接在文章的front-matter区域里添加sticky: Number将文章置顶。数值越大，置顶的优先级越高。 </p><h1 id="源文件备份"><a href="#源文件备份" class="headerlink" title="源文件备份"></a>源文件备份</h1><figure class="highlight stylus"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">将source文件上传到仓库分支，便于不同电脑编辑<br>在github上新建一个hexo分支，选择此分支分支为默认分支<br>（这样每次同步的时候就不用指定分支）<br><br>将其克隆到本地，因为默认分支已经设成了hexo，所以只克隆了hexo分支<br>git clone git@github<span class="hljs-selector-class">.com</span>:Fehek/Fehek<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.io</span>.git<br><br>在克隆到本地的Fehek<span class="hljs-selector-class">.github</span>.io中，把除了<span class="hljs-selector-class">.git</span> 文件夹外的所有文件都删掉<br><br>git add <br>git commit –m <span class="hljs-string">"XXX"</span><br>git push<br>上传完毕<br></code></pre></div></td></tr></tbody></table></figure><figure class="highlight awk"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">更换电脑，安装git和nodejs后<br>ssh-keygen -t rsa -C <span class="hljs-string">"youremail"</span>    <span class="hljs-regexp">//</span>设置ssh key，生成后填到github和coding上<br>ssh -T git@github.com               <span class="hljs-regexp">//</span>验证是否成功<br>ssh -T git@git.coding.net           <span class="hljs-regexp">//</span>没有coding账号可省略<br>sudo npm install hexo-cli -g        <span class="hljs-regexp">//</span>安装hexo  <br><br><span class="hljs-regexp">//</span>在任意文件夹下克隆<br>git clone git@………………                <br><span class="hljs-regexp">//</span>在克隆文件夹下安装<br>npm install                         <br>npm install hexo-deployer-git --save  <br><br><span class="hljs-regexp">//</span>生成及部署<br>hexo g &amp;&amp; hexo d <br><br><span class="hljs-regexp">//</span>源文件上传<br>git add .<br>git commit –m <span class="hljs-string">"xxxx"</span><br>git push  <br><br><span class="hljs-regexp">//</span>已经编辑过的电脑有clone文件夹了，和远端同步<br>git pull<br></code></pre></div></td></tr></tbody></table></figure><h1 id="加入emoji-sunglasses"><a href="#加入emoji-sunglasses" class="headerlink" title="加入emoji:sunglasses:"></a>加入emoji<span class="github-emoji"><span>😎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h1><p>下载插件 <code>npm install hexo-filter-github-emojis --save</code></p><p>修改根目录下的_config.yml文件，启用插件</p><figure class="highlight yml"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">githubEmojis:</span> <br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">className:</span> <span class="hljs-string">github-emoji</span><br>  <span class="hljs-attr">inject:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">styles:</span><br>  <span class="hljs-attr">customEmojis:</span><br></code></pre></div></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>blog相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo-abbrlink</tag>
      
      <tag>blog sorting</tag>
      
      <tag>upload source files</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>完善blog1</title>
    <link href="/posts/129da0a3.html"/>
    <url>/posts/129da0a3.html</url>
    
    <content type="html"><![CDATA[<p>添加APlayer播放器</p><figure class="highlight plain"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ejs">&lt;!-- 在\theme\fluid\layout\layout.ejs里添加 --&gt;<br>&lt;!-- 引用依赖 --&gt;<br>&lt;link rel="stylesheet" <br>  href="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css"&gt;<br>&lt;script src="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js"&gt;&lt;/script&gt;<br>&lt;script src="https://cdn.jsdelivr.net/npm/meting@1.2.0/dist/Meting.min.js"&gt;&lt;/script&gt;<br><br>&lt;!-- 我使用的APlayer本体 --&gt;<br>&lt;div class="aplayer" <br>  data-id="445994750" <br>  data-server="netease" <br>  data-type="playlist" <br>  data-fixed="true" <br>  data-autoplay="false" <br>  data-order="random" <br>  data-volume="0.7" <br>  data-theme="#cc543a" <br>  data-preload="auto" &gt;<br>  &lt;/div&gt;<br>&lt;!--如果将本体放在body里面导致页面加载出现问题，请尝试放到body体后面--&gt;<br></code></pre></div></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>blog相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>APlayer</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
